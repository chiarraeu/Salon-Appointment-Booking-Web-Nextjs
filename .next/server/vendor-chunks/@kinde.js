"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@kinde";
exports.ids = ["vendor-chunks/@kinde"];
exports.modules = {

/***/ "(rsc)/./node_modules/@kinde/jwt-decoder/dist/jwt-decoder.js":
/*!*************************************************************!*\
  !*** ./node_modules/@kinde/jwt-decoder/dist/jwt-decoder.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenPart: () => (/* binding */ s),\n/* harmony export */   jwtDecoder: () => (/* binding */ c)\n/* harmony export */ });\nvar s = /* @__PURE__ */ ((e)=>(e[e.header = 0] = \"header\", e[e.body = 1] = \"body\", e))(s || {});\nfunction c(e, t) {\n    if (!e) return null;\n    const r = e.split(\".\");\n    if (r.length !== 3) return null;\n    const n = r[t ?? 1].replace(/-/g, \"+\").replace(/_/g, \"/\"), o = decodeURIComponent(atob(n).split(\"\").map((l)=>\"%\" + (\"00\" + l.charCodeAt(0).toString(16)).slice(-2)).join(\"\"));\n    return JSON.parse(o);\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGtpbmRlL2p3dC1kZWNvZGVyL2Rpc3Qvand0LWRlY29kZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxJQUFJQSxJQUFvQixhQUFILEdBQUksRUFBQ0MsSUFBT0EsQ0FBQUEsQ0FBQyxDQUFDQSxFQUFFQyxNQUFNLEdBQUcsRUFBRSxHQUFHLFVBQVVELENBQUMsQ0FBQ0EsRUFBRUUsSUFBSSxHQUFHLEVBQUUsR0FBRyxRQUFRRixDQUFBQSxDQUFDLEVBQUdELEtBQUssQ0FBQztBQUMvRixTQUFTSSxFQUFFSCxDQUFDLEVBQUVJLENBQUM7SUFDYixJQUFJLENBQUNKLEdBQ0gsT0FBTztJQUNULE1BQU1LLElBQUlMLEVBQUVNLEtBQUssQ0FBQztJQUNsQixJQUFJRCxFQUFFRSxNQUFNLEtBQUssR0FDZixPQUFPO0lBQ1QsTUFBTUMsSUFBSUgsQ0FBQyxDQUNURCxLQUFLLEVBRU4sQ0FBQ0ssT0FBTyxDQUFDLE1BQU0sS0FBS0EsT0FBTyxDQUFDLE1BQU0sTUFBTUMsSUFBSUMsbUJBQzNDQyxLQUFLSixHQUFHRixLQUFLLENBQUMsSUFBSU8sR0FBRyxDQUFDLENBQUNDLElBQU0sTUFBTSxDQUFDLE9BQU9BLEVBQUVDLFVBQVUsQ0FBQyxHQUFHQyxRQUFRLENBQUMsR0FBRSxFQUFHQyxLQUFLLENBQUMsQ0FBQyxJQUFJQyxJQUFJLENBQUM7SUFFM0YsT0FBT0MsS0FBS0MsS0FBSyxDQUFDVjtBQUNwQjtBQUlFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vc2Fsb24tYXBwb2ludG1lbnQtYm9va2luZy13ZWItYXBwLy4vbm9kZV9tb2R1bGVzL0BraW5kZS9qd3QtZGVjb2Rlci9kaXN0L2p3dC1kZWNvZGVyLmpzPzc3ZTYiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIHMgPSAvKiBAX19QVVJFX18gKi8gKChlKSA9PiAoZVtlLmhlYWRlciA9IDBdID0gXCJoZWFkZXJcIiwgZVtlLmJvZHkgPSAxXSA9IFwiYm9keVwiLCBlKSkocyB8fCB7fSk7XG5mdW5jdGlvbiBjKGUsIHQpIHtcbiAgaWYgKCFlKVxuICAgIHJldHVybiBudWxsO1xuICBjb25zdCByID0gZS5zcGxpdChcIi5cIik7XG4gIGlmIChyLmxlbmd0aCAhPT0gMylcbiAgICByZXR1cm4gbnVsbDtcbiAgY29uc3QgbiA9IHJbXG4gICAgdCA/PyAxXG4gICAgLyogYm9keSAqL1xuICBdLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpLCBvID0gZGVjb2RlVVJJQ29tcG9uZW50KFxuICAgIGF0b2Iobikuc3BsaXQoXCJcIikubWFwKChsKSA9PiBcIiVcIiArIChcIjAwXCIgKyBsLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpLmpvaW4oXCJcIilcbiAgKTtcbiAgcmV0dXJuIEpTT04ucGFyc2Uobyk7XG59XG5leHBvcnQge1xuICBzIGFzIFRva2VuUGFydCxcbiAgYyBhcyBqd3REZWNvZGVyXG59O1xuIl0sIm5hbWVzIjpbInMiLCJlIiwiaGVhZGVyIiwiYm9keSIsImMiLCJ0IiwiciIsInNwbGl0IiwibGVuZ3RoIiwibiIsInJlcGxhY2UiLCJvIiwiZGVjb2RlVVJJQ29tcG9uZW50IiwiYXRvYiIsIm1hcCIsImwiLCJjaGFyQ29kZUF0IiwidG9TdHJpbmciLCJzbGljZSIsImpvaW4iLCJKU09OIiwicGFyc2UiLCJUb2tlblBhcnQiLCJqd3REZWNvZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kinde/jwt-decoder/dist/jwt-decoder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kinde/jwt-validator/dist/jsrsasign-B2gZIJhY.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@kinde/jwt-validator/dist/jsrsasign-B2gZIJhY.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   j: () => (/* binding */ An)\n/* harmony export */ });\nvar Ue = {};\nUe.userAgent = !1;\nvar Ve = {};\n/*! CryptoJS v3.1.2 core-fix.js\n * code.google.com/p/crypto-js\n * (c) 2009-2013 by Jeff Mott. All rights reserved.\n * code.google.com/p/crypto-js/wiki/License\n * THIS IS FIX of 'core.js' to fix Hmac issue.\n * https://code.google.com/p/crypto-js/issues/detail?id=84\n * https://crypto-js.googlecode.com/svn-history/r667/branches/3.x/src/core.js\n */ var K = K || function(e, t) {\n    var r = {}, i = r.lib = {}, s = i.Base = /* @__PURE__ */ function() {\n        function o() {}\n        return {\n            extend: function(l) {\n                o.prototype = this;\n                var f = new o();\n                return l && f.mixIn(l), f.hasOwnProperty(\"init\") || (f.init = function() {\n                    f.$super.init.apply(this, arguments);\n                }), f.init.prototype = f, f.$super = this, f;\n            },\n            create: function() {\n                var l = this.extend();\n                return l.init.apply(l, arguments), l;\n            },\n            init: function() {},\n            mixIn: function(l) {\n                for(var f in l)l.hasOwnProperty(f) && (this[f] = l[f]);\n                l.hasOwnProperty(\"toString\") && (this.toString = l.toString);\n            },\n            clone: function() {\n                return this.init.prototype.extend(this);\n            }\n        };\n    }(), n = i.WordArray = s.extend({\n        init: function(o, l) {\n            o = this.words = o || [], l != t ? this.sigBytes = l : this.sigBytes = o.length * 4;\n        },\n        toString: function(o) {\n            return (o || u).stringify(this);\n        },\n        concat: function(o) {\n            var l = this.words, f = o.words, d = this.sigBytes, g = o.sigBytes;\n            if (this.clamp(), d % 4) for(var S = 0; S < g; S++){\n                var b = f[S >>> 2] >>> 24 - S % 4 * 8 & 255;\n                l[d + S >>> 2] |= b << 24 - (d + S) % 4 * 8;\n            }\n            else for(var S = 0; S < g; S += 4)l[d + S >>> 2] = f[S >>> 2];\n            return this.sigBytes += g, this;\n        },\n        clamp: function() {\n            var o = this.words, l = this.sigBytes;\n            o[l >>> 2] &= 4294967295 << 32 - l % 4 * 8, o.length = e.ceil(l / 4);\n        },\n        clone: function() {\n            var o = s.clone.call(this);\n            return o.words = this.words.slice(0), o;\n        },\n        random: function(o) {\n            for(var l = [], f = 0; f < o; f += 4)l.push(e.random() * 4294967296 | 0);\n            return new n.init(l, o);\n        }\n    }), h = r.enc = {}, u = h.Hex = {\n        stringify: function(o) {\n            for(var l = o.words, f = o.sigBytes, d = [], g = 0; g < f; g++){\n                var S = l[g >>> 2] >>> 24 - g % 4 * 8 & 255;\n                d.push((S >>> 4).toString(16)), d.push((S & 15).toString(16));\n            }\n            return d.join(\"\");\n        },\n        parse: function(o) {\n            for(var l = o.length, f = [], d = 0; d < l; d += 2)f[d >>> 3] |= parseInt(o.substr(d, 2), 16) << 24 - d % 8 * 4;\n            return new n.init(f, l / 2);\n        }\n    }, p = h.Latin1 = {\n        stringify: function(o) {\n            for(var l = o.words, f = o.sigBytes, d = [], g = 0; g < f; g++){\n                var S = l[g >>> 2] >>> 24 - g % 4 * 8 & 255;\n                d.push(String.fromCharCode(S));\n            }\n            return d.join(\"\");\n        },\n        parse: function(o) {\n            for(var l = o.length, f = [], d = 0; d < l; d++)f[d >>> 2] |= (o.charCodeAt(d) & 255) << 24 - d % 4 * 8;\n            return new n.init(f, l);\n        }\n    }, c = h.Utf8 = {\n        stringify: function(o) {\n            try {\n                return decodeURIComponent(escape(p.stringify(o)));\n            } catch  {\n                throw new Error(\"Malformed UTF-8 data\");\n            }\n        },\n        parse: function(o) {\n            return p.parse(unescape(encodeURIComponent(o)));\n        }\n    }, y = i.BufferedBlockAlgorithm = s.extend({\n        reset: function() {\n            this._data = new n.init(), this._nDataBytes = 0;\n        },\n        _append: function(o) {\n            typeof o == \"string\" && (o = c.parse(o)), this._data.concat(o), this._nDataBytes += o.sigBytes;\n        },\n        _process: function(o) {\n            var l = this._data, f = l.words, d = l.sigBytes, g = this.blockSize, S = g * 4, b = d / S;\n            o ? b = e.ceil(b) : b = e.max((b | 0) - this._minBufferSize, 0);\n            var D = b * g, A = e.min(D * 4, d);\n            if (D) {\n                for(var I = 0; I < D; I += g)this._doProcessBlock(f, I);\n                var m = f.splice(0, D);\n                l.sigBytes -= A;\n            }\n            return new n.init(m, A);\n        },\n        clone: function() {\n            var o = s.clone.call(this);\n            return o._data = this._data.clone(), o;\n        },\n        _minBufferSize: 0\n    });\n    i.Hasher = y.extend({\n        cfg: s.extend(),\n        init: function(o) {\n            this.cfg = this.cfg.extend(o), this.reset();\n        },\n        reset: function() {\n            y.reset.call(this), this._doReset();\n        },\n        update: function(o) {\n            return this._append(o), this._process(), this;\n        },\n        finalize: function(o) {\n            o && this._append(o);\n            var l = this._doFinalize();\n            return l;\n        },\n        blockSize: 512 / 32,\n        _createHelper: function(o) {\n            return function(l, f) {\n                return new o.init(f).finalize(l);\n            };\n        },\n        _createHmacHelper: function(o) {\n            return function(l, f) {\n                return new v.HMAC.init(o, f).finalize(l);\n            };\n        }\n    });\n    var v = r.algo = {};\n    return r;\n}(Math);\n(function(e) {\n    var s = K, t = s.lib, r = t.Base, i = t.WordArray, s = s.x64 = {};\n    s.Word = r.extend({\n        init: function(n, h) {\n            this.high = n, this.low = h;\n        }\n    }), s.WordArray = r.extend({\n        init: function(n, h) {\n            n = this.words = n || [], this.sigBytes = h != e ? h : 8 * n.length;\n        },\n        toX32: function() {\n            for(var n = this.words, h = n.length, u = [], p = 0; p < h; p++){\n                var c = n[p];\n                u.push(c.high), u.push(c.low);\n            }\n            return i.create(u, this.sigBytes);\n        },\n        clone: function() {\n            for(var n = r.clone.call(this), h = n.words = this.words.slice(0), u = h.length, p = 0; p < u; p++)h[p] = h[p].clone();\n            return n;\n        }\n    });\n})();\nK.lib.Cipher || function(e) {\n    var l = K, t = l.lib, r = t.Base, i = t.WordArray, s = t.BufferedBlockAlgorithm, n = l.enc.Base64, h = l.algo.EvpKDF, u = t.Cipher = s.extend({\n        cfg: r.extend(),\n        createEncryptor: function(d, g) {\n            return this.create(this._ENC_XFORM_MODE, d, g);\n        },\n        createDecryptor: function(d, g) {\n            return this.create(this._DEC_XFORM_MODE, d, g);\n        },\n        init: function(d, g, S) {\n            this.cfg = this.cfg.extend(S), this._xformMode = d, this._key = g, this.reset();\n        },\n        reset: function() {\n            s.reset.call(this), this._doReset();\n        },\n        process: function(d) {\n            return this._append(d), this._process();\n        },\n        finalize: function(d) {\n            return d && this._append(d), this._doFinalize();\n        },\n        keySize: 4,\n        ivSize: 4,\n        _ENC_XFORM_MODE: 1,\n        _DEC_XFORM_MODE: 2,\n        _createHelper: function(d) {\n            return {\n                encrypt: function(g, S, b) {\n                    return (typeof S == \"string\" ? f : o).encrypt(d, g, S, b);\n                },\n                decrypt: function(g, S, b) {\n                    return (typeof S == \"string\" ? f : o).decrypt(d, g, S, b);\n                }\n            };\n        }\n    });\n    t.StreamCipher = u.extend({\n        _doFinalize: function() {\n            return this._process(!0);\n        },\n        blockSize: 1\n    });\n    var v = l.mode = {}, p = function(d, g, S) {\n        var b = this._iv;\n        b ? this._iv = e : b = this._prevBlock;\n        for(var D = 0; D < S; D++)d[g + D] ^= b[D];\n    }, c = (t.BlockCipherMode = r.extend({\n        createEncryptor: function(d, g) {\n            return this.Encryptor.create(d, g);\n        },\n        createDecryptor: function(d, g) {\n            return this.Decryptor.create(d, g);\n        },\n        init: function(d, g) {\n            this._cipher = d, this._iv = g;\n        }\n    })).extend();\n    c.Encryptor = c.extend({\n        processBlock: function(d, g) {\n            var S = this._cipher, b = S.blockSize;\n            p.call(this, d, g, b), S.encryptBlock(d, g), this._prevBlock = d.slice(g, g + b);\n        }\n    }), c.Decryptor = c.extend({\n        processBlock: function(d, g) {\n            var S = this._cipher, b = S.blockSize, D = d.slice(g, g + b);\n            S.decryptBlock(d, g), p.call(this, d, g, b), this._prevBlock = D;\n        }\n    }), v = v.CBC = c, c = (l.pad = {}).Pkcs7 = {\n        pad: function(d, g) {\n            for(var S = 4 * g, S = S - d.sigBytes % S, b = S << 24 | S << 16 | S << 8 | S, D = [], A = 0; A < S; A += 4)D.push(b);\n            S = i.create(D, S), d.concat(S);\n        },\n        unpad: function(d) {\n            d.sigBytes -= d.words[d.sigBytes - 1 >>> 2] & 255;\n        }\n    }, t.BlockCipher = u.extend({\n        cfg: u.cfg.extend({\n            mode: v,\n            padding: c\n        }),\n        reset: function() {\n            u.reset.call(this);\n            var g = this.cfg, d = g.iv, g = g.mode;\n            if (this._xformMode == this._ENC_XFORM_MODE) var S = g.createEncryptor;\n            else S = g.createDecryptor, this._minBufferSize = 1;\n            this._mode = S.call(g, this, d && d.words);\n        },\n        _doProcessBlock: function(d, g) {\n            this._mode.processBlock(d, g);\n        },\n        _doFinalize: function() {\n            var d = this.cfg.padding;\n            if (this._xformMode == this._ENC_XFORM_MODE) {\n                d.pad(this._data, this.blockSize);\n                var g = this._process(!0);\n            } else g = this._process(!0), d.unpad(g);\n            return g;\n        },\n        blockSize: 4\n    });\n    var y = t.CipherParams = r.extend({\n        init: function(d) {\n            this.mixIn(d);\n        },\n        toString: function(d) {\n            return (d || this.formatter).stringify(this);\n        }\n    }), v = (l.format = {}).OpenSSL = {\n        stringify: function(d) {\n            var g = d.ciphertext;\n            return d = d.salt, (d ? i.create([\n                1398893684,\n                1701076831\n            ]).concat(d).concat(g) : g).toString(n);\n        },\n        parse: function(d) {\n            d = n.parse(d);\n            var g = d.words;\n            if (g[0] == 1398893684 && g[1] == 1701076831) {\n                var S = i.create(g.slice(2, 4));\n                g.splice(0, 4), d.sigBytes -= 16;\n            }\n            return y.create({\n                ciphertext: d,\n                salt: S\n            });\n        }\n    }, o = t.SerializableCipher = r.extend({\n        cfg: r.extend({\n            format: v\n        }),\n        encrypt: function(d, g, S, b) {\n            b = this.cfg.extend(b);\n            var D = d.createEncryptor(S, b);\n            return g = D.finalize(g), D = D.cfg, y.create({\n                ciphertext: g,\n                key: S,\n                iv: D.iv,\n                algorithm: d,\n                mode: D.mode,\n                padding: D.padding,\n                blockSize: d.blockSize,\n                formatter: b.format\n            });\n        },\n        decrypt: function(d, g, S, b) {\n            return b = this.cfg.extend(b), g = this._parse(g, b.format), d.createDecryptor(S, b).finalize(g.ciphertext);\n        },\n        _parse: function(d, g) {\n            return typeof d == \"string\" ? g.parse(d, this) : d;\n        }\n    }), l = (l.kdf = {}).OpenSSL = {\n        execute: function(d, g, S, b) {\n            return b || (b = i.random(8)), d = h.create({\n                keySize: g + S\n            }).compute(d, b), S = i.create(d.words.slice(g), 4 * S), d.sigBytes = 4 * g, y.create({\n                key: d,\n                iv: S,\n                salt: b\n            });\n        }\n    }, f = t.PasswordBasedCipher = o.extend({\n        cfg: o.cfg.extend({\n            kdf: l\n        }),\n        encrypt: function(d, g, S, b) {\n            return b = this.cfg.extend(b), S = b.kdf.execute(S, d.keySize, d.ivSize), b.iv = S.iv, d = o.encrypt.call(this, d, g, S.key, b), d.mixIn(S), d;\n        },\n        decrypt: function(d, g, S, b) {\n            return b = this.cfg.extend(b), g = this._parse(g, b.format), S = b.kdf.execute(S, d.keySize, d.ivSize, g.salt), b.iv = S.iv, o.decrypt.call(this, d, g, S.key, b);\n        }\n    });\n}();\n(function() {\n    for(var e = K, t = e.lib.BlockCipher, m = e.algo, r = [], i = [], s = [], n = [], h = [], u = [], p = [], c = [], y = [], v = [], o = [], l = 0; 256 > l; l++)o[l] = 128 > l ? l << 1 : l << 1 ^ 283;\n    for(var f = 0, d = 0, l = 0; 256 > l; l++){\n        var g = d ^ d << 1 ^ d << 2 ^ d << 3 ^ d << 4, g = g >>> 8 ^ g & 255 ^ 99;\n        r[f] = g, i[g] = f;\n        var S = o[f], b = o[S], D = o[b], A = 257 * o[g] ^ 16843008 * g;\n        s[f] = A << 24 | A >>> 8, n[f] = A << 16 | A >>> 16, h[f] = A << 8 | A >>> 24, u[f] = A, A = 16843009 * D ^ 65537 * b ^ 257 * S ^ 16843008 * f, p[g] = A << 24 | A >>> 8, c[g] = A << 16 | A >>> 16, y[g] = A << 8 | A >>> 24, v[g] = A, f ? (f = S ^ o[o[o[D ^ S]]], d ^= o[o[d]]) : f = d = 1;\n    }\n    var I = [\n        0,\n        1,\n        2,\n        4,\n        8,\n        16,\n        32,\n        64,\n        128,\n        27,\n        54\n    ], m = m.AES = t.extend({\n        _doReset: function() {\n            for(var x = this._key, E = x.words, w = x.sigBytes / 4, x = 4 * ((this._nRounds = w + 6) + 1), F = this._keySchedule = [], P = 0; P < x; P++)if (P < w) F[P] = E[P];\n            else {\n                var T = F[P - 1];\n                P % w ? 6 < w && P % w == 4 && (T = r[T >>> 24] << 24 | r[T >>> 16 & 255] << 16 | r[T >>> 8 & 255] << 8 | r[T & 255]) : (T = T << 8 | T >>> 24, T = r[T >>> 24] << 24 | r[T >>> 16 & 255] << 16 | r[T >>> 8 & 255] << 8 | r[T & 255], T ^= I[P / w | 0] << 24), F[P] = F[P - w] ^ T;\n            }\n            for(E = this._invKeySchedule = [], w = 0; w < x; w++)P = x - w, T = w % 4 ? F[P] : F[P - 4], E[w] = 4 > w || 4 >= P ? T : p[r[T >>> 24]] ^ c[r[T >>> 16 & 255]] ^ y[r[T >>> 8 & 255]] ^ v[r[T & 255]];\n        },\n        encryptBlock: function(E, w) {\n            this._doCryptBlock(E, w, this._keySchedule, s, n, h, u, r);\n        },\n        decryptBlock: function(E, w) {\n            var x = E[w + 1];\n            E[w + 1] = E[w + 3], E[w + 3] = x, this._doCryptBlock(E, w, this._invKeySchedule, p, c, y, v, i), x = E[w + 1], E[w + 1] = E[w + 3], E[w + 3] = x;\n        },\n        _doCryptBlock: function(E, w, x, F, P, T, H, C) {\n            for(var B = this._nRounds, ne = E[w] ^ x[0], he = E[w + 1] ^ x[1], se = E[w + 2] ^ x[2], re = E[w + 3] ^ x[3], O = 4, j = 1; j < B; j++)var fe = F[ne >>> 24] ^ P[he >>> 16 & 255] ^ T[se >>> 8 & 255] ^ H[re & 255] ^ x[O++], Z = F[he >>> 24] ^ P[se >>> 16 & 255] ^ T[re >>> 8 & 255] ^ H[ne & 255] ^ x[O++], X = F[se >>> 24] ^ P[re >>> 16 & 255] ^ T[ne >>> 8 & 255] ^ H[he & 255] ^ x[O++], re = F[re >>> 24] ^ P[ne >>> 16 & 255] ^ T[he >>> 8 & 255] ^ H[se & 255] ^ x[O++], ne = fe, he = Z, se = X;\n            fe = (C[ne >>> 24] << 24 | C[he >>> 16 & 255] << 16 | C[se >>> 8 & 255] << 8 | C[re & 255]) ^ x[O++], Z = (C[he >>> 24] << 24 | C[se >>> 16 & 255] << 16 | C[re >>> 8 & 255] << 8 | C[ne & 255]) ^ x[O++], X = (C[se >>> 24] << 24 | C[re >>> 16 & 255] << 16 | C[ne >>> 8 & 255] << 8 | C[he & 255]) ^ x[O++], re = (C[re >>> 24] << 24 | C[ne >>> 16 & 255] << 16 | C[he >>> 8 & 255] << 8 | C[se & 255]) ^ x[O++], E[w] = fe, E[w + 1] = Z, E[w + 2] = X, E[w + 3] = re;\n        },\n        keySize: 8\n    });\n    e.AES = t._createHelper(m);\n})();\n(function() {\n    function e(o, l) {\n        var f = (this._lBlock >>> o ^ this._rBlock) & l;\n        this._rBlock ^= f, this._lBlock ^= f << o;\n    }\n    function t(o, l) {\n        var f = (this._rBlock >>> o ^ this._lBlock) & l;\n        this._lBlock ^= f, this._rBlock ^= f << o;\n    }\n    var r = K, s = r.lib, i = s.WordArray, s = s.BlockCipher, n = r.algo, h = [\n        57,\n        49,\n        41,\n        33,\n        25,\n        17,\n        9,\n        1,\n        58,\n        50,\n        42,\n        34,\n        26,\n        18,\n        10,\n        2,\n        59,\n        51,\n        43,\n        35,\n        27,\n        19,\n        11,\n        3,\n        60,\n        52,\n        44,\n        36,\n        63,\n        55,\n        47,\n        39,\n        31,\n        23,\n        15,\n        7,\n        62,\n        54,\n        46,\n        38,\n        30,\n        22,\n        14,\n        6,\n        61,\n        53,\n        45,\n        37,\n        29,\n        21,\n        13,\n        5,\n        28,\n        20,\n        12,\n        4\n    ], u = [\n        14,\n        17,\n        11,\n        24,\n        1,\n        5,\n        3,\n        28,\n        15,\n        6,\n        21,\n        10,\n        23,\n        19,\n        12,\n        4,\n        26,\n        8,\n        16,\n        7,\n        27,\n        20,\n        13,\n        2,\n        41,\n        52,\n        31,\n        37,\n        47,\n        55,\n        30,\n        40,\n        51,\n        45,\n        33,\n        48,\n        44,\n        49,\n        39,\n        56,\n        34,\n        53,\n        46,\n        42,\n        50,\n        36,\n        29,\n        32\n    ], p = [\n        1,\n        2,\n        4,\n        6,\n        8,\n        10,\n        12,\n        14,\n        15,\n        17,\n        19,\n        21,\n        23,\n        25,\n        27,\n        28\n    ], c = [\n        {\n            0: 8421888,\n            268435456: 32768,\n            536870912: 8421378,\n            805306368: 2,\n            1073741824: 512,\n            1342177280: 8421890,\n            1610612736: 8389122,\n            1879048192: 8388608,\n            2147483648: 514,\n            2415919104: 8389120,\n            2684354560: 33280,\n            2952790016: 8421376,\n            3221225472: 32770,\n            3489660928: 8388610,\n            3758096384: 0,\n            4026531840: 33282,\n            134217728: 0,\n            402653184: 8421890,\n            671088640: 33282,\n            939524096: 32768,\n            1207959552: 8421888,\n            1476395008: 512,\n            1744830464: 8421378,\n            2013265920: 2,\n            2281701376: 8389120,\n            2550136832: 33280,\n            2818572288: 8421376,\n            3087007744: 8389122,\n            3355443200: 8388610,\n            3623878656: 32770,\n            3892314112: 514,\n            4160749568: 8388608,\n            1: 32768,\n            268435457: 2,\n            536870913: 8421888,\n            805306369: 8388608,\n            1073741825: 8421378,\n            1342177281: 33280,\n            1610612737: 512,\n            1879048193: 8389122,\n            2147483649: 8421890,\n            2415919105: 8421376,\n            2684354561: 8388610,\n            2952790017: 33282,\n            3221225473: 514,\n            3489660929: 8389120,\n            3758096385: 32770,\n            4026531841: 0,\n            134217729: 8421890,\n            402653185: 8421376,\n            671088641: 8388608,\n            939524097: 512,\n            1207959553: 32768,\n            1476395009: 8388610,\n            1744830465: 2,\n            2013265921: 33282,\n            2281701377: 32770,\n            2550136833: 8389122,\n            2818572289: 514,\n            3087007745: 8421888,\n            3355443201: 8389120,\n            3623878657: 0,\n            3892314113: 33280,\n            4160749569: 8421378\n        },\n        {\n            0: 1074282512,\n            16777216: 16384,\n            33554432: 524288,\n            50331648: 1074266128,\n            67108864: 1073741840,\n            83886080: 1074282496,\n            100663296: 1073758208,\n            117440512: 16,\n            134217728: 540672,\n            150994944: 1073758224,\n            167772160: 1073741824,\n            184549376: 540688,\n            201326592: 524304,\n            218103808: 0,\n            234881024: 16400,\n            251658240: 1074266112,\n            8388608: 1073758208,\n            25165824: 540688,\n            41943040: 16,\n            58720256: 1073758224,\n            75497472: 1074282512,\n            92274688: 1073741824,\n            109051904: 524288,\n            125829120: 1074266128,\n            142606336: 524304,\n            159383552: 0,\n            176160768: 16384,\n            192937984: 1074266112,\n            209715200: 1073741840,\n            226492416: 540672,\n            243269632: 1074282496,\n            260046848: 16400,\n            268435456: 0,\n            285212672: 1074266128,\n            301989888: 1073758224,\n            318767104: 1074282496,\n            335544320: 1074266112,\n            352321536: 16,\n            369098752: 540688,\n            385875968: 16384,\n            402653184: 16400,\n            419430400: 524288,\n            436207616: 524304,\n            452984832: 1073741840,\n            469762048: 540672,\n            486539264: 1073758208,\n            503316480: 1073741824,\n            520093696: 1074282512,\n            276824064: 540688,\n            293601280: 524288,\n            310378496: 1074266112,\n            327155712: 16384,\n            343932928: 1073758208,\n            360710144: 1074282512,\n            377487360: 16,\n            394264576: 1073741824,\n            411041792: 1074282496,\n            427819008: 1073741840,\n            444596224: 1073758224,\n            461373440: 524304,\n            478150656: 0,\n            494927872: 16400,\n            511705088: 1074266128,\n            528482304: 540672\n        },\n        {\n            0: 260,\n            1048576: 0,\n            2097152: 67109120,\n            3145728: 65796,\n            4194304: 65540,\n            5242880: 67108868,\n            6291456: 67174660,\n            7340032: 67174400,\n            8388608: 67108864,\n            9437184: 67174656,\n            10485760: 65792,\n            11534336: 67174404,\n            12582912: 67109124,\n            13631488: 65536,\n            14680064: 4,\n            15728640: 256,\n            524288: 67174656,\n            1572864: 67174404,\n            2621440: 0,\n            3670016: 67109120,\n            4718592: 67108868,\n            5767168: 65536,\n            6815744: 65540,\n            7864320: 260,\n            8912896: 4,\n            9961472: 256,\n            11010048: 67174400,\n            12058624: 65796,\n            13107200: 65792,\n            14155776: 67109124,\n            15204352: 67174660,\n            16252928: 67108864,\n            16777216: 67174656,\n            17825792: 65540,\n            18874368: 65536,\n            19922944: 67109120,\n            20971520: 256,\n            22020096: 67174660,\n            23068672: 67108868,\n            24117248: 0,\n            25165824: 67109124,\n            26214400: 67108864,\n            27262976: 4,\n            28311552: 65792,\n            29360128: 67174400,\n            30408704: 260,\n            31457280: 65796,\n            32505856: 67174404,\n            17301504: 67108864,\n            18350080: 260,\n            19398656: 67174656,\n            20447232: 0,\n            21495808: 65540,\n            22544384: 67109120,\n            23592960: 256,\n            24641536: 67174404,\n            25690112: 65536,\n            26738688: 67174660,\n            27787264: 65796,\n            28835840: 67108868,\n            29884416: 67109124,\n            30932992: 67174400,\n            31981568: 4,\n            33030144: 65792\n        },\n        {\n            0: 2151682048,\n            65536: 2147487808,\n            131072: 4198464,\n            196608: 2151677952,\n            262144: 0,\n            327680: 4198400,\n            393216: 2147483712,\n            458752: 4194368,\n            524288: 2147483648,\n            589824: 4194304,\n            655360: 64,\n            720896: 2147487744,\n            786432: 2151678016,\n            851968: 4160,\n            917504: 4096,\n            983040: 2151682112,\n            32768: 2147487808,\n            98304: 64,\n            163840: 2151678016,\n            229376: 2147487744,\n            294912: 4198400,\n            360448: 2151682112,\n            425984: 0,\n            491520: 2151677952,\n            557056: 4096,\n            622592: 2151682048,\n            688128: 4194304,\n            753664: 4160,\n            819200: 2147483648,\n            884736: 4194368,\n            950272: 4198464,\n            1015808: 2147483712,\n            1048576: 4194368,\n            1114112: 4198400,\n            1179648: 2147483712,\n            1245184: 0,\n            1310720: 4160,\n            1376256: 2151678016,\n            1441792: 2151682048,\n            1507328: 2147487808,\n            1572864: 2151682112,\n            1638400: 2147483648,\n            1703936: 2151677952,\n            1769472: 4198464,\n            1835008: 2147487744,\n            1900544: 4194304,\n            1966080: 64,\n            2031616: 4096,\n            1081344: 2151677952,\n            1146880: 2151682112,\n            1212416: 0,\n            1277952: 4198400,\n            1343488: 4194368,\n            1409024: 2147483648,\n            1474560: 2147487808,\n            1540096: 64,\n            1605632: 2147483712,\n            1671168: 4096,\n            1736704: 2147487744,\n            1802240: 2151678016,\n            1867776: 4160,\n            1933312: 2151682048,\n            1998848: 4194304,\n            2064384: 4198464\n        },\n        {\n            0: 128,\n            4096: 17039360,\n            8192: 262144,\n            12288: 536870912,\n            16384: 537133184,\n            20480: 16777344,\n            24576: 553648256,\n            28672: 262272,\n            32768: 16777216,\n            36864: 537133056,\n            40960: 536871040,\n            45056: 553910400,\n            49152: 553910272,\n            53248: 0,\n            57344: 17039488,\n            61440: 553648128,\n            2048: 17039488,\n            6144: 553648256,\n            10240: 128,\n            14336: 17039360,\n            18432: 262144,\n            22528: 537133184,\n            26624: 553910272,\n            30720: 536870912,\n            34816: 537133056,\n            38912: 0,\n            43008: 553910400,\n            47104: 16777344,\n            51200: 536871040,\n            55296: 553648128,\n            59392: 16777216,\n            63488: 262272,\n            65536: 262144,\n            69632: 128,\n            73728: 536870912,\n            77824: 553648256,\n            81920: 16777344,\n            86016: 553910272,\n            90112: 537133184,\n            94208: 16777216,\n            98304: 553910400,\n            102400: 553648128,\n            106496: 17039360,\n            110592: 537133056,\n            114688: 262272,\n            118784: 536871040,\n            122880: 0,\n            126976: 17039488,\n            67584: 553648256,\n            71680: 16777216,\n            75776: 17039360,\n            79872: 537133184,\n            83968: 536870912,\n            88064: 17039488,\n            92160: 128,\n            96256: 553910272,\n            100352: 262272,\n            104448: 553910400,\n            108544: 0,\n            112640: 553648128,\n            116736: 16777344,\n            120832: 262144,\n            124928: 537133056,\n            129024: 536871040\n        },\n        {\n            0: 268435464,\n            256: 8192,\n            512: 270532608,\n            768: 270540808,\n            1024: 268443648,\n            1280: 2097152,\n            1536: 2097160,\n            1792: 268435456,\n            2048: 0,\n            2304: 268443656,\n            2560: 2105344,\n            2816: 8,\n            3072: 270532616,\n            3328: 2105352,\n            3584: 8200,\n            3840: 270540800,\n            128: 270532608,\n            384: 270540808,\n            640: 8,\n            896: 2097152,\n            1152: 2105352,\n            1408: 268435464,\n            1664: 268443648,\n            1920: 8200,\n            2176: 2097160,\n            2432: 8192,\n            2688: 268443656,\n            2944: 270532616,\n            3200: 0,\n            3456: 270540800,\n            3712: 2105344,\n            3968: 268435456,\n            4096: 268443648,\n            4352: 270532616,\n            4608: 270540808,\n            4864: 8200,\n            5120: 2097152,\n            5376: 268435456,\n            5632: 268435464,\n            5888: 2105344,\n            6144: 2105352,\n            6400: 0,\n            6656: 8,\n            6912: 270532608,\n            7168: 8192,\n            7424: 268443656,\n            7680: 270540800,\n            7936: 2097160,\n            4224: 8,\n            4480: 2105344,\n            4736: 2097152,\n            4992: 268435464,\n            5248: 268443648,\n            5504: 8200,\n            5760: 270540808,\n            6016: 270532608,\n            6272: 270540800,\n            6528: 270532616,\n            6784: 8192,\n            7040: 2105352,\n            7296: 2097160,\n            7552: 0,\n            7808: 268435456,\n            8064: 268443656\n        },\n        {\n            0: 1048576,\n            16: 33555457,\n            32: 1024,\n            48: 1049601,\n            64: 34604033,\n            80: 0,\n            96: 1,\n            112: 34603009,\n            128: 33555456,\n            144: 1048577,\n            160: 33554433,\n            176: 34604032,\n            192: 34603008,\n            208: 1025,\n            224: 1049600,\n            240: 33554432,\n            8: 34603009,\n            24: 0,\n            40: 33555457,\n            56: 34604032,\n            72: 1048576,\n            88: 33554433,\n            104: 33554432,\n            120: 1025,\n            136: 1049601,\n            152: 33555456,\n            168: 34603008,\n            184: 1048577,\n            200: 1024,\n            216: 34604033,\n            232: 1,\n            248: 1049600,\n            256: 33554432,\n            272: 1048576,\n            288: 33555457,\n            304: 34603009,\n            320: 1048577,\n            336: 33555456,\n            352: 34604032,\n            368: 1049601,\n            384: 1025,\n            400: 34604033,\n            416: 1049600,\n            432: 1,\n            448: 0,\n            464: 34603008,\n            480: 33554433,\n            496: 1024,\n            264: 1049600,\n            280: 33555457,\n            296: 34603009,\n            312: 1,\n            328: 33554432,\n            344: 1048576,\n            360: 1025,\n            376: 34604032,\n            392: 33554433,\n            408: 34603008,\n            424: 0,\n            440: 34604033,\n            456: 1049601,\n            472: 1024,\n            488: 33555456,\n            504: 1048577\n        },\n        {\n            0: 134219808,\n            1: 131072,\n            2: 134217728,\n            3: 32,\n            4: 131104,\n            5: 134350880,\n            6: 134350848,\n            7: 2048,\n            8: 134348800,\n            9: 134219776,\n            10: 133120,\n            11: 134348832,\n            12: 2080,\n            13: 0,\n            14: 134217760,\n            15: 133152,\n            2147483648: 2048,\n            2147483649: 134350880,\n            2147483650: 134219808,\n            2147483651: 134217728,\n            2147483652: 134348800,\n            2147483653: 133120,\n            2147483654: 133152,\n            2147483655: 32,\n            2147483656: 134217760,\n            2147483657: 2080,\n            2147483658: 131104,\n            2147483659: 134350848,\n            2147483660: 0,\n            2147483661: 134348832,\n            2147483662: 134219776,\n            2147483663: 131072,\n            16: 133152,\n            17: 134350848,\n            18: 32,\n            19: 2048,\n            20: 134219776,\n            21: 134217760,\n            22: 134348832,\n            23: 131072,\n            24: 0,\n            25: 131104,\n            26: 134348800,\n            27: 134219808,\n            28: 134350880,\n            29: 133120,\n            30: 2080,\n            31: 134217728,\n            2147483664: 131072,\n            2147483665: 2048,\n            2147483666: 134348832,\n            2147483667: 133152,\n            2147483668: 32,\n            2147483669: 134348800,\n            2147483670: 134217728,\n            2147483671: 134219808,\n            2147483672: 134350880,\n            2147483673: 134217760,\n            2147483674: 134219776,\n            2147483675: 0,\n            2147483676: 133120,\n            2147483677: 2080,\n            2147483678: 131104,\n            2147483679: 134350848\n        }\n    ], y = [\n        4160749569,\n        528482304,\n        33030144,\n        2064384,\n        129024,\n        8064,\n        504,\n        2147483679\n    ], v = n.DES = s.extend({\n        _doReset: function() {\n            for(var o = this._key.words, l = [], f = 0; 56 > f; f++){\n                var d = h[f] - 1;\n                l[f] = o[d >>> 5] >>> 31 - d % 32 & 1;\n            }\n            for(o = this._subKeys = [], d = 0; 16 > d; d++){\n                for(var g = o[d] = [], S = p[d], f = 0; 24 > f; f++)g[f / 6 | 0] |= l[(u[f] - 1 + S) % 28] << 31 - f % 6, g[4 + (f / 6 | 0)] |= l[28 + (u[f + 24] - 1 + S) % 28] << 31 - f % 6;\n                for(g[0] = g[0] << 1 | g[0] >>> 31, f = 1; 7 > f; f++)g[f] >>>= 4 * (f - 1) + 3;\n                g[7] = g[7] << 5 | g[7] >>> 27;\n            }\n            for(l = this._invSubKeys = [], f = 0; 16 > f; f++)l[f] = o[15 - f];\n        },\n        encryptBlock: function(o, l) {\n            this._doCryptBlock(o, l, this._subKeys);\n        },\n        decryptBlock: function(o, l) {\n            this._doCryptBlock(o, l, this._invSubKeys);\n        },\n        _doCryptBlock: function(o, l, f) {\n            this._lBlock = o[l], this._rBlock = o[l + 1], e.call(this, 4, 252645135), e.call(this, 16, 65535), t.call(this, 2, 858993459), t.call(this, 8, 16711935), e.call(this, 1, 1431655765);\n            for(var d = 0; 16 > d; d++){\n                for(var g = f[d], S = this._lBlock, b = this._rBlock, D = 0, A = 0; 8 > A; A++)D |= c[A][((b ^ g[A]) & y[A]) >>> 0];\n                this._lBlock = b, this._rBlock = S ^ D;\n            }\n            f = this._lBlock, this._lBlock = this._rBlock, this._rBlock = f, e.call(this, 1, 1431655765), t.call(this, 8, 16711935), t.call(this, 2, 858993459), e.call(this, 16, 65535), e.call(this, 4, 252645135), o[l] = this._lBlock, o[l + 1] = this._rBlock;\n        },\n        keySize: 2,\n        ivSize: 2,\n        blockSize: 2\n    });\n    r.DES = s._createHelper(v), n = n.TripleDES = s.extend({\n        _doReset: function() {\n            var o = this._key.words;\n            this._des1 = v.createEncryptor(i.create(o.slice(0, 2))), this._des2 = v.createEncryptor(i.create(o.slice(2, 4))), this._des3 = v.createEncryptor(i.create(o.slice(4, 6)));\n        },\n        encryptBlock: function(o, l) {\n            this._des1.encryptBlock(o, l), this._des2.decryptBlock(o, l), this._des3.encryptBlock(o, l);\n        },\n        decryptBlock: function(o, l) {\n            this._des3.decryptBlock(o, l), this._des2.encryptBlock(o, l), this._des1.decryptBlock(o, l);\n        },\n        keySize: 6,\n        ivSize: 2,\n        blockSize: 2\n    }), r.TripleDES = s._createHelper(n);\n})();\n(function() {\n    var e = K, t = e.lib.WordArray;\n    e.enc.Base64 = {\n        stringify: function(r) {\n            var i = r.words, s = r.sigBytes, n = this._map;\n            r.clamp(), r = [];\n            for(var h = 0; h < s; h += 3)for(var u = (i[h >>> 2] >>> 24 - 8 * (h % 4) & 255) << 16 | (i[h + 1 >>> 2] >>> 24 - 8 * ((h + 1) % 4) & 255) << 8 | i[h + 2 >>> 2] >>> 24 - 8 * ((h + 2) % 4) & 255, p = 0; 4 > p && h + 0.75 * p < s; p++)r.push(n.charAt(u >>> 6 * (3 - p) & 63));\n            if (i = n.charAt(64)) for(; r.length % 4;)r.push(i);\n            return r.join(\"\");\n        },\n        parse: function(r) {\n            var i = r.length, s = this._map, n = s.charAt(64);\n            n && (n = r.indexOf(n), n != -1 && (i = n));\n            for(var n = [], h = 0, u = 0; u < i; u++)if (u % 4) {\n                var p = s.indexOf(r.charAt(u - 1)) << 2 * (u % 4), c = s.indexOf(r.charAt(u)) >>> 6 - 2 * (u % 4);\n                n[h >>> 2] |= (p | c) << 24 - 8 * (h % 4), h++;\n            }\n            return t.create(n, h);\n        },\n        _map: \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\"\n    };\n})();\n(function(e) {\n    function t(v, o, l, f, d, g, S) {\n        return v = v + (o & l | ~o & f) + d + S, (v << g | v >>> 32 - g) + o;\n    }\n    function r(v, o, l, f, d, g, S) {\n        return v = v + (o & f | l & ~f) + d + S, (v << g | v >>> 32 - g) + o;\n    }\n    function i(v, o, l, f, d, g, S) {\n        return v = v + (o ^ l ^ f) + d + S, (v << g | v >>> 32 - g) + o;\n    }\n    function s(v, o, l, f, d, g, S) {\n        return v = v + (l ^ (o | ~f)) + d + S, (v << g | v >>> 32 - g) + o;\n    }\n    for(var n = K, p = n.lib, h = p.WordArray, u = p.Hasher, p = n.algo, c = [], y = 0; 64 > y; y++)c[y] = 4294967296 * e.abs(e.sin(y + 1)) | 0;\n    p = p.MD5 = u.extend({\n        _doReset: function() {\n            this._hash = new h.init([\n                1732584193,\n                4023233417,\n                2562383102,\n                271733878\n            ]);\n        },\n        _doProcessBlock: function(v, o) {\n            for(var l = 0; 16 > l; l++){\n                var f = o + l, d = v[f];\n                v[f] = (d << 8 | d >>> 24) & 16711935 | (d << 24 | d >>> 8) & 4278255360;\n            }\n            var l = this._hash.words, f = v[o + 0], d = v[o + 1], g = v[o + 2], S = v[o + 3], b = v[o + 4], D = v[o + 5], A = v[o + 6], I = v[o + 7], m = v[o + 8], E = v[o + 9], w = v[o + 10], x = v[o + 11], F = v[o + 12], P = v[o + 13], T = v[o + 14], H = v[o + 15], C = l[0], j = l[1], O = l[2], B = l[3], C = t(C, j, O, B, f, 7, c[0]), B = t(B, C, j, O, d, 12, c[1]), O = t(O, B, C, j, g, 17, c[2]), j = t(j, O, B, C, S, 22, c[3]), C = t(C, j, O, B, b, 7, c[4]), B = t(B, C, j, O, D, 12, c[5]), O = t(O, B, C, j, A, 17, c[6]), j = t(j, O, B, C, I, 22, c[7]), C = t(C, j, O, B, m, 7, c[8]), B = t(B, C, j, O, E, 12, c[9]), O = t(O, B, C, j, w, 17, c[10]), j = t(j, O, B, C, x, 22, c[11]), C = t(C, j, O, B, F, 7, c[12]), B = t(B, C, j, O, P, 12, c[13]), O = t(O, B, C, j, T, 17, c[14]), j = t(j, O, B, C, H, 22, c[15]), C = r(C, j, O, B, d, 5, c[16]), B = r(B, C, j, O, A, 9, c[17]), O = r(O, B, C, j, x, 14, c[18]), j = r(j, O, B, C, f, 20, c[19]), C = r(C, j, O, B, D, 5, c[20]), B = r(B, C, j, O, w, 9, c[21]), O = r(O, B, C, j, H, 14, c[22]), j = r(j, O, B, C, b, 20, c[23]), C = r(C, j, O, B, E, 5, c[24]), B = r(B, C, j, O, T, 9, c[25]), O = r(O, B, C, j, S, 14, c[26]), j = r(j, O, B, C, m, 20, c[27]), C = r(C, j, O, B, P, 5, c[28]), B = r(B, C, j, O, g, 9, c[29]), O = r(O, B, C, j, I, 14, c[30]), j = r(j, O, B, C, F, 20, c[31]), C = i(C, j, O, B, D, 4, c[32]), B = i(B, C, j, O, m, 11, c[33]), O = i(O, B, C, j, x, 16, c[34]), j = i(j, O, B, C, T, 23, c[35]), C = i(C, j, O, B, d, 4, c[36]), B = i(B, C, j, O, b, 11, c[37]), O = i(O, B, C, j, I, 16, c[38]), j = i(j, O, B, C, w, 23, c[39]), C = i(C, j, O, B, P, 4, c[40]), B = i(B, C, j, O, f, 11, c[41]), O = i(O, B, C, j, S, 16, c[42]), j = i(j, O, B, C, A, 23, c[43]), C = i(C, j, O, B, E, 4, c[44]), B = i(B, C, j, O, F, 11, c[45]), O = i(O, B, C, j, H, 16, c[46]), j = i(j, O, B, C, g, 23, c[47]), C = s(C, j, O, B, f, 6, c[48]), B = s(B, C, j, O, I, 10, c[49]), O = s(O, B, C, j, T, 15, c[50]), j = s(j, O, B, C, D, 21, c[51]), C = s(C, j, O, B, F, 6, c[52]), B = s(B, C, j, O, S, 10, c[53]), O = s(O, B, C, j, w, 15, c[54]), j = s(j, O, B, C, d, 21, c[55]), C = s(C, j, O, B, m, 6, c[56]), B = s(B, C, j, O, H, 10, c[57]), O = s(O, B, C, j, A, 15, c[58]), j = s(j, O, B, C, P, 21, c[59]), C = s(C, j, O, B, b, 6, c[60]), B = s(B, C, j, O, x, 10, c[61]), O = s(O, B, C, j, g, 15, c[62]), j = s(j, O, B, C, E, 21, c[63]);\n            l[0] = l[0] + C | 0, l[1] = l[1] + j | 0, l[2] = l[2] + O | 0, l[3] = l[3] + B | 0;\n        },\n        _doFinalize: function() {\n            var v = this._data, o = v.words, l = 8 * this._nDataBytes, f = 8 * v.sigBytes;\n            o[f >>> 5] |= 128 << 24 - f % 32;\n            var d = e.floor(l / 4294967296);\n            for(o[(f + 64 >>> 9 << 4) + 15] = (d << 8 | d >>> 24) & 16711935 | (d << 24 | d >>> 8) & 4278255360, o[(f + 64 >>> 9 << 4) + 14] = (l << 8 | l >>> 24) & 16711935 | (l << 24 | l >>> 8) & 4278255360, v.sigBytes = 4 * (o.length + 1), this._process(), v = this._hash, o = v.words, l = 0; 4 > l; l++)f = o[l], o[l] = (f << 8 | f >>> 24) & 16711935 | (f << 24 | f >>> 8) & 4278255360;\n            return v;\n        },\n        clone: function() {\n            var v = u.clone.call(this);\n            return v._hash = this._hash.clone(), v;\n        }\n    }), n.MD5 = u._createHelper(p), n.HmacMD5 = u._createHmacHelper(p);\n})(Math);\n(function() {\n    var e = K, s = e.lib, t = s.WordArray, r = s.Hasher, i = [], s = e.algo.SHA1 = r.extend({\n        _doReset: function() {\n            this._hash = new t.init([\n                1732584193,\n                4023233417,\n                2562383102,\n                271733878,\n                3285377520\n            ]);\n        },\n        _doProcessBlock: function(n, h) {\n            for(var u = this._hash.words, p = u[0], c = u[1], y = u[2], v = u[3], o = u[4], l = 0; 80 > l; l++){\n                if (16 > l) i[l] = n[h + l] | 0;\n                else {\n                    var f = i[l - 3] ^ i[l - 8] ^ i[l - 14] ^ i[l - 16];\n                    i[l] = f << 1 | f >>> 31;\n                }\n                f = (p << 5 | p >>> 27) + o + i[l], f = 20 > l ? f + ((c & y | ~c & v) + 1518500249) : 40 > l ? f + ((c ^ y ^ v) + 1859775393) : 60 > l ? f + ((c & y | c & v | y & v) - 1894007588) : f + ((c ^ y ^ v) - 899497514), o = v, v = y, y = c << 30 | c >>> 2, c = p, p = f;\n            }\n            u[0] = u[0] + p | 0, u[1] = u[1] + c | 0, u[2] = u[2] + y | 0, u[3] = u[3] + v | 0, u[4] = u[4] + o | 0;\n        },\n        _doFinalize: function() {\n            var n = this._data, h = n.words, u = 8 * this._nDataBytes, p = 8 * n.sigBytes;\n            return h[p >>> 5] |= 128 << 24 - p % 32, h[(p + 64 >>> 9 << 4) + 14] = Math.floor(u / 4294967296), h[(p + 64 >>> 9 << 4) + 15] = u, n.sigBytes = 4 * h.length, this._process(), this._hash;\n        },\n        clone: function() {\n            var n = r.clone.call(this);\n            return n._hash = this._hash.clone(), n;\n        }\n    });\n    e.SHA1 = r._createHelper(s), e.HmacSHA1 = r._createHmacHelper(s);\n})();\n(function(e) {\n    for(var t = K, l = t.lib, r = l.WordArray, i = l.Hasher, l = t.algo, s = [], n = [], h = function(d) {\n        return 4294967296 * (d - (d | 0)) | 0;\n    }, u = 2, p = 0; 64 > p;){\n        var c;\n        e: {\n            c = u;\n            for(var y = e.sqrt(c), v = 2; v <= y; v++)if (!(c % v)) {\n                c = !1;\n                break e;\n            }\n            c = !0;\n        }\n        c && (8 > p && (s[p] = h(e.pow(u, 0.5))), n[p] = h(e.pow(u, 1 / 3)), p++), u++;\n    }\n    var o = [], l = l.SHA256 = i.extend({\n        _doReset: function() {\n            this._hash = new r.init(s.slice(0));\n        },\n        _doProcessBlock: function(f, d) {\n            for(var g = this._hash.words, S = g[0], b = g[1], D = g[2], A = g[3], I = g[4], m = g[5], E = g[6], w = g[7], x = 0; 64 > x; x++){\n                if (16 > x) o[x] = f[d + x] | 0;\n                else {\n                    var F = o[x - 15], P = o[x - 2];\n                    o[x] = ((F << 25 | F >>> 7) ^ (F << 14 | F >>> 18) ^ F >>> 3) + o[x - 7] + ((P << 15 | P >>> 17) ^ (P << 13 | P >>> 19) ^ P >>> 10) + o[x - 16];\n                }\n                F = w + ((I << 26 | I >>> 6) ^ (I << 21 | I >>> 11) ^ (I << 7 | I >>> 25)) + (I & m ^ ~I & E) + n[x] + o[x], P = ((S << 30 | S >>> 2) ^ (S << 19 | S >>> 13) ^ (S << 10 | S >>> 22)) + (S & b ^ S & D ^ b & D), w = E, E = m, m = I, I = A + F | 0, A = D, D = b, b = S, S = F + P | 0;\n            }\n            g[0] = g[0] + S | 0, g[1] = g[1] + b | 0, g[2] = g[2] + D | 0, g[3] = g[3] + A | 0, g[4] = g[4] + I | 0, g[5] = g[5] + m | 0, g[6] = g[6] + E | 0, g[7] = g[7] + w | 0;\n        },\n        _doFinalize: function() {\n            var f = this._data, d = f.words, g = 8 * this._nDataBytes, S = 8 * f.sigBytes;\n            return d[S >>> 5] |= 128 << 24 - S % 32, d[(S + 64 >>> 9 << 4) + 14] = e.floor(g / 4294967296), d[(S + 64 >>> 9 << 4) + 15] = g, f.sigBytes = 4 * d.length, this._process(), this._hash;\n        },\n        clone: function() {\n            var f = i.clone.call(this);\n            return f._hash = this._hash.clone(), f;\n        }\n    });\n    t.SHA256 = i._createHelper(l), t.HmacSHA256 = i._createHmacHelper(l);\n})(Math);\n(function() {\n    var e = K, t = e.lib.WordArray, i = e.algo, r = i.SHA256, i = i.SHA224 = r.extend({\n        _doReset: function() {\n            this._hash = new t.init([\n                3238371032,\n                914150663,\n                812702999,\n                4144912697,\n                4290775857,\n                1750603025,\n                1694076839,\n                3204075428\n            ]);\n        },\n        _doFinalize: function() {\n            var s = r._doFinalize.call(this);\n            return s.sigBytes -= 4, s;\n        }\n    });\n    e.SHA224 = r._createHelper(i), e.HmacSHA224 = r._createHmacHelper(i);\n})();\n(function() {\n    function e() {\n        return i.create.apply(i, arguments);\n    }\n    for(var t = K, r = t.lib.Hasher, n = t.x64, i = n.Word, s = n.WordArray, n = t.algo, h = [\n        e(1116352408, 3609767458),\n        e(1899447441, 602891725),\n        e(3049323471, 3964484399),\n        e(3921009573, 2173295548),\n        e(961987163, 4081628472),\n        e(1508970993, 3053834265),\n        e(2453635748, 2937671579),\n        e(2870763221, 3664609560),\n        e(3624381080, 2734883394),\n        e(310598401, 1164996542),\n        e(607225278, 1323610764),\n        e(1426881987, 3590304994),\n        e(1925078388, 4068182383),\n        e(2162078206, 991336113),\n        e(2614888103, 633803317),\n        e(3248222580, 3479774868),\n        e(3835390401, 2666613458),\n        e(4022224774, 944711139),\n        e(264347078, 2341262773),\n        e(604807628, 2007800933),\n        e(770255983, 1495990901),\n        e(1249150122, 1856431235),\n        e(1555081692, 3175218132),\n        e(1996064986, 2198950837),\n        e(2554220882, 3999719339),\n        e(2821834349, 766784016),\n        e(2952996808, 2566594879),\n        e(3210313671, 3203337956),\n        e(3336571891, 1034457026),\n        e(3584528711, 2466948901),\n        e(113926993, 3758326383),\n        e(338241895, 168717936),\n        e(666307205, 1188179964),\n        e(773529912, 1546045734),\n        e(1294757372, 1522805485),\n        e(1396182291, 2643833823),\n        e(1695183700, 2343527390),\n        e(1986661051, 1014477480),\n        e(2177026350, 1206759142),\n        e(2456956037, 344077627),\n        e(2730485921, 1290863460),\n        e(2820302411, 3158454273),\n        e(3259730800, 3505952657),\n        e(3345764771, 106217008),\n        e(3516065817, 3606008344),\n        e(3600352804, 1432725776),\n        e(4094571909, 1467031594),\n        e(275423344, 851169720),\n        e(430227734, 3100823752),\n        e(506948616, 1363258195),\n        e(659060556, 3750685593),\n        e(883997877, 3785050280),\n        e(958139571, 3318307427),\n        e(1322822218, 3812723403),\n        e(1537002063, 2003034995),\n        e(1747873779, 3602036899),\n        e(1955562222, 1575990012),\n        e(2024104815, 1125592928),\n        e(2227730452, 2716904306),\n        e(2361852424, 442776044),\n        e(2428436474, 593698344),\n        e(2756734187, 3733110249),\n        e(3204031479, 2999351573),\n        e(3329325298, 3815920427),\n        e(3391569614, 3928383900),\n        e(3515267271, 566280711),\n        e(3940187606, 3454069534),\n        e(4118630271, 4000239992),\n        e(116418474, 1914138554),\n        e(174292421, 2731055270),\n        e(289380356, 3203993006),\n        e(460393269, 320620315),\n        e(685471733, 587496836),\n        e(852142971, 1086792851),\n        e(1017036298, 365543100),\n        e(1126000580, 2618297676),\n        e(1288033470, 3409855158),\n        e(1501505948, 4234509866),\n        e(1607167915, 987167468),\n        e(1816402316, 1246189591)\n    ], u = [], p = 0; 80 > p; p++)u[p] = e();\n    n = n.SHA512 = r.extend({\n        _doReset: function() {\n            this._hash = new s.init([\n                new i.init(1779033703, 4089235720),\n                new i.init(3144134277, 2227873595),\n                new i.init(1013904242, 4271175723),\n                new i.init(2773480762, 1595750129),\n                new i.init(1359893119, 2917565137),\n                new i.init(2600822924, 725511199),\n                new i.init(528734635, 4215389547),\n                new i.init(1541459225, 327033209)\n            ]);\n        },\n        _doProcessBlock: function(c, y) {\n            for(var b = this._hash.words, v = b[0], o = b[1], l = b[2], f = b[3], d = b[4], g = b[5], S = b[6], b = b[7], D = v.high, A = v.low, I = o.high, m = o.low, E = l.high, w = l.low, x = f.high, F = f.low, P = d.high, T = d.low, H = g.high, C = g.low, B = S.high, O = S.low, j = b.high, fe = b.low, Z = D, X = A, re = I, ne = m, he = E, se = w, ke = x, ce = F, M = P, G = T, Q = H, ee = C, pe = B, te = O, Me = j, Ne = fe, xe = 0; 80 > xe; xe++){\n                var Ce = u[xe];\n                if (16 > xe) var ye = Ce.high = c[y + 2 * xe] | 0, U = Ce.low = c[y + 2 * xe + 1] | 0;\n                else {\n                    var ye = u[xe - 15], U = ye.high, Fe = ye.low, ye = (U >>> 1 | Fe << 31) ^ (U >>> 8 | Fe << 24) ^ U >>> 7, Fe = (Fe >>> 1 | U << 31) ^ (Fe >>> 8 | U << 24) ^ (Fe >>> 7 | U << 25), He = u[xe - 2], U = He.high, $ = He.low, He = (U >>> 19 | $ << 13) ^ (U << 3 | $ >>> 29) ^ U >>> 6, $ = ($ >>> 19 | U << 13) ^ ($ << 3 | U >>> 29) ^ ($ >>> 6 | U << 26), U = u[xe - 7], Qe = U.high, Ie = u[xe - 16], be = Ie.high, Ie = Ie.low, U = Fe + U.low, ye = ye + Qe + (U >>> 0 < Fe >>> 0 ? 1 : 0), U = U + $, ye = ye + He + (U >>> 0 < $ >>> 0 ? 1 : 0), U = U + Ie, ye = ye + be + (U >>> 0 < Ie >>> 0 ? 1 : 0);\n                    Ce.high = ye, Ce.low = U;\n                }\n                var Qe = M & Q ^ ~M & pe, Ie = G & ee ^ ~G & te, Ce = Z & re ^ Z & he ^ re & he, Kt = X & ne ^ X & se ^ ne & se, Fe = (Z >>> 28 | X << 4) ^ (Z << 30 | X >>> 2) ^ (Z << 25 | X >>> 7), He = (X >>> 28 | Z << 4) ^ (X << 30 | Z >>> 2) ^ (X << 25 | Z >>> 7), $ = h[xe], Lt = $.high, ct = $.low, $ = Ne + ((G >>> 14 | M << 18) ^ (G >>> 18 | M << 14) ^ (G << 23 | M >>> 9)), be = Me + ((M >>> 14 | G << 18) ^ (M >>> 18 | G << 14) ^ (M << 23 | G >>> 9)) + ($ >>> 0 < Ne >>> 0 ? 1 : 0), $ = $ + Ie, be = be + Qe + ($ >>> 0 < Ie >>> 0 ? 1 : 0), $ = $ + ct, be = be + Lt + ($ >>> 0 < ct >>> 0 ? 1 : 0), $ = $ + U, be = be + ye + ($ >>> 0 < U >>> 0 ? 1 : 0), U = He + Kt, Ce = Fe + Ce + (U >>> 0 < He >>> 0 ? 1 : 0), Me = pe, Ne = te, pe = Q, te = ee, Q = M, ee = G, G = ce + $ | 0, M = ke + be + (G >>> 0 < ce >>> 0 ? 1 : 0) | 0, ke = he, ce = se, he = re, se = ne, re = Z, ne = X, X = $ + U | 0, Z = be + Ce + (X >>> 0 < $ >>> 0 ? 1 : 0) | 0;\n            }\n            A = v.low = A + X, v.high = D + Z + (A >>> 0 < X >>> 0 ? 1 : 0), m = o.low = m + ne, o.high = I + re + (m >>> 0 < ne >>> 0 ? 1 : 0), w = l.low = w + se, l.high = E + he + (w >>> 0 < se >>> 0 ? 1 : 0), F = f.low = F + ce, f.high = x + ke + (F >>> 0 < ce >>> 0 ? 1 : 0), T = d.low = T + G, d.high = P + M + (T >>> 0 < G >>> 0 ? 1 : 0), C = g.low = C + ee, g.high = H + Q + (C >>> 0 < ee >>> 0 ? 1 : 0), O = S.low = O + te, S.high = B + pe + (O >>> 0 < te >>> 0 ? 1 : 0), fe = b.low = fe + Ne, b.high = j + Me + (fe >>> 0 < Ne >>> 0 ? 1 : 0);\n        },\n        _doFinalize: function() {\n            var c = this._data, y = c.words, v = 8 * this._nDataBytes, o = 8 * c.sigBytes;\n            return y[o >>> 5] |= 128 << 24 - o % 32, y[(o + 128 >>> 10 << 5) + 30] = Math.floor(v / 4294967296), y[(o + 128 >>> 10 << 5) + 31] = v, c.sigBytes = 4 * y.length, this._process(), this._hash.toX32();\n        },\n        clone: function() {\n            var c = r.clone.call(this);\n            return c._hash = this._hash.clone(), c;\n        },\n        blockSize: 32\n    }), t.SHA512 = r._createHelper(n), t.HmacSHA512 = r._createHmacHelper(n);\n})();\n(function() {\n    var e = K, s = e.x64, t = s.Word, r = s.WordArray, s = e.algo, i = s.SHA512, s = s.SHA384 = i.extend({\n        _doReset: function() {\n            this._hash = new r.init([\n                new t.init(3418070365, 3238371032),\n                new t.init(1654270250, 914150663),\n                new t.init(2438529370, 812702999),\n                new t.init(355462360, 4144912697),\n                new t.init(1731405415, 4290775857),\n                new t.init(2394180231, 1750603025),\n                new t.init(3675008525, 1694076839),\n                new t.init(1203062813, 3204075428)\n            ]);\n        },\n        _doFinalize: function() {\n            var n = i._doFinalize.call(this);\n            return n.sigBytes -= 16, n;\n        }\n    });\n    e.SHA384 = i._createHelper(s), e.HmacSHA384 = i._createHmacHelper(s);\n})();\n(function() {\n    var e = K, c = e.lib, t = c.WordArray, r = c.Hasher, c = e.algo, i = t.create([\n        0,\n        1,\n        2,\n        3,\n        4,\n        5,\n        6,\n        7,\n        8,\n        9,\n        10,\n        11,\n        12,\n        13,\n        14,\n        15,\n        7,\n        4,\n        13,\n        1,\n        10,\n        6,\n        15,\n        3,\n        12,\n        0,\n        9,\n        5,\n        2,\n        14,\n        11,\n        8,\n        3,\n        10,\n        14,\n        4,\n        9,\n        15,\n        8,\n        1,\n        2,\n        7,\n        0,\n        6,\n        13,\n        11,\n        5,\n        12,\n        1,\n        9,\n        11,\n        10,\n        0,\n        8,\n        12,\n        4,\n        13,\n        3,\n        7,\n        15,\n        14,\n        5,\n        6,\n        2,\n        4,\n        0,\n        5,\n        9,\n        7,\n        12,\n        2,\n        10,\n        14,\n        1,\n        3,\n        8,\n        11,\n        6,\n        15,\n        13\n    ]), s = t.create([\n        5,\n        14,\n        7,\n        0,\n        9,\n        2,\n        11,\n        4,\n        13,\n        6,\n        15,\n        8,\n        1,\n        10,\n        3,\n        12,\n        6,\n        11,\n        3,\n        7,\n        0,\n        13,\n        5,\n        10,\n        14,\n        15,\n        8,\n        12,\n        4,\n        9,\n        1,\n        2,\n        15,\n        5,\n        1,\n        3,\n        7,\n        14,\n        6,\n        9,\n        11,\n        8,\n        12,\n        2,\n        10,\n        0,\n        4,\n        13,\n        8,\n        6,\n        4,\n        1,\n        3,\n        11,\n        15,\n        0,\n        5,\n        12,\n        2,\n        13,\n        9,\n        7,\n        10,\n        14,\n        12,\n        15,\n        10,\n        4,\n        1,\n        5,\n        8,\n        7,\n        6,\n        2,\n        13,\n        14,\n        0,\n        3,\n        9,\n        11\n    ]), n = t.create([\n        11,\n        14,\n        15,\n        12,\n        5,\n        8,\n        7,\n        9,\n        11,\n        13,\n        14,\n        15,\n        6,\n        7,\n        9,\n        8,\n        7,\n        6,\n        8,\n        13,\n        11,\n        9,\n        7,\n        15,\n        7,\n        12,\n        15,\n        9,\n        11,\n        7,\n        13,\n        12,\n        11,\n        13,\n        6,\n        7,\n        14,\n        9,\n        13,\n        15,\n        14,\n        8,\n        13,\n        6,\n        5,\n        12,\n        7,\n        5,\n        11,\n        12,\n        14,\n        15,\n        14,\n        15,\n        9,\n        8,\n        9,\n        14,\n        5,\n        6,\n        8,\n        6,\n        5,\n        12,\n        9,\n        15,\n        5,\n        11,\n        6,\n        8,\n        13,\n        12,\n        5,\n        12,\n        13,\n        14,\n        11,\n        8,\n        5,\n        6\n    ]), h = t.create([\n        8,\n        9,\n        9,\n        11,\n        13,\n        15,\n        15,\n        5,\n        7,\n        7,\n        8,\n        11,\n        14,\n        14,\n        12,\n        6,\n        9,\n        13,\n        15,\n        7,\n        12,\n        8,\n        9,\n        11,\n        7,\n        7,\n        12,\n        7,\n        6,\n        15,\n        13,\n        11,\n        9,\n        7,\n        15,\n        11,\n        8,\n        6,\n        6,\n        14,\n        12,\n        13,\n        5,\n        14,\n        13,\n        13,\n        7,\n        5,\n        15,\n        5,\n        8,\n        11,\n        14,\n        14,\n        6,\n        14,\n        6,\n        9,\n        12,\n        9,\n        12,\n        5,\n        15,\n        8,\n        8,\n        5,\n        12,\n        9,\n        12,\n        5,\n        14,\n        6,\n        8,\n        13,\n        6,\n        5,\n        15,\n        13,\n        11,\n        11\n    ]), u = t.create([\n        0,\n        1518500249,\n        1859775393,\n        2400959708,\n        2840853838\n    ]), p = t.create([\n        1352829926,\n        1548603684,\n        1836072691,\n        2053994217,\n        0\n    ]), c = c.RIPEMD160 = r.extend({\n        _doReset: function() {\n            this._hash = t.create([\n                1732584193,\n                4023233417,\n                2562383102,\n                271733878,\n                3285377520\n            ]);\n        },\n        _doProcessBlock: function(y, v) {\n            for(var o = 0; 16 > o; o++){\n                var l = v + o, f = y[l];\n                y[l] = (f << 8 | f >>> 24) & 16711935 | (f << 24 | f >>> 8) & 4278255360;\n            }\n            var l = this._hash.words, f = u.words, d = p.words, g = i.words, S = s.words, b = n.words, D = h.words, A, I, m, E, w, x, F, P, T, H;\n            x = A = l[0], F = I = l[1], P = m = l[2], T = E = l[3], H = w = l[4];\n            for(var C, o = 0; 80 > o; o += 1)C = A + y[v + g[o]] | 0, C = 16 > o ? C + ((I ^ m ^ E) + f[0]) : 32 > o ? C + ((I & m | ~I & E) + f[1]) : 48 > o ? C + (((I | ~m) ^ E) + f[2]) : 64 > o ? C + ((I & E | m & ~E) + f[3]) : C + ((I ^ (m | ~E)) + f[4]), C |= 0, C = C << b[o] | C >>> 32 - b[o], C = C + w | 0, A = w, w = E, E = m << 10 | m >>> 22, m = I, I = C, C = x + y[v + S[o]] | 0, C = 16 > o ? C + ((F ^ (P | ~T)) + d[0]) : 32 > o ? C + ((F & T | P & ~T) + d[1]) : 48 > o ? C + (((F | ~P) ^ T) + d[2]) : 64 > o ? C + ((F & P | ~F & T) + d[3]) : C + ((F ^ P ^ T) + d[4]), C |= 0, C = C << D[o] | C >>> 32 - D[o], C = C + H | 0, x = H, H = T, T = P << 10 | P >>> 22, P = F, F = C;\n            C = l[1] + m + T | 0, l[1] = l[2] + E + H | 0, l[2] = l[3] + w + x | 0, l[3] = l[4] + A + F | 0, l[4] = l[0] + I + P | 0, l[0] = C;\n        },\n        _doFinalize: function() {\n            var y = this._data, v = y.words, o = 8 * this._nDataBytes, l = 8 * y.sigBytes;\n            for(v[l >>> 5] |= 128 << 24 - l % 32, v[(l + 64 >>> 9 << 4) + 14] = (o << 8 | o >>> 24) & 16711935 | (o << 24 | o >>> 8) & 4278255360, y.sigBytes = 4 * (v.length + 1), this._process(), y = this._hash, v = y.words, o = 0; 5 > o; o++)l = v[o], v[o] = (l << 8 | l >>> 24) & 16711935 | (l << 24 | l >>> 8) & 4278255360;\n            return y;\n        },\n        clone: function() {\n            var y = r.clone.call(this);\n            return y._hash = this._hash.clone(), y;\n        }\n    });\n    e.RIPEMD160 = r._createHelper(c), e.HmacRIPEMD160 = r._createHmacHelper(c);\n})();\n(function() {\n    var e = K, t = e.enc.Utf8;\n    e.algo.HMAC = e.lib.Base.extend({\n        init: function(r, i) {\n            r = this._hasher = new r.init(), typeof i == \"string\" && (i = t.parse(i));\n            var s = r.blockSize, n = 4 * s;\n            i.sigBytes > n && (i = r.finalize(i)), i.clamp();\n            for(var h = this._oKey = i.clone(), u = this._iKey = i.clone(), p = h.words, c = u.words, y = 0; y < s; y++)p[y] ^= 1549556828, c[y] ^= 909522486;\n            h.sigBytes = u.sigBytes = n, this.reset();\n        },\n        reset: function() {\n            var r = this._hasher;\n            r.reset(), r.update(this._iKey);\n        },\n        update: function(r) {\n            return this._hasher.update(r), this;\n        },\n        finalize: function(r) {\n            var i = this._hasher;\n            return r = i.finalize(r), i.reset(), i.finalize(this._oKey.clone().concat(r));\n        }\n    });\n})();\n(function() {\n    var e = K, i = e.lib, t = i.Base, r = i.WordArray, i = e.algo, s = i.HMAC, n = i.PBKDF2 = t.extend({\n        cfg: t.extend({\n            keySize: 4,\n            hasher: i.SHA1,\n            iterations: 1\n        }),\n        init: function(h) {\n            this.cfg = this.cfg.extend(h);\n        },\n        compute: function(h, u) {\n            for(var f = this.cfg, p = s.create(f.hasher, h), c = r.create(), y = r.create([\n                1\n            ]), v = c.words, o = y.words, l = f.keySize, f = f.iterations; v.length < l;){\n                var d = p.update(u).finalize(y);\n                p.reset();\n                for(var g = d.words, S = g.length, b = d, D = 1; D < f; D++){\n                    b = p.finalize(b), p.reset();\n                    for(var A = b.words, I = 0; I < S; I++)g[I] ^= A[I];\n                }\n                c.concat(d), o[0]++;\n            }\n            return c.sigBytes = 4 * l, c;\n        }\n    });\n    e.PBKDF2 = function(h, u, p) {\n        return n.create(p).compute(h, u);\n    };\n})();\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ var Ke = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\", Et = \"=\";\nfunction _e(e) {\n    var t, r, i = \"\";\n    for(t = 0; t + 3 <= e.length; t += 3)r = parseInt(e.substring(t, t + 3), 16), i += Ke.charAt(r >> 6) + Ke.charAt(r & 63);\n    for(t + 1 == e.length ? (r = parseInt(e.substring(t, t + 1), 16), i += Ke.charAt(r << 2)) : t + 2 == e.length && (r = parseInt(e.substring(t, t + 2), 16), i += Ke.charAt(r >> 2) + Ke.charAt((r & 3) << 4)); (i.length & 3) > 0;)i += Et;\n    return i;\n}\nfunction it(e) {\n    var t = \"\", r, i = 0, s, n;\n    for(r = 0; r < e.length && e.charAt(r) != Et; ++r)n = Ke.indexOf(e.charAt(r)), !(n < 0) && (i == 0 ? (t += De(n >> 2), s = n & 3, i = 1) : i == 1 ? (t += De(s << 2 | n >> 4), s = n & 15, i = 2) : i == 2 ? (t += De(s), t += De(n >> 2), s = n & 3, i = 3) : (t += De(s << 2 | n >> 4), t += De(n & 15), i = 0));\n    return i == 1 && (t += De(s << 2)), t;\n}\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n*/ var Te;\nfunction R(e, t, r) {\n    e != null && (typeof e == \"number\" ? this.fromNumber(e, t, r) : t == null && typeof e != \"string\" ? this.fromString(e, 256) : this.fromString(e, t));\n}\nfunction _() {\n    return new R(null);\n}\nfunction qt(e, t, r, i, s, n) {\n    for(; --n >= 0;){\n        var h = t * this[e++] + r[i] + s;\n        s = Math.floor(h / 67108864), r[i++] = h & 67108863;\n    }\n    return s;\n}\nfunction kt(e, t, r, i, s, n) {\n    for(var h = t & 32767, u = t >> 15; --n >= 0;){\n        var p = this[e] & 32767, c = this[e++] >> 15, y = u * p + c * h;\n        p = h * p + ((y & 32767) << 15) + r[i] + (s & 1073741823), s = (p >>> 30) + (y >>> 15) + u * c + (s >>> 30), r[i++] = p & 1073741823;\n    }\n    return s;\n}\nfunction Mt(e, t, r, i, s, n) {\n    for(var h = t & 16383, u = t >> 14; --n >= 0;){\n        var p = this[e] & 16383, c = this[e++] >> 14, y = u * p + c * h;\n        p = h * p + ((y & 16383) << 14) + r[i] + s, s = (p >> 28) + (y >> 14) + u * c, r[i++] = p & 268435455;\n    }\n    return s;\n}\nUe.appName == \"Microsoft Internet Explorer\" ? (R.prototype.am = kt, Te = 30) : Ue.appName != \"Netscape\" ? (R.prototype.am = qt, Te = 26) : (R.prototype.am = Mt, Te = 28);\nR.prototype.DB = Te;\nR.prototype.DM = (1 << Te) - 1;\nR.prototype.DV = 1 << Te;\nvar nt = 52;\nR.prototype.FV = Math.pow(2, nt);\nR.prototype.F1 = nt - Te;\nR.prototype.F2 = 2 * Te - nt;\nvar _t = \"0123456789abcdefghijklmnopqrstuvwxyz\", $e = new Array(), Le, me;\nLe = 48;\nfor(me = 0; me <= 9; ++me)$e[Le++] = me;\nLe = 97;\nfor(me = 10; me < 36; ++me)$e[Le++] = me;\nLe = 65;\nfor(me = 10; me < 36; ++me)$e[Le++] = me;\nfunction De(e) {\n    return _t.charAt(e);\n}\nfunction wt(e, t) {\n    var r = $e[e.charCodeAt(t)];\n    return r ?? -1;\n}\nfunction Ut(e) {\n    for(var t = this.t - 1; t >= 0; --t)e[t] = this[t];\n    e.t = this.t, e.s = this.s;\n}\nfunction zt(e) {\n    this.t = 1, this.s = e < 0 ? -1 : 0, e > 0 ? this[0] = e : e < -1 ? this[0] = e + this.DV : this.t = 0;\n}\nfunction Re(e) {\n    var t = _();\n    return t.fromInt(e), t;\n}\nfunction Gt(e, t) {\n    var r;\n    if (t == 16) r = 4;\n    else if (t == 8) r = 3;\n    else if (t == 256) r = 8;\n    else if (t == 2) r = 1;\n    else if (t == 32) r = 5;\n    else if (t == 4) r = 2;\n    else {\n        this.fromRadix(e, t);\n        return;\n    }\n    this.t = 0, this.s = 0;\n    for(var i = e.length, s = !1, n = 0; --i >= 0;){\n        var h = r == 8 ? e[i] & 255 : wt(e, i);\n        if (h < 0) {\n            e.charAt(i) == \"-\" && (s = !0);\n            continue;\n        }\n        s = !1, n == 0 ? this[this.t++] = h : n + r > this.DB ? (this[this.t - 1] |= (h & (1 << this.DB - n) - 1) << n, this[this.t++] = h >> this.DB - n) : this[this.t - 1] |= h << n, n += r, n >= this.DB && (n -= this.DB);\n    }\n    r == 8 && e[0] & 128 && (this.s = -1, n > 0 && (this[this.t - 1] |= (1 << this.DB - n) - 1 << n)), this.clamp(), s && R.ZERO.subTo(this, this);\n}\nfunction Wt() {\n    for(var e = this.s & this.DM; this.t > 0 && this[this.t - 1] == e;)--this.t;\n}\nfunction Xt(e) {\n    if (this.s < 0) return \"-\" + this.negate().toString(e);\n    var t;\n    if (e == 16) t = 4;\n    else if (e == 8) t = 3;\n    else if (e == 2) t = 1;\n    else if (e == 32) t = 5;\n    else if (e == 4) t = 2;\n    else return this.toRadix(e);\n    var r = (1 << t) - 1, i, s = !1, n = \"\", h = this.t, u = this.DB - h * this.DB % t;\n    if (h-- > 0) for(u < this.DB && (i = this[h] >> u) > 0 && (s = !0, n = De(i)); h >= 0;)u < t ? (i = (this[h] & (1 << u) - 1) << t - u, i |= this[--h] >> (u += this.DB - t)) : (i = this[h] >> (u -= t) & r, u <= 0 && (u += this.DB, --h)), i > 0 && (s = !0), s && (n += De(i));\n    return s ? n : \"0\";\n}\nfunction Jt() {\n    var e = _();\n    return R.ZERO.subTo(this, e), e;\n}\nfunction $t() {\n    return this.s < 0 ? this.negate() : this;\n}\nfunction Yt(e) {\n    var t = this.s - e.s;\n    if (t != 0) return t;\n    var r = this.t;\n    if (t = r - e.t, t != 0) return this.s < 0 ? -t : t;\n    for(; --r >= 0;)if ((t = this[r] - e[r]) != 0) return t;\n    return 0;\n}\nfunction Ye(e) {\n    var t = 1, r;\n    return (r = e >>> 16) != 0 && (e = r, t += 16), (r = e >> 8) != 0 && (e = r, t += 8), (r = e >> 4) != 0 && (e = r, t += 4), (r = e >> 2) != 0 && (e = r, t += 2), (r = e >> 1) != 0 && (e = r, t += 1), t;\n}\nfunction Zt() {\n    return this.t <= 0 ? 0 : this.DB * (this.t - 1) + Ye(this[this.t - 1] ^ this.s & this.DM);\n}\nfunction Qt(e, t) {\n    var r;\n    for(r = this.t - 1; r >= 0; --r)t[r + e] = this[r];\n    for(r = e - 1; r >= 0; --r)t[r] = 0;\n    t.t = this.t + e, t.s = this.s;\n}\nfunction er(e, t) {\n    for(var r = e; r < this.t; ++r)t[r - e] = this[r];\n    t.t = Math.max(this.t - e, 0), t.s = this.s;\n}\nfunction tr(e, t) {\n    var r = e % this.DB, i = this.DB - r, s = (1 << i) - 1, n = Math.floor(e / this.DB), h = this.s << r & this.DM, u;\n    for(u = this.t - 1; u >= 0; --u)t[u + n + 1] = this[u] >> i | h, h = (this[u] & s) << r;\n    for(u = n - 1; u >= 0; --u)t[u] = 0;\n    t[n] = h, t.t = this.t + n + 1, t.s = this.s, t.clamp();\n}\nfunction rr(e, t) {\n    t.s = this.s;\n    var r = Math.floor(e / this.DB);\n    if (r >= this.t) {\n        t.t = 0;\n        return;\n    }\n    var i = e % this.DB, s = this.DB - i, n = (1 << i) - 1;\n    t[0] = this[r] >> i;\n    for(var h = r + 1; h < this.t; ++h)t[h - r - 1] |= (this[h] & n) << s, t[h - r] = this[h] >> i;\n    i > 0 && (t[this.t - r - 1] |= (this.s & n) << s), t.t = this.t - r, t.clamp();\n}\nfunction ir(e, t) {\n    for(var r = 0, i = 0, s = Math.min(e.t, this.t); r < s;)i += this[r] - e[r], t[r++] = i & this.DM, i >>= this.DB;\n    if (e.t < this.t) {\n        for(i -= e.s; r < this.t;)i += this[r], t[r++] = i & this.DM, i >>= this.DB;\n        i += this.s;\n    } else {\n        for(i += this.s; r < e.t;)i -= e[r], t[r++] = i & this.DM, i >>= this.DB;\n        i -= e.s;\n    }\n    t.s = i < 0 ? -1 : 0, i < -1 ? t[r++] = this.DV + i : i > 0 && (t[r++] = i), t.t = r, t.clamp();\n}\nfunction nr(e, t) {\n    var r = this.abs(), i = e.abs(), s = r.t;\n    for(t.t = s + i.t; --s >= 0;)t[s] = 0;\n    for(s = 0; s < i.t; ++s)t[s + r.t] = r.am(0, i[s], t, s, 0, r.t);\n    t.s = 0, t.clamp(), this.s != e.s && R.ZERO.subTo(t, t);\n}\nfunction sr(e) {\n    for(var t = this.abs(), r = e.t = 2 * t.t; --r >= 0;)e[r] = 0;\n    for(r = 0; r < t.t - 1; ++r){\n        var i = t.am(r, t[r], e, 2 * r, 0, 1);\n        (e[r + t.t] += t.am(r + 1, 2 * t[r], e, 2 * r + 1, i, t.t - r - 1)) >= t.DV && (e[r + t.t] -= t.DV, e[r + t.t + 1] = 1);\n    }\n    e.t > 0 && (e[e.t - 1] += t.am(r, t[r], e, 2 * r, 0, 1)), e.s = 0, e.clamp();\n}\nfunction ar(e, t, r) {\n    var i = e.abs();\n    if (!(i.t <= 0)) {\n        var s = this.abs();\n        if (s.t < i.t) {\n            t != null && t.fromInt(0), r != null && this.copyTo(r);\n            return;\n        }\n        r == null && (r = _());\n        var n = _(), h = this.s, u = e.s, p = this.DB - Ye(i[i.t - 1]);\n        p > 0 ? (i.lShiftTo(p, n), s.lShiftTo(p, r)) : (i.copyTo(n), s.copyTo(r));\n        var c = n.t, y = n[c - 1];\n        if (y != 0) {\n            var v = y * (1 << this.F1) + (c > 1 ? n[c - 2] >> this.F2 : 0), o = this.FV / v, l = (1 << this.F1) / v, f = 1 << this.F2, d = r.t, g = d - c, S = t ?? _();\n            for(n.dlShiftTo(g, S), r.compareTo(S) >= 0 && (r[r.t++] = 1, r.subTo(S, r)), R.ONE.dlShiftTo(c, S), S.subTo(n, n); n.t < c;)n[n.t++] = 0;\n            for(; --g >= 0;){\n                var b = r[--d] == y ? this.DM : Math.floor(r[d] * o + (r[d - 1] + f) * l);\n                if ((r[d] += n.am(0, b, r, g, 0, c)) < b) for(n.dlShiftTo(g, S), r.subTo(S, r); r[d] < --b;)r.subTo(S, r);\n            }\n            t != null && (r.drShiftTo(c, t), h != u && R.ZERO.subTo(t, t)), r.t = c, r.clamp(), p > 0 && r.rShiftTo(p, r), h < 0 && R.ZERO.subTo(r, r);\n        }\n    }\n}\nfunction or(e) {\n    var t = _();\n    return this.abs().divRemTo(e, null, t), this.s < 0 && t.compareTo(R.ZERO) > 0 && e.subTo(t, t), t;\n}\nfunction Oe(e) {\n    this.m = e;\n}\nfunction ur(e) {\n    return e.s < 0 || e.compareTo(this.m) >= 0 ? e.mod(this.m) : e;\n}\nfunction hr(e) {\n    return e;\n}\nfunction fr(e) {\n    e.divRemTo(this.m, null, e);\n}\nfunction cr(e, t, r) {\n    e.multiplyTo(t, r), this.reduce(r);\n}\nfunction lr(e, t) {\n    e.squareTo(t), this.reduce(t);\n}\nOe.prototype.convert = ur;\nOe.prototype.revert = hr;\nOe.prototype.reduce = fr;\nOe.prototype.mulTo = cr;\nOe.prototype.sqrTo = lr;\nfunction dr() {\n    if (this.t < 1) return 0;\n    var e = this[0];\n    if (!(e & 1)) return 0;\n    var t = e & 3;\n    return t = t * (2 - (e & 15) * t) & 15, t = t * (2 - (e & 255) * t) & 255, t = t * (2 - ((e & 65535) * t & 65535)) & 65535, t = t * (2 - e * t % this.DV) % this.DV, t > 0 ? this.DV - t : -t;\n}\nfunction je(e) {\n    this.m = e, this.mp = e.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << e.DB - 15) - 1, this.mt2 = 2 * e.t;\n}\nfunction pr(e) {\n    var t = _();\n    return e.abs().dlShiftTo(this.m.t, t), t.divRemTo(this.m, null, t), e.s < 0 && t.compareTo(R.ZERO) > 0 && this.m.subTo(t, t), t;\n}\nfunction vr(e) {\n    var t = _();\n    return e.copyTo(t), this.reduce(t), t;\n}\nfunction gr(e) {\n    for(; e.t <= this.mt2;)e[e.t++] = 0;\n    for(var t = 0; t < this.m.t; ++t){\n        var r = e[t] & 32767, i = r * this.mpl + ((r * this.mph + (e[t] >> 15) * this.mpl & this.um) << 15) & e.DM;\n        for(r = t + this.m.t, e[r] += this.m.am(0, i, e, t, 0, this.m.t); e[r] >= e.DV;)e[r] -= e.DV, e[++r]++;\n    }\n    e.clamp(), e.drShiftTo(this.m.t, e), e.compareTo(this.m) >= 0 && e.subTo(this.m, e);\n}\nfunction yr(e, t) {\n    e.squareTo(t), this.reduce(t);\n}\nfunction mr(e, t, r) {\n    e.multiplyTo(t, r), this.reduce(r);\n}\nje.prototype.convert = pr;\nje.prototype.revert = vr;\nje.prototype.reduce = gr;\nje.prototype.mulTo = mr;\nje.prototype.sqrTo = yr;\nfunction xr() {\n    return (this.t > 0 ? this[0] & 1 : this.s) == 0;\n}\nfunction Sr(e, t) {\n    if (e > 4294967295 || e < 1) return R.ONE;\n    var r = _(), i = _(), s = t.convert(this), n = Ye(e) - 1;\n    for(s.copyTo(r); --n >= 0;)if (t.sqrTo(r, i), (e & 1 << n) > 0) t.mulTo(i, s, r);\n    else {\n        var h = r;\n        r = i, i = h;\n    }\n    return t.revert(r);\n}\nfunction Er(e, t) {\n    var r;\n    return e < 256 || t.isEven() ? r = new Oe(t) : r = new je(t), this.exp(e, r);\n}\nR.prototype.copyTo = Ut;\nR.prototype.fromInt = zt;\nR.prototype.fromString = Gt;\nR.prototype.clamp = Wt;\nR.prototype.dlShiftTo = Qt;\nR.prototype.drShiftTo = er;\nR.prototype.lShiftTo = tr;\nR.prototype.rShiftTo = rr;\nR.prototype.subTo = ir;\nR.prototype.multiplyTo = nr;\nR.prototype.squareTo = sr;\nR.prototype.divRemTo = ar;\nR.prototype.invDigit = dr;\nR.prototype.isEven = xr;\nR.prototype.exp = Sr;\nR.prototype.toString = Xt;\nR.prototype.negate = Jt;\nR.prototype.abs = $t;\nR.prototype.compareTo = Yt;\nR.prototype.bitLength = Zt;\nR.prototype.mod = or;\nR.prototype.modPowInt = Er;\nR.ZERO = Re(0);\nR.ONE = Re(1);\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ function wr() {\n    var e = _();\n    return this.copyTo(e), e;\n}\nfunction Fr() {\n    if (this.s < 0) {\n        if (this.t == 1) return this[0] - this.DV;\n        if (this.t == 0) return -1;\n    } else {\n        if (this.t == 1) return this[0];\n        if (this.t == 0) return 0;\n    }\n    return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];\n}\nfunction br() {\n    return this.t == 0 ? this.s : this[0] << 24 >> 24;\n}\nfunction Ar() {\n    return this.t == 0 ? this.s : this[0] << 16 >> 16;\n}\nfunction Dr(e) {\n    return Math.floor(Math.LN2 * this.DB / Math.log(e));\n}\nfunction Pr() {\n    return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;\n}\nfunction Ir(e) {\n    if (e == null && (e = 10), this.signum() == 0 || e < 2 || e > 36) return \"0\";\n    var t = this.chunkSize(e), r = Math.pow(e, t), i = Re(r), s = _(), n = _(), h = \"\";\n    for(this.divRemTo(i, s, n); s.signum() > 0;)h = (r + n.intValue()).toString(e).substr(1) + h, s.divRemTo(i, s, n);\n    return n.intValue().toString(e) + h;\n}\nfunction Cr(e, t) {\n    this.fromInt(0), t == null && (t = 10);\n    for(var r = this.chunkSize(t), i = Math.pow(t, r), s = !1, n = 0, h = 0, u = 0; u < e.length; ++u){\n        var p = wt(e, u);\n        if (p < 0) {\n            e.charAt(u) == \"-\" && this.signum() == 0 && (s = !0);\n            continue;\n        }\n        h = t * h + p, ++n >= r && (this.dMultiply(i), this.dAddOffset(h, 0), n = 0, h = 0);\n    }\n    n > 0 && (this.dMultiply(Math.pow(t, n)), this.dAddOffset(h, 0)), s && R.ZERO.subTo(this, this);\n}\nfunction Rr(e, t, r) {\n    if (typeof t == \"number\") if (e < 2) this.fromInt(1);\n    else for(this.fromNumber(e, r), this.testBit(e - 1) || this.bitwiseTo(R.ONE.shiftLeft(e - 1), st, this), this.isEven() && this.dAddOffset(1, 0); !this.isProbablePrime(t);)this.dAddOffset(2, 0), this.bitLength() > e && this.subTo(R.ONE.shiftLeft(e - 1), this);\n    else {\n        var i = new Array(), s = e & 7;\n        i.length = (e >> 3) + 1, t.nextBytes(i), s > 0 ? i[0] &= (1 << s) - 1 : i[0] = 0, this.fromString(i, 256);\n    }\n}\nfunction Tr() {\n    var e = this.t, t = new Array();\n    t[0] = this.s;\n    var r = this.DB - e * this.DB % 8, i, s = 0;\n    if (e-- > 0) for(r < this.DB && (i = this[e] >> r) != (this.s & this.DM) >> r && (t[s++] = i | this.s << this.DB - r); e >= 0;)r < 8 ? (i = (this[e] & (1 << r) - 1) << 8 - r, i |= this[--e] >> (r += this.DB - 8)) : (i = this[e] >> (r -= 8) & 255, r <= 0 && (r += this.DB, --e)), i & 128 && (i |= -256), s == 0 && (this.s & 128) != (i & 128) && ++s, (s > 0 || i != this.s) && (t[s++] = i);\n    return t;\n}\nfunction Br(e) {\n    return this.compareTo(e) == 0;\n}\nfunction Nr(e) {\n    return this.compareTo(e) < 0 ? this : e;\n}\nfunction Hr(e) {\n    return this.compareTo(e) > 0 ? this : e;\n}\nfunction Or(e, t, r) {\n    var i, s, n = Math.min(e.t, this.t);\n    for(i = 0; i < n; ++i)r[i] = t(this[i], e[i]);\n    if (e.t < this.t) {\n        for(s = e.s & this.DM, i = n; i < this.t; ++i)r[i] = t(this[i], s);\n        r.t = this.t;\n    } else {\n        for(s = this.s & this.DM, i = n; i < e.t; ++i)r[i] = t(s, e[i]);\n        r.t = e.t;\n    }\n    r.s = t(this.s, e.s), r.clamp();\n}\nfunction jr(e, t) {\n    return e & t;\n}\nfunction Vr(e) {\n    var t = _();\n    return this.bitwiseTo(e, jr, t), t;\n}\nfunction st(e, t) {\n    return e | t;\n}\nfunction Kr(e) {\n    var t = _();\n    return this.bitwiseTo(e, st, t), t;\n}\nfunction Ft(e, t) {\n    return e ^ t;\n}\nfunction Lr(e) {\n    var t = _();\n    return this.bitwiseTo(e, Ft, t), t;\n}\nfunction bt(e, t) {\n    return e & ~t;\n}\nfunction qr(e) {\n    var t = _();\n    return this.bitwiseTo(e, bt, t), t;\n}\nfunction kr() {\n    for(var e = _(), t = 0; t < this.t; ++t)e[t] = this.DM & ~this[t];\n    return e.t = this.t, e.s = ~this.s, e;\n}\nfunction Mr(e) {\n    var t = _();\n    return e < 0 ? this.rShiftTo(-e, t) : this.lShiftTo(e, t), t;\n}\nfunction _r(e) {\n    var t = _();\n    return e < 0 ? this.lShiftTo(-e, t) : this.rShiftTo(e, t), t;\n}\nfunction Ur(e) {\n    if (e == 0) return -1;\n    var t = 0;\n    return e & 65535 || (e >>= 16, t += 16), e & 255 || (e >>= 8, t += 8), e & 15 || (e >>= 4, t += 4), e & 3 || (e >>= 2, t += 2), e & 1 || ++t, t;\n}\nfunction zr() {\n    for(var e = 0; e < this.t; ++e)if (this[e] != 0) return e * this.DB + Ur(this[e]);\n    return this.s < 0 ? this.t * this.DB : -1;\n}\nfunction Gr(e) {\n    for(var t = 0; e != 0;)e &= e - 1, ++t;\n    return t;\n}\nfunction Wr() {\n    for(var e = 0, t = this.s & this.DM, r = 0; r < this.t; ++r)e += Gr(this[r] ^ t);\n    return e;\n}\nfunction Xr(e) {\n    var t = Math.floor(e / this.DB);\n    return t >= this.t ? this.s != 0 : (this[t] & 1 << e % this.DB) != 0;\n}\nfunction Jr(e, t) {\n    var r = R.ONE.shiftLeft(e);\n    return this.bitwiseTo(r, t, r), r;\n}\nfunction $r(e) {\n    return this.changeBit(e, st);\n}\nfunction Yr(e) {\n    return this.changeBit(e, bt);\n}\nfunction Zr(e) {\n    return this.changeBit(e, Ft);\n}\nfunction Qr(e, t) {\n    for(var r = 0, i = 0, s = Math.min(e.t, this.t); r < s;)i += this[r] + e[r], t[r++] = i & this.DM, i >>= this.DB;\n    if (e.t < this.t) {\n        for(i += e.s; r < this.t;)i += this[r], t[r++] = i & this.DM, i >>= this.DB;\n        i += this.s;\n    } else {\n        for(i += this.s; r < e.t;)i += e[r], t[r++] = i & this.DM, i >>= this.DB;\n        i += e.s;\n    }\n    t.s = i < 0 ? -1 : 0, i > 0 ? t[r++] = i : i < -1 && (t[r++] = this.DV + i), t.t = r, t.clamp();\n}\nfunction ei(e) {\n    var t = _();\n    return this.addTo(e, t), t;\n}\nfunction ti(e) {\n    var t = _();\n    return this.subTo(e, t), t;\n}\nfunction ri(e) {\n    var t = _();\n    return this.multiplyTo(e, t), t;\n}\nfunction ii() {\n    var e = _();\n    return this.squareTo(e), e;\n}\nfunction ni(e) {\n    var t = _();\n    return this.divRemTo(e, t, null), t;\n}\nfunction si(e) {\n    var t = _();\n    return this.divRemTo(e, null, t), t;\n}\nfunction ai(e) {\n    var t = _(), r = _();\n    return this.divRemTo(e, t, r), new Array(t, r);\n}\nfunction oi(e) {\n    this[this.t] = this.am(0, e - 1, this, 0, 0, this.t), ++this.t, this.clamp();\n}\nfunction ui(e, t) {\n    if (e != 0) {\n        for(; this.t <= t;)this[this.t++] = 0;\n        for(this[t] += e; this[t] >= this.DV;)this[t] -= this.DV, ++t >= this.t && (this[this.t++] = 0), ++this[t];\n    }\n}\nfunction ze() {}\nfunction At(e) {\n    return e;\n}\nfunction hi(e, t, r) {\n    e.multiplyTo(t, r);\n}\nfunction fi(e, t) {\n    e.squareTo(t);\n}\nze.prototype.convert = At;\nze.prototype.revert = At;\nze.prototype.mulTo = hi;\nze.prototype.sqrTo = fi;\nfunction ci(e) {\n    return this.exp(e, new ze());\n}\nfunction li(e, t, r) {\n    var i = Math.min(this.t + e.t, t);\n    for(r.s = 0, r.t = i; i > 0;)r[--i] = 0;\n    var s;\n    for(s = r.t - this.t; i < s; ++i)r[i + this.t] = this.am(0, e[i], r, i, 0, this.t);\n    for(s = Math.min(e.t, t); i < s; ++i)this.am(0, e[i], r, i, 0, t - i);\n    r.clamp();\n}\nfunction di(e, t, r) {\n    --t;\n    var i = r.t = this.t + e.t - t;\n    for(r.s = 0; --i >= 0;)r[i] = 0;\n    for(i = Math.max(t - this.t, 0); i < e.t; ++i)r[this.t + i - t] = this.am(t - i, e[i], r, 0, 0, this.t + i - t);\n    r.clamp(), r.drShiftTo(1, r);\n}\nfunction qe(e) {\n    this.r2 = _(), this.q3 = _(), R.ONE.dlShiftTo(2 * e.t, this.r2), this.mu = this.r2.divide(e), this.m = e;\n}\nfunction pi(e) {\n    if (e.s < 0 || e.t > 2 * this.m.t) return e.mod(this.m);\n    if (e.compareTo(this.m) < 0) return e;\n    var t = _();\n    return e.copyTo(t), this.reduce(t), t;\n}\nfunction vi(e) {\n    return e;\n}\nfunction gi(e) {\n    for(e.drShiftTo(this.m.t - 1, this.r2), e.t > this.m.t + 1 && (e.t = this.m.t + 1, e.clamp()), this.mu.multiplyUpperTo(this.r2, this.m.t + 1, this.q3), this.m.multiplyLowerTo(this.q3, this.m.t + 1, this.r2); e.compareTo(this.r2) < 0;)e.dAddOffset(1, this.m.t + 1);\n    for(e.subTo(this.r2, e); e.compareTo(this.m) >= 0;)e.subTo(this.m, e);\n}\nfunction yi(e, t) {\n    e.squareTo(t), this.reduce(t);\n}\nfunction mi(e, t, r) {\n    e.multiplyTo(t, r), this.reduce(r);\n}\nqe.prototype.convert = pi;\nqe.prototype.revert = vi;\nqe.prototype.reduce = gi;\nqe.prototype.mulTo = mi;\nqe.prototype.sqrTo = yi;\nfunction xi(e, t) {\n    var r = e.bitLength(), i, s = Re(1), n;\n    if (r <= 0) return s;\n    r < 18 ? i = 1 : r < 48 ? i = 3 : r < 144 ? i = 4 : r < 768 ? i = 5 : i = 6, r < 8 ? n = new Oe(t) : t.isEven() ? n = new qe(t) : n = new je(t);\n    var h = new Array(), u = 3, p = i - 1, c = (1 << i) - 1;\n    if (h[1] = n.convert(this), i > 1) {\n        var y = _();\n        for(n.sqrTo(h[1], y); u <= c;)h[u] = _(), n.mulTo(y, h[u - 2], h[u]), u += 2;\n    }\n    var v = e.t - 1, o, l = !0, f = _(), d;\n    for(r = Ye(e[v]) - 1; v >= 0;){\n        for(r >= p ? o = e[v] >> r - p & c : (o = (e[v] & (1 << r + 1) - 1) << p - r, v > 0 && (o |= e[v - 1] >> this.DB + r - p)), u = i; !(o & 1);)o >>= 1, --u;\n        if ((r -= u) < 0 && (r += this.DB, --v), l) h[o].copyTo(s), l = !1;\n        else {\n            for(; u > 1;)n.sqrTo(s, f), n.sqrTo(f, s), u -= 2;\n            u > 0 ? n.sqrTo(s, f) : (d = s, s = f, f = d), n.mulTo(f, h[o], s);\n        }\n        for(; v >= 0 && !(e[v] & 1 << r);)n.sqrTo(s, f), d = s, s = f, f = d, --r < 0 && (r = this.DB - 1, --v);\n    }\n    return n.revert(s);\n}\nfunction Si(e) {\n    var t = this.s < 0 ? this.negate() : this.clone(), r = e.s < 0 ? e.negate() : e.clone();\n    if (t.compareTo(r) < 0) {\n        var i = t;\n        t = r, r = i;\n    }\n    var s = t.getLowestSetBit(), n = r.getLowestSetBit();\n    if (n < 0) return t;\n    for(s < n && (n = s), n > 0 && (t.rShiftTo(n, t), r.rShiftTo(n, r)); t.signum() > 0;)(s = t.getLowestSetBit()) > 0 && t.rShiftTo(s, t), (s = r.getLowestSetBit()) > 0 && r.rShiftTo(s, r), t.compareTo(r) >= 0 ? (t.subTo(r, t), t.rShiftTo(1, t)) : (r.subTo(t, r), r.rShiftTo(1, r));\n    return n > 0 && r.lShiftTo(n, r), r;\n}\nfunction Ei(e) {\n    if (e <= 0) return 0;\n    var t = this.DV % e, r = this.s < 0 ? e - 1 : 0;\n    if (this.t > 0) if (t == 0) r = this[0] % e;\n    else for(var i = this.t - 1; i >= 0; --i)r = (t * r + this[i]) % e;\n    return r;\n}\nfunction wi(e) {\n    var t = e.isEven();\n    if (this.isEven() && t || e.signum() == 0) return R.ZERO;\n    for(var r = e.clone(), i = this.clone(), s = Re(1), n = Re(0), h = Re(0), u = Re(1); r.signum() != 0;){\n        for(; r.isEven();)r.rShiftTo(1, r), t ? ((!s.isEven() || !n.isEven()) && (s.addTo(this, s), n.subTo(e, n)), s.rShiftTo(1, s)) : n.isEven() || n.subTo(e, n), n.rShiftTo(1, n);\n        for(; i.isEven();)i.rShiftTo(1, i), t ? ((!h.isEven() || !u.isEven()) && (h.addTo(this, h), u.subTo(e, u)), h.rShiftTo(1, h)) : u.isEven() || u.subTo(e, u), u.rShiftTo(1, u);\n        r.compareTo(i) >= 0 ? (r.subTo(i, r), t && s.subTo(h, s), n.subTo(u, n)) : (i.subTo(r, i), t && h.subTo(s, h), u.subTo(n, u));\n    }\n    if (i.compareTo(R.ONE) != 0) return R.ZERO;\n    if (u.compareTo(e) >= 0) return u.subtract(e);\n    if (u.signum() < 0) u.addTo(e, u);\n    else return u;\n    return u.signum() < 0 ? u.add(e) : u;\n}\nvar le = [\n    2,\n    3,\n    5,\n    7,\n    11,\n    13,\n    17,\n    19,\n    23,\n    29,\n    31,\n    37,\n    41,\n    43,\n    47,\n    53,\n    59,\n    61,\n    67,\n    71,\n    73,\n    79,\n    83,\n    89,\n    97,\n    101,\n    103,\n    107,\n    109,\n    113,\n    127,\n    131,\n    137,\n    139,\n    149,\n    151,\n    157,\n    163,\n    167,\n    173,\n    179,\n    181,\n    191,\n    193,\n    197,\n    199,\n    211,\n    223,\n    227,\n    229,\n    233,\n    239,\n    241,\n    251,\n    257,\n    263,\n    269,\n    271,\n    277,\n    281,\n    283,\n    293,\n    307,\n    311,\n    313,\n    317,\n    331,\n    337,\n    347,\n    349,\n    353,\n    359,\n    367,\n    373,\n    379,\n    383,\n    389,\n    397,\n    401,\n    409,\n    419,\n    421,\n    431,\n    433,\n    439,\n    443,\n    449,\n    457,\n    461,\n    463,\n    467,\n    479,\n    487,\n    491,\n    499,\n    503,\n    509,\n    521,\n    523,\n    541,\n    547,\n    557,\n    563,\n    569,\n    571,\n    577,\n    587,\n    593,\n    599,\n    601,\n    607,\n    613,\n    617,\n    619,\n    631,\n    641,\n    643,\n    647,\n    653,\n    659,\n    661,\n    673,\n    677,\n    683,\n    691,\n    701,\n    709,\n    719,\n    727,\n    733,\n    739,\n    743,\n    751,\n    757,\n    761,\n    769,\n    773,\n    787,\n    797,\n    809,\n    811,\n    821,\n    823,\n    827,\n    829,\n    839,\n    853,\n    857,\n    859,\n    863,\n    877,\n    881,\n    883,\n    887,\n    907,\n    911,\n    919,\n    929,\n    937,\n    941,\n    947,\n    953,\n    967,\n    971,\n    977,\n    983,\n    991,\n    997\n], Fi = (1 << 26) / le[le.length - 1];\nfunction bi(e) {\n    var t, r = this.abs();\n    if (r.t == 1 && r[0] <= le[le.length - 1]) {\n        for(t = 0; t < le.length; ++t)if (r[0] == le[t]) return !0;\n        return !1;\n    }\n    if (r.isEven()) return !1;\n    for(t = 1; t < le.length;){\n        for(var i = le[t], s = t + 1; s < le.length && i < Fi;)i *= le[s++];\n        for(i = r.modInt(i); t < s;)if (i % le[t++] == 0) return !1;\n    }\n    return r.millerRabin(e);\n}\nfunction Ai(e) {\n    var t = this.subtract(R.ONE), r = t.getLowestSetBit();\n    if (r <= 0) return !1;\n    var i = t.shiftRight(r);\n    e = e + 1 >> 1, e > le.length && (e = le.length);\n    for(var s = _(), n = 0; n < e; ++n){\n        s.fromInt(le[Math.floor(Math.random() * le.length)]);\n        var h = s.modPow(i, this);\n        if (h.compareTo(R.ONE) != 0 && h.compareTo(t) != 0) {\n            for(var u = 1; u++ < r && h.compareTo(t) != 0;)if (h = h.modPowInt(2, this), h.compareTo(R.ONE) == 0) return !1;\n            if (h.compareTo(t) != 0) return !1;\n        }\n    }\n    return !0;\n}\nR.prototype.chunkSize = Dr;\nR.prototype.toRadix = Ir;\nR.prototype.fromRadix = Cr;\nR.prototype.fromNumber = Rr;\nR.prototype.bitwiseTo = Or;\nR.prototype.changeBit = Jr;\nR.prototype.addTo = Qr;\nR.prototype.dMultiply = oi;\nR.prototype.dAddOffset = ui;\nR.prototype.multiplyLowerTo = li;\nR.prototype.multiplyUpperTo = di;\nR.prototype.modInt = Ei;\nR.prototype.millerRabin = Ai;\nR.prototype.clone = wr;\nR.prototype.intValue = Fr;\nR.prototype.byteValue = br;\nR.prototype.shortValue = Ar;\nR.prototype.signum = Pr;\nR.prototype.toByteArray = Tr;\nR.prototype.equals = Br;\nR.prototype.min = Nr;\nR.prototype.max = Hr;\nR.prototype.and = Vr;\nR.prototype.or = Kr;\nR.prototype.xor = Lr;\nR.prototype.andNot = qr;\nR.prototype.not = kr;\nR.prototype.shiftLeft = Mr;\nR.prototype.shiftRight = _r;\nR.prototype.getLowestSetBit = zr;\nR.prototype.bitCount = Wr;\nR.prototype.testBit = Xr;\nR.prototype.setBit = $r;\nR.prototype.clearBit = Yr;\nR.prototype.flipBit = Zr;\nR.prototype.add = ei;\nR.prototype.subtract = ti;\nR.prototype.multiply = ri;\nR.prototype.divide = ni;\nR.prototype.remainder = si;\nR.prototype.divideAndRemainder = ai;\nR.prototype.modPow = xi;\nR.prototype.modInverse = wi;\nR.prototype.pow = ci;\nR.prototype.gcd = Si;\nR.prototype.isProbablePrime = bi;\nR.prototype.square = ii;\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ function at() {\n    this.i = 0, this.j = 0, this.S = new Array();\n}\nfunction Di(e) {\n    var t, r, i;\n    for(t = 0; t < 256; ++t)this.S[t] = t;\n    for(r = 0, t = 0; t < 256; ++t)r = r + this.S[t] + e[t % e.length] & 255, i = this.S[t], this.S[t] = this.S[r], this.S[r] = i;\n    this.i = 0, this.j = 0;\n}\nfunction Pi() {\n    var e;\n    return this.i = this.i + 1 & 255, this.j = this.j + this.S[this.i] & 255, e = this.S[this.i], this.S[this.i] = this.S[this.j], this.S[this.j] = e, this.S[e + this.S[this.i] & 255];\n}\nat.prototype.init = Di;\nat.prototype.next = Pi;\nfunction Ii() {\n    return new at();\n}\nvar et = 256;\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ var We, ge, oe;\nfunction Ci(e) {\n    ge[oe++] ^= e & 255, ge[oe++] ^= e >> 8 & 255, ge[oe++] ^= e >> 16 & 255, ge[oe++] ^= e >> 24 & 255, oe >= et && (oe -= et);\n}\nfunction Dt() {\n    Ci(/* @__PURE__ */ new Date().getTime());\n}\nif (ge == null) {\n    ge = new Array(), oe = 0;\n    var Se;\n    if (Ve !== void 0 && (Ve.crypto !== void 0 || Ve.msCrypto !== void 0)) {\n        var lt = Ve.crypto || Ve.msCrypto;\n        if (lt.getRandomValues) {\n            var dt = new Uint8Array(32);\n            for(lt.getRandomValues(dt), Se = 0; Se < 32; ++Se)ge[oe++] = dt[Se];\n        } else if (Ue.appName == \"Netscape\" && Ue.appVersion < \"5\") {\n            var pt = Ve.crypto.random(32);\n            for(Se = 0; Se < pt.length; ++Se)ge[oe++] = pt.charCodeAt(Se) & 255;\n        }\n    }\n    for(; oe < et;)Se = Math.floor(65536 * Math.random()), ge[oe++] = Se >>> 8, ge[oe++] = Se & 255;\n    oe = 0, Dt();\n}\nfunction Ri() {\n    if (We == null) {\n        for(Dt(), We = Ii(), We.init(ge), oe = 0; oe < ge.length; ++oe)ge[oe] = 0;\n        oe = 0;\n    }\n    return We.next();\n}\nfunction Ti(e) {\n    var t;\n    for(t = 0; t < e.length; ++t)e[t] = Ri();\n}\nfunction Ge() {}\nGe.prototype.nextBytes = Ti;\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ function ve(e, t) {\n    return new R(e, t);\n}\nfunction q() {\n    this.n = null, this.e = 0, this.d = null, this.p = null, this.q = null, this.dmp1 = null, this.dmq1 = null, this.coeff = null;\n}\nfunction Bi(e, t) {\n    if (this.isPublic = !0, this.isPrivate = !1, typeof e != \"string\") this.n = e, this.e = t;\n    else if (e != null && t != null && e.length > 0 && t.length > 0) this.n = ve(e, 16), this.e = parseInt(t, 16);\n    else throw \"Invalid RSA public key\";\n}\nfunction Ni(e) {\n    return e.modPowInt(this.e, this.n);\n}\nq.prototype.doPublic = Ni;\nq.prototype.setPublic = Bi;\nq.prototype.type = \"RSA\";\nfunction Hi(e, t, r) {\n    if (this.isPrivate = !0, typeof e != \"string\") this.n = e, this.e = t, this.d = r;\n    else if (e != null && t != null && e.length > 0 && t.length > 0) this.n = ve(e, 16), this.e = parseInt(t, 16), this.d = ve(r, 16);\n    else throw \"Invalid RSA private key\";\n}\nfunction Oi(e, t, r, i, s, n, h, u) {\n    if (this.isPrivate = !0, this.isPublic = !1, e == null) throw \"RSASetPrivateEx N == null\";\n    if (t == null) throw \"RSASetPrivateEx E == null\";\n    if (e.length == 0) throw \"RSASetPrivateEx N.length == 0\";\n    if (t.length == 0) throw \"RSASetPrivateEx E.length == 0\";\n    if (e != null && t != null && e.length > 0 && t.length > 0) this.n = ve(e, 16), this.e = parseInt(t, 16), this.d = ve(r, 16), this.p = ve(i, 16), this.q = ve(s, 16), this.dmp1 = ve(n, 16), this.dmq1 = ve(h, 16), this.coeff = ve(u, 16);\n    else throw \"Invalid RSA private key in RSASetPrivateEx\";\n}\nfunction ji(e, t) {\n    var r = new Ge(), i = e >> 1;\n    this.e = parseInt(t, 16);\n    for(var s = new R(t, 16), n = e / 2 - 100, h = R.ONE.shiftLeft(n);;){\n        for(; this.p = new R(e - i, 1, r), !(this.p.subtract(R.ONE).gcd(s).compareTo(R.ONE) == 0 && this.p.isProbablePrime(10)););\n        for(; this.q = new R(i, 1, r), !(this.q.subtract(R.ONE).gcd(s).compareTo(R.ONE) == 0 && this.q.isProbablePrime(10)););\n        if (this.p.compareTo(this.q) <= 0) {\n            var u = this.p;\n            this.p = this.q, this.q = u;\n        }\n        var p = this.q.subtract(this.p).abs();\n        if (!(p.bitLength() < n || p.compareTo(h) <= 0)) {\n            var c = this.p.subtract(R.ONE), y = this.q.subtract(R.ONE), v = c.multiply(y);\n            if (v.gcd(s).compareTo(R.ONE) == 0 && (this.n = this.p.multiply(this.q), this.n.bitLength() == e)) {\n                this.d = s.modInverse(v), this.dmp1 = this.d.mod(c), this.dmq1 = this.d.mod(y), this.coeff = this.q.modInverse(this.p);\n                break;\n            }\n        }\n    }\n    this.isPrivate = !0;\n}\nfunction Vi(e) {\n    if (this.p == null || this.q == null) return e.modPow(this.d, this.n);\n    for(var t = e.mod(this.p).modPow(this.dmp1, this.p), r = e.mod(this.q).modPow(this.dmq1, this.q); t.compareTo(r) < 0;)t = t.add(this.p);\n    return t.subtract(r).multiply(this.coeff).mod(this.p).multiply(this.q).add(r);\n}\nq.prototype.doPrivate = Vi;\nq.prototype.setPrivate = Hi;\nq.prototype.setPrivateEx = Oi;\nq.prototype.generate = ji;\n/*! (c) Tom Wu | http://www-cs-students.stanford.edu/~tjw/jsbn/\n */ function ue(e, t) {\n    this.x = t, this.q = e;\n}\nfunction Ki(e) {\n    return e == this ? !0 : this.q.equals(e.q) && this.x.equals(e.x);\n}\nfunction Li() {\n    return this.x;\n}\nfunction qi() {\n    return new ue(this.q, this.x.negate().mod(this.q));\n}\nfunction ki(e) {\n    return new ue(this.q, this.x.add(e.toBigInteger()).mod(this.q));\n}\nfunction Mi(e) {\n    return new ue(this.q, this.x.subtract(e.toBigInteger()).mod(this.q));\n}\nfunction _i(e) {\n    return new ue(this.q, this.x.multiply(e.toBigInteger()).mod(this.q));\n}\nfunction Ui() {\n    return new ue(this.q, this.x.square().mod(this.q));\n}\nfunction zi(e) {\n    return new ue(this.q, this.x.multiply(e.toBigInteger().modInverse(this.q)).mod(this.q));\n}\nue.prototype.equals = Ki;\nue.prototype.toBigInteger = Li;\nue.prototype.negate = qi;\nue.prototype.add = ki;\nue.prototype.subtract = Mi;\nue.prototype.multiply = _i;\nue.prototype.square = Ui;\nue.prototype.divide = zi;\nue.prototype.sqrt = function() {\n    return new ue(this.q, this.x.sqrt().mod(this.q));\n};\nfunction z(e, t, r, i) {\n    this.curve = e, this.x = t, this.y = r, i == null ? this.z = R.ONE : this.z = i, this.zinv = null;\n}\nfunction Gi() {\n    return this.zinv == null && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.x.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n}\nfunction Wi() {\n    return this.zinv == null && (this.zinv = this.z.modInverse(this.curve.q)), this.curve.fromBigInteger(this.y.toBigInteger().multiply(this.zinv).mod(this.curve.q));\n}\nfunction Xi(e) {\n    if (e == this) return !0;\n    if (this.isInfinity()) return e.isInfinity();\n    if (e.isInfinity()) return this.isInfinity();\n    var t, r;\n    return t = e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q), t.equals(R.ZERO) ? (r = e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q), r.equals(R.ZERO)) : !1;\n}\nfunction Ji() {\n    return this.x == null && this.y == null ? !0 : this.z.equals(R.ZERO) && !this.y.toBigInteger().equals(R.ZERO);\n}\nfunction $i() {\n    return new z(this.curve, this.x, this.y.negate(), this.z);\n}\nfunction Yi(e) {\n    if (this.isInfinity()) return e;\n    if (e.isInfinity()) return this;\n    var t = e.y.toBigInteger().multiply(this.z).subtract(this.y.toBigInteger().multiply(e.z)).mod(this.curve.q), r = e.x.toBigInteger().multiply(this.z).subtract(this.x.toBigInteger().multiply(e.z)).mod(this.curve.q);\n    if (R.ZERO.equals(r)) return R.ZERO.equals(t) ? this.twice() : this.curve.getInfinity();\n    var i = new R(\"3\"), s = this.x.toBigInteger(), n = this.y.toBigInteger();\n    e.x.toBigInteger(), e.y.toBigInteger();\n    var h = r.square(), u = h.multiply(r), p = s.multiply(h), c = t.square().multiply(this.z), y = c.subtract(p.shiftLeft(1)).multiply(e.z).subtract(u).multiply(r).mod(this.curve.q), v = p.multiply(i).multiply(t).subtract(n.multiply(u)).subtract(c.multiply(t)).multiply(e.z).add(t.multiply(u)).mod(this.curve.q), o = u.multiply(this.z).multiply(e.z).mod(this.curve.q);\n    return new z(this.curve, this.curve.fromBigInteger(y), this.curve.fromBigInteger(v), o);\n}\nfunction Zi() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    var e = new R(\"3\"), t = this.x.toBigInteger(), r = this.y.toBigInteger(), i = r.multiply(this.z), s = i.multiply(r).mod(this.curve.q), n = this.curve.a.toBigInteger(), h = t.square().multiply(e);\n    R.ZERO.equals(n) || (h = h.add(this.z.square().multiply(n))), h = h.mod(this.curve.q);\n    var u = h.square().subtract(t.shiftLeft(3).multiply(s)).shiftLeft(1).multiply(i).mod(this.curve.q), p = h.multiply(e).multiply(t).subtract(s.shiftLeft(1)).shiftLeft(2).multiply(s).subtract(h.square().multiply(h)).mod(this.curve.q), c = i.square().multiply(i).shiftLeft(3).mod(this.curve.q);\n    return new z(this.curve, this.curve.fromBigInteger(u), this.curve.fromBigInteger(p), c);\n}\nfunction Qi(e) {\n    if (this.isInfinity()) return this;\n    if (e.signum() == 0) return this.curve.getInfinity();\n    var t = e, r = t.multiply(new R(\"3\")), i = this.negate(), s = this, n = this.curve.q.subtract(e), h = n.multiply(new R(\"3\")), u = new z(this.curve, this.x, this.y), p = u.negate(), c;\n    for(c = r.bitLength() - 2; c > 0; --c){\n        s = s.twice();\n        var y = r.testBit(c), v = t.testBit(c);\n        y != v && (s = s.add(y ? this : i));\n    }\n    for(c = h.bitLength() - 2; c > 0; --c){\n        u = u.twice();\n        var o = h.testBit(c), l = n.testBit(c);\n        o != l && (u = u.add(o ? u : p));\n    }\n    return s;\n}\nfunction en(e, t, r) {\n    var i;\n    e.bitLength() > r.bitLength() ? i = e.bitLength() - 1 : i = r.bitLength() - 1;\n    for(var s = this.curve.getInfinity(), n = this.add(t); i >= 0;)s = s.twice(), e.testBit(i) ? r.testBit(i) ? s = s.add(n) : s = s.add(this) : r.testBit(i) && (s = s.add(t)), --i;\n    return s;\n}\nz.prototype.getX = Gi;\nz.prototype.getY = Wi;\nz.prototype.equals = Xi;\nz.prototype.isInfinity = Ji;\nz.prototype.negate = $i;\nz.prototype.add = Yi;\nz.prototype.twice = Zi;\nz.prototype.multiply = Qi;\nz.prototype.multiplyTwo = en;\nfunction Be(e, t, r) {\n    this.q = e, this.a = this.fromBigInteger(t), this.b = this.fromBigInteger(r), this.infinity = new z(this, null, null);\n}\nfunction tn() {\n    return this.q;\n}\nfunction rn() {\n    return this.a;\n}\nfunction nn() {\n    return this.b;\n}\nfunction sn(e) {\n    return e == this ? !0 : this.q.equals(e.q) && this.a.equals(e.a) && this.b.equals(e.b);\n}\nfunction an() {\n    return this.infinity;\n}\nfunction on(e) {\n    return new ue(this.q, e);\n}\nfunction un(e) {\n    switch(parseInt(e.substr(0, 2), 16)){\n        case 0:\n            return this.infinity;\n        case 2:\n        case 3:\n            var t = e.substr(0, 2);\n            e.substr(2);\n            var r = this.fromBigInteger(new R(p, 16)), i = this.getA(), s = this.getB(), n = r.square().add(i).multiply(r).add(s), h = n.sqrt();\n            return t == \"03\" && (h = h.negate()), new z(this, r, h);\n        case 4:\n        case 6:\n        case 7:\n            var u = (e.length - 2) / 2, p = e.substr(2, u), c = e.substr(u + 2, u);\n            return new z(this, this.fromBigInteger(new R(p, 16)), this.fromBigInteger(new R(c, 16)));\n        default:\n            return null;\n    }\n}\nBe.prototype.getQ = tn;\nBe.prototype.getA = rn;\nBe.prototype.getB = nn;\nBe.prototype.equals = sn;\nBe.prototype.getInfinity = an;\nBe.prototype.fromBigInteger = on;\nBe.prototype.decodePointHex = un;\n/*! (c) Stefan Thomas | https://github.com/bitcoinjs/bitcoinjs-lib\n */ ue.prototype.getByteLength = function() {\n    return Math.floor((this.toBigInteger().bitLength() + 7) / 8);\n};\nz.prototype.getEncoded = function(e) {\n    var t = function(n, h) {\n        var u = n.toByteArrayUnsigned();\n        if (h < u.length) u = u.slice(u.length - h);\n        else for(; h > u.length;)u.unshift(0);\n        return u;\n    }, r = this.getX().toBigInteger(), i = this.getY().toBigInteger(), s = t(r, 32);\n    return e ? i.isEven() ? s.unshift(2) : s.unshift(3) : (s.unshift(4), s = s.concat(t(i, 32))), s;\n};\nz.decodeFrom = function(e, t) {\n    t[0];\n    var r = t.length - 1, i = t.slice(1, 1 + r / 2), s = t.slice(1 + r / 2, 1 + r);\n    i.unshift(0), s.unshift(0);\n    var n = new R(i), h = new R(s);\n    return new z(e, e.fromBigInteger(n), e.fromBigInteger(h));\n};\nz.decodeFromHex = function(e, t) {\n    t.substr(0, 2);\n    var r = t.length - 2, i = t.substr(2, r / 2), s = t.substr(2 + r / 2, r / 2), n = new R(i, 16), h = new R(s, 16);\n    return new z(e, e.fromBigInteger(n), e.fromBigInteger(h));\n};\nz.prototype.add2D = function(e) {\n    if (this.isInfinity()) return e;\n    if (e.isInfinity()) return this;\n    if (this.x.equals(e.x)) return this.y.equals(e.y) ? this.twice() : this.curve.getInfinity();\n    var t = e.x.subtract(this.x), r = e.y.subtract(this.y), i = r.divide(t), s = i.square().subtract(this.x).subtract(e.x), n = i.multiply(this.x.subtract(s)).subtract(this.y);\n    return new z(this.curve, s, n);\n};\nz.prototype.twice2D = function() {\n    if (this.isInfinity()) return this;\n    if (this.y.toBigInteger().signum() == 0) return this.curve.getInfinity();\n    var e = this.curve.fromBigInteger(R.valueOf(2)), t = this.curve.fromBigInteger(R.valueOf(3)), r = this.x.square().multiply(t).add(this.curve.a).divide(this.y.multiply(e)), i = r.square().subtract(this.x.multiply(e)), s = r.multiply(this.x.subtract(i)).subtract(this.y);\n    return new z(this.curve, i, s);\n};\nz.prototype.multiply2D = function(e) {\n    if (this.isInfinity()) return this;\n    if (e.signum() == 0) return this.curve.getInfinity();\n    var t = e, r = t.multiply(new R(\"3\")), i = this.negate(), s = this, n;\n    for(n = r.bitLength() - 2; n > 0; --n){\n        s = s.twice();\n        var h = r.testBit(n), u = t.testBit(n);\n        h != u && (s = s.add2D(h ? this : i));\n    }\n    return s;\n};\nz.prototype.isOnCurve = function() {\n    var e = this.getX().toBigInteger(), t = this.getY().toBigInteger(), r = this.curve.getA().toBigInteger(), i = this.curve.getB().toBigInteger(), s = this.curve.getQ(), n = t.multiply(t).mod(s), h = e.multiply(e).multiply(e).add(r.multiply(e)).add(i).mod(s);\n    return n.equals(h);\n};\nz.prototype.toString = function() {\n    return \"(\" + this.getX().toBigInteger().toString() + \",\" + this.getY().toBigInteger().toString() + \")\";\n};\nz.prototype.validate = function() {\n    var e = this.curve.getQ();\n    if (this.isInfinity()) throw new Error(\"Point is at infinity.\");\n    var t = this.getX().toBigInteger(), r = this.getY().toBigInteger();\n    if (t.compareTo(R.ONE) < 0 || t.compareTo(e.subtract(R.ONE)) > 0) throw new Error(\"x coordinate out of bounds\");\n    if (r.compareTo(R.ONE) < 0 || r.compareTo(e.subtract(R.ONE)) > 0) throw new Error(\"y coordinate out of bounds\");\n    if (!this.isOnCurve()) throw new Error(\"Point is not on the curve.\");\n    if (this.multiply(e).isInfinity()) throw new Error(\"Point is not a scalar multiple of G.\");\n    return !0;\n};\n/*! Mike Samuel (c) 2009 | code.google.com/p/json-sans-eval\n */ var Pt = function() {\n    var e = \"(?:-?\\\\b(?:0|[1-9][0-9]*)(?:\\\\.[0-9]+)?(?:[eE][+-]?[0-9]+)?\\\\b)\", t = '(?:[^\\\\0-\\\\x08\\\\x0a-\\\\x1f\"\\\\\\\\]|\\\\\\\\(?:[\"/\\\\\\\\bfnrt]|u[0-9A-Fa-f]{4}))', r = '(?:\"' + t + '*\")', i = new RegExp(\"(?:false|true|null|[\\\\{\\\\}\\\\[\\\\]]|\" + e + \"|\" + r + \")\", \"g\"), s = new RegExp(\"\\\\\\\\(?:([^u])|u(.{4}))\", \"g\"), n = {\n        '\"': '\"',\n        \"/\": \"/\",\n        \"\\\\\": \"\\\\\",\n        b: \"\\b\",\n        f: \"\\f\",\n        n: `\n`,\n        r: \"\\r\",\n        t: \"\t\"\n    };\n    function h(y, v, o) {\n        return v ? n[v] : String.fromCharCode(parseInt(o, 16));\n    }\n    var u = new String(\"\"), p = \"\\\\\", c = Object.hasOwnProperty;\n    return function(y, v) {\n        var o = y.match(i), l, f = o[0], d = !1;\n        f === \"{\" ? l = {} : f === \"[\" ? l = [] : (l = [], d = !0);\n        for(var g, S = [\n            l\n        ], b = 1 - d, D = o.length; b < D; ++b){\n            f = o[b];\n            var A;\n            switch(f.charCodeAt(0)){\n                default:\n                    A = S[0], A[g || A.length] = +f, g = void 0;\n                    break;\n                case 34:\n                    if (f = f.substring(1, f.length - 1), f.indexOf(p) !== -1 && (f = f.replace(s, h)), A = S[0], !g) if (A instanceof Array) g = A.length;\n                    else {\n                        g = f || u;\n                        break;\n                    }\n                    A[g] = f, g = void 0;\n                    break;\n                case 91:\n                    A = S[0], S.unshift(A[g || A.length] = []), g = void 0;\n                    break;\n                case 93:\n                    S.shift();\n                    break;\n                case 102:\n                    A = S[0], A[g || A.length] = !1, g = void 0;\n                    break;\n                case 110:\n                    A = S[0], A[g || A.length] = null, g = void 0;\n                    break;\n                case 116:\n                    A = S[0], A[g || A.length] = !0, g = void 0;\n                    break;\n                case 123:\n                    A = S[0], S.unshift(A[g || A.length] = {}), g = void 0;\n                    break;\n                case 125:\n                    S.shift();\n                    break;\n            }\n        }\n        if (d) {\n            if (S.length !== 1) throw new Error();\n            l = l[0];\n        } else if (S.length) throw new Error();\n        if (v) {\n            var I = function(m, E) {\n                var w = m[E];\n                if (w && typeof w == \"object\") {\n                    var x = null;\n                    for(var F in w)if (c.call(w, F) && w !== m) {\n                        var P = I(w, F);\n                        P !== void 0 ? w[F] = P : (x || (x = []), x.push(F));\n                    }\n                    if (x) for(var T = x.length; --T >= 0;)delete w[x[T]];\n                }\n                return v.call(m, E, w);\n            };\n            l = I({\n                \"\": l\n            }, \"\");\n        }\n        return l;\n    };\n}();\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\na.asn1.ASN1Util = new function() {\n    this.integerToByteHex = function(e) {\n        var t = e.toString(16);\n        return t.length % 2 == 1 && (t = \"0\" + t), t;\n    }, this.bigIntToMinTwosComplementsHex = function(e) {\n        return Ze(e);\n    }, this.getPEMStringFromHex = function(e, t) {\n        return de(e, t);\n    }, this.newObject = function(e) {\n        var t = a, r = t.asn1, i = r.ASN1Object, s = r.DERBoolean, n = r.DERInteger, h = r.DERBitString, u = r.DEROctetString, p = r.DERNull, c = r.DERObjectIdentifier, y = r.DEREnumerated, v = r.DERUTF8String, o = r.DERNumericString, l = r.DERPrintableString, f = r.DERTeletexString, d = r.DERIA5String, g = r.DERUTCTime, S = r.DERGeneralizedTime, b = r.DERVisibleString, D = r.DERBMPString, A = r.DERSequence, I = r.DERSet, m = r.DERTaggedObject, E = r.ASN1Util.newObject;\n        if (e instanceof r.ASN1Object) return e;\n        var w = Object.keys(e);\n        if (w.length != 1) throw new Error(\"key of param shall be only one.\");\n        var x = w[0];\n        if (\":asn1:bool:int:bitstr:octstr:null:oid:enum:utf8str:numstr:prnstr:telstr:ia5str:utctime:gentime:visstr:bmpstr:seq:set:tag:\".indexOf(\":\" + x + \":\") == -1) throw new Error(\"undefined key: \" + x);\n        if (x == \"bool\") return new s(e[x]);\n        if (x == \"int\") return new n(e[x]);\n        if (x == \"bitstr\") return new h(e[x]);\n        if (x == \"octstr\") return new u(e[x]);\n        if (x == \"null\") return new p(e[x]);\n        if (x == \"oid\") return new c(e[x]);\n        if (x == \"enum\") return new y(e[x]);\n        if (x == \"utf8str\") return new v(e[x]);\n        if (x == \"numstr\") return new o(e[x]);\n        if (x == \"prnstr\") return new l(e[x]);\n        if (x == \"telstr\") return new f(e[x]);\n        if (x == \"ia5str\") return new d(e[x]);\n        if (x == \"utctime\") return new g(e[x]);\n        if (x == \"gentime\") return new S(e[x]);\n        if (x == \"visstr\") return new b(e[x]);\n        if (x == \"bmpstr\") return new D(e[x]);\n        if (x == \"asn1\") return new i(e[x]);\n        if (x == \"seq\") {\n            for(var F = e[x], P = [], T = 0; T < F.length; T++){\n                var H = E(F[T]);\n                P.push(H);\n            }\n            return new A({\n                array: P\n            });\n        }\n        if (x == \"set\") {\n            for(var F = e[x], P = [], T = 0; T < F.length; T++){\n                var H = E(F[T]);\n                P.push(H);\n            }\n            return new I({\n                array: P\n            });\n        }\n        if (x == \"tag\") {\n            var C = e[x];\n            if (Object.prototype.toString.call(C) === \"[object Array]\" && C.length == 3) {\n                var B = E(C[2]);\n                return new m({\n                    tag: C[0],\n                    explicit: C[1],\n                    obj: B\n                });\n            } else return new m(C);\n        }\n    }, this.jsonToASN1HEX = function(e) {\n        var t = this.newObject(e);\n        return t.tohex();\n    };\n}();\na.asn1.ASN1Util.oidHexToInt = function(e) {\n    for(var s = \"\", t = parseInt(e.substr(0, 2), 16), r = Math.floor(t / 40), i = t % 40, s = r + \".\" + i, n = \"\", h = 2; h < e.length; h += 2){\n        var u = parseInt(e.substr(h, 2), 16), p = (\"00000000\" + u.toString(2)).slice(-8);\n        if (n = n + p.substr(1, 7), p.substr(0, 1) == \"0\") {\n            var c = new R(n, 2);\n            s = s + \".\" + c.toString(10), n = \"\";\n        }\n    }\n    return s;\n};\na.asn1.ASN1Util.oidIntToHex = function(e) {\n    var t = function(u) {\n        var p = u.toString(16);\n        return p.length == 1 && (p = \"0\" + p), p;\n    }, r = function(u) {\n        var p = \"\", c = new R(u, 10), y = c.toString(2), v = 7 - y.length % 7;\n        v == 7 && (v = 0);\n        for(var o = \"\", l = 0; l < v; l++)o += \"0\";\n        y = o + y;\n        for(var l = 0; l < y.length - 1; l += 7){\n            var f = y.substr(l, 7);\n            l != y.length - 7 && (f = \"1\" + f), p += t(parseInt(f, 2));\n        }\n        return p;\n    };\n    if (!e.match(/^[0-9.]+$/)) throw \"malformed oid string: \" + e;\n    var i = \"\", s = e.split(\".\"), n = parseInt(s[0]) * 40 + parseInt(s[1]);\n    i += t(n), s.splice(0, 2);\n    for(var h = 0; h < s.length; h++)i += r(s[h]);\n    return i;\n};\na.asn1.ASN1Object = function(e) {\n    var t = \"\";\n    this.params = null, this.getLengthHexFromValue = function() {\n        if (typeof this.hV > \"u\" || this.hV == null) throw new Error(\"this.hV is null or undefined\");\n        if (this.hV.length % 2 == 1) throw new Error(\"value hex must be even length: n=\" + t.length + \",v=\" + this.hV);\n        var r = this.hV.length / 2, i = r.toString(16);\n        if (i.length % 2 == 1 && (i = \"0\" + i), r < 128) return i;\n        var s = i.length / 2;\n        if (s > 15) throw new Error(\"ASN.1 length too long to represent by 8x: n = \" + r.toString(16));\n        var n = 128 + s;\n        return n.toString(16) + i;\n    }, this.tohex = function() {\n        return (this.hTLV == null || this.isModified) && (this.hV = this.getFreshValueHex(), this.hL = this.getLengthHexFromValue(), this.hTLV = this.hT + this.hL + this.hV, this.isModified = !1), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.getValueHex = function() {\n        return this.tohex(), this.hV;\n    }, this.getFreshValueHex = function() {\n        return \"\";\n    }, this.setByParam = function(r) {\n        this.params = r;\n    }, e != null && e.tlv != null && (this.hTLV = e.tlv, this.isModified = !1);\n};\na.asn1.DERAbstractString = function(e) {\n    a.asn1.DERAbstractString.superclass.constructor.call(this), this.getString = function() {\n        return this.s;\n    }, this.setString = function(t) {\n        this.hTLV = null, this.isModified = !0, this.s = t, this.hV = ht(this.s).toLowerCase();\n    }, this.setStringHex = function(t) {\n        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;\n    }, this.getFreshValueHex = function() {\n        return this.hV;\n    }, typeof e < \"u\" && (typeof e == \"string\" ? this.setString(e) : typeof e.str < \"u\" ? this.setString(e.str) : typeof e.hex < \"u\" && this.setStringHex(e.hex));\n};\nN(a.asn1.DERAbstractString, a.asn1.ASN1Object);\na.asn1.DERAbstractTime = function(e) {\n    a.asn1.DERAbstractTime.superclass.constructor.call(this), this.localDateToUTC = function(t) {\n        var r = t.getTime() + t.getTimezoneOffset() * 6e4, i = new Date(r);\n        return i;\n    }, this.formatDate = function(t, r, i) {\n        var s = this.zeroPadding, n = this.localDateToUTC(t), h = String(n.getFullYear());\n        r == \"utc\" && (h = h.substr(2, 2));\n        var u = s(String(n.getMonth() + 1), 2), p = s(String(n.getDate()), 2), c = s(String(n.getHours()), 2), y = s(String(n.getMinutes()), 2), v = s(String(n.getSeconds()), 2), o = h + u + p + c + y + v;\n        if (i === !0) {\n            var l = n.getMilliseconds();\n            if (l != 0) {\n                var f = s(String(l), 3);\n                f = f.replace(/[0]+$/, \"\"), o = o + \".\" + f;\n            }\n        }\n        return o + \"Z\";\n    }, this.zeroPadding = function(t, r) {\n        return t.length >= r ? t : new Array(r - t.length + 1).join(\"0\") + t;\n    }, this.setByParam = function(t) {\n        this.hV = null, this.hTLV = null, this.params = t;\n    }, this.getString = function() {}, this.setString = function(t) {\n        this.hTLV = null, this.isModified = !0, this.params == null && (this.params = {}), this.params.str = t;\n    }, this.setByDate = function(t) {\n        this.hTLV = null, this.isModified = !0, this.params == null && (this.params = {}), this.params.date = t;\n    }, this.setByDateValue = function(t, r, i, s, n, h) {\n        var u = new Date(Date.UTC(t, r - 1, i, s, n, h, 0));\n        this.setByDate(u);\n    }, this.getFreshValueHex = function() {\n        return this.hV;\n    };\n};\nN(a.asn1.DERAbstractTime, a.asn1.ASN1Object);\na.asn1.DERAbstractStructured = function(e) {\n    a.asn1.DERAbstractString.superclass.constructor.call(this), this.setByASN1ObjectArray = function(t) {\n        this.hTLV = null, this.isModified = !0, this.asn1Array = t;\n    }, this.appendASN1Object = function(t) {\n        this.hTLV = null, this.isModified = !0, this.asn1Array.push(t);\n    }, this.asn1Array = new Array(), typeof e < \"u\" && typeof e.array < \"u\" && (this.asn1Array = e.array);\n};\nN(a.asn1.DERAbstractStructured, a.asn1.ASN1Object);\na.asn1.DERBoolean = function(e) {\n    a.asn1.DERBoolean.superclass.constructor.call(this), this.hT = \"01\", e == !1 ? this.hTLV = \"010100\" : this.hTLV = \"0101ff\";\n};\nN(a.asn1.DERBoolean, a.asn1.ASN1Object);\na.asn1.DERInteger = function(e) {\n    a.asn1.DERInteger.superclass.constructor.call(this), this.hT = \"02\", this.params = null;\n    var t = Ze;\n    this.setByBigInteger = function(r) {\n        this.isModified = !0, this.params = {\n            bigint: r\n        };\n    }, this.setByInteger = function(r) {\n        this.isModified = !0, this.params = r;\n    }, this.setValueHex = function(r) {\n        this.isModified = !0, this.params = {\n            hex: r\n        };\n    }, this.getFreshValueHex = function() {\n        var r = this.params, i = null;\n        if (r == null) throw new Error(\"value not set\");\n        if (typeof r == \"object\" && r.hex != null) return this.hV = r.hex, this.hV;\n        if (typeof r == \"number\") i = new R(String(r), 10);\n        else if (r.int != null) i = new R(String(r.int), 10);\n        else if (r.bigint != null) i = r.bigint;\n        else throw new Error(\"wrong parameter\");\n        return this.hV = t(i), this.hV;\n    }, e != null && (this.params = e);\n};\nN(a.asn1.DERInteger, a.asn1.ASN1Object);\na.asn1.DERBitString = function(e) {\n    if (e !== void 0 && typeof e.obj < \"u\") {\n        var t = a.asn1.ASN1Util.newObject(e.obj);\n        e.hex = \"00\" + t.tohex();\n    }\n    a.asn1.DERBitString.superclass.constructor.call(this), this.hT = \"03\", this.setHexValueIncludingUnusedBits = function(r) {\n        this.hTLV = null, this.isModified = !0, this.hV = r;\n    }, this.setUnusedBitsAndHexValue = function(r, i) {\n        if (r < 0 || 7 < r) throw \"unused bits shall be from 0 to 7: u = \" + r;\n        var s = \"0\" + r;\n        this.hTLV = null, this.isModified = !0, this.hV = s + i;\n    }, this.setByBinaryString = function(r) {\n        r = r.replace(/0+$/, \"\");\n        var i = 8 - r.length % 8;\n        i == 8 && (i = 0), r += \"0000000\".substr(0, i);\n        for(var s = \"\", n = 0; n < r.length - 1; n += 8){\n            var h = r.substr(n, 8), u = parseInt(h, 2).toString(16);\n            u.length == 1 && (u = \"0\" + u), s += u;\n        }\n        this.hTLV = null, this.isModified = !0, this.hV = \"0\" + i + s;\n    }, this.setByBooleanArray = function(r) {\n        for(var i = \"\", s = 0; s < r.length; s++)r[s] == !0 ? i += \"1\" : i += \"0\";\n        this.setByBinaryString(i);\n    }, this.newFalseArray = function(r) {\n        for(var i = new Array(r), s = 0; s < r; s++)i[s] = !1;\n        return i;\n    }, this.getFreshValueHex = function() {\n        return this.hV;\n    }, typeof e < \"u\" && (typeof e == \"string\" && e.toLowerCase().match(/^[0-9a-f]+$/) ? this.setHexValueIncludingUnusedBits(e) : typeof e.hex < \"u\" ? this.setHexValueIncludingUnusedBits(e.hex) : typeof e.bin < \"u\" ? this.setByBinaryString(e.bin) : typeof e.array < \"u\" && this.setByBooleanArray(e.array));\n};\nN(a.asn1.DERBitString, a.asn1.ASN1Object);\na.asn1.DEROctetString = function(e) {\n    if (e !== void 0 && typeof e.obj < \"u\") {\n        var t = a.asn1.ASN1Util.newObject(e.obj);\n        e.hex = t.tohex();\n    }\n    a.asn1.DEROctetString.superclass.constructor.call(this, e), this.hT = \"04\";\n};\nN(a.asn1.DEROctetString, a.asn1.DERAbstractString);\na.asn1.DERNull = function() {\n    a.asn1.DERNull.superclass.constructor.call(this), this.hT = \"05\", this.hTLV = \"0500\";\n};\nN(a.asn1.DERNull, a.asn1.ASN1Object);\na.asn1.DERObjectIdentifier = function(e) {\n    a.asn1.DERObjectIdentifier.superclass.constructor.call(this), this.hT = \"06\", this.setValueHex = function(t) {\n        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = t;\n    }, this.setValueOidString = function(t) {\n        var r = mn(t);\n        if (r == null) throw new Error(\"malformed oid string: \" + t);\n        this.hTLV = null, this.isModified = !0, this.s = null, this.hV = r;\n    }, this.setValueName = function(t) {\n        var r = a.asn1.x509.OID.name2oid(t);\n        if (r !== \"\") this.setValueOidString(r);\n        else throw new Error(\"DERObjectIdentifier oidName undefined: \" + t);\n    }, this.setValueNameOrOid = function(t) {\n        t.match(/^[0-2].[0-9.]+$/) ? this.setValueOidString(t) : this.setValueName(t);\n    }, this.getFreshValueHex = function() {\n        return this.hV;\n    }, this.setByParam = function(t) {\n        typeof t == \"string\" ? this.setValueNameOrOid(t) : t.oid !== void 0 ? this.setValueNameOrOid(t.oid) : t.name !== void 0 ? this.setValueNameOrOid(t.name) : t.hex !== void 0 && this.setValueHex(t.hex);\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.DERObjectIdentifier, a.asn1.ASN1Object);\na.asn1.DEREnumerated = function(e) {\n    a.asn1.DEREnumerated.superclass.constructor.call(this), this.hT = \"0a\", this.setByBigInteger = function(t) {\n        this.hTLV = null, this.isModified = !0, this.hV = Ze(t);\n    }, this.setByInteger = function(t) {\n        var r = new R(String(t), 10);\n        this.setByBigInteger(r);\n    }, this.setValueHex = function(t) {\n        this.hV = t;\n    }, this.getFreshValueHex = function() {\n        return this.hV;\n    }, typeof e < \"u\" && (typeof e.int < \"u\" ? this.setByInteger(e.int) : typeof e == \"number\" ? this.setByInteger(e) : typeof e.hex < \"u\" && this.setValueHex(e.hex));\n};\nN(a.asn1.DEREnumerated, a.asn1.ASN1Object);\na.asn1.DERUTF8String = function(e) {\n    a.asn1.DERUTF8String.superclass.constructor.call(this, e), this.hT = \"0c\";\n};\nN(a.asn1.DERUTF8String, a.asn1.DERAbstractString);\na.asn1.DERNumericString = function(e) {\n    a.asn1.DERNumericString.superclass.constructor.call(this, e), this.hT = \"12\";\n};\nN(a.asn1.DERNumericString, a.asn1.DERAbstractString);\na.asn1.DERPrintableString = function(e) {\n    a.asn1.DERPrintableString.superclass.constructor.call(this, e), this.hT = \"13\";\n};\nN(a.asn1.DERPrintableString, a.asn1.DERAbstractString);\na.asn1.DERTeletexString = function(e) {\n    a.asn1.DERTeletexString.superclass.constructor.call(this, e), this.hT = \"14\";\n};\nN(a.asn1.DERTeletexString, a.asn1.DERAbstractString);\na.asn1.DERIA5String = function(e) {\n    a.asn1.DERIA5String.superclass.constructor.call(this, e), this.hT = \"16\";\n};\nN(a.asn1.DERIA5String, a.asn1.DERAbstractString);\na.asn1.DERVisibleString = function(e) {\n    a.asn1.DERIA5String.superclass.constructor.call(this, e), this.hT = \"1a\";\n};\nN(a.asn1.DERVisibleString, a.asn1.DERAbstractString);\na.asn1.DERBMPString = function(e) {\n    a.asn1.DERBMPString.superclass.constructor.call(this, e), this.hT = \"1e\";\n};\nN(a.asn1.DERBMPString, a.asn1.DERAbstractString);\na.asn1.DERUTCTime = function(e) {\n    a.asn1.DERUTCTime.superclass.constructor.call(this, e), this.hT = \"17\", this.params = void 0, this.getFreshValueHex = function() {\n        var t = this.params;\n        if (this.params == null && (t = {\n            date: /* @__PURE__ */ new Date()\n        }), typeof t == \"string\") if (t.match(/^[0-9]{12}Z$/) || t.match(/^[0-9]{12}\\.[0-9]+Z$/)) this.hV = Ee(t);\n        else throw new Error(\"malformed string for UTCTime: \" + t);\n        else if (t.str != null) this.hV = Ee(t.str);\n        else if (t.date == null && t.millis == !0) {\n            var r = /* @__PURE__ */ new Date();\n            this.hV = Ee(this.formatDate(r, \"utc\", !0));\n        } else if (t.date != null && t.date instanceof Date) {\n            var i = t.millis === !0;\n            this.hV = Ee(this.formatDate(t.date, \"utc\", i));\n        } else t instanceof Date && (this.hV = Ee(this.formatDate(t, \"utc\")));\n        if (this.hV == null) throw new Error(\"parameter not specified properly for UTCTime\");\n        return this.hV;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.DERUTCTime, a.asn1.DERAbstractTime);\na.asn1.DERGeneralizedTime = function(e) {\n    a.asn1.DERGeneralizedTime.superclass.constructor.call(this, e), this.hT = \"18\", this.params = e, this.getFreshValueHex = function() {\n        var t = this.params;\n        if (this.params == null && (t = {\n            date: /* @__PURE__ */ new Date()\n        }), typeof t == \"string\") if (t.match(/^[0-9]{14}Z$/) || t.match(/^[0-9]{14}\\.[0-9]+Z$/)) this.hV = Ee(t);\n        else throw new Error(\"malformed string for GeneralizedTime: \" + t);\n        else if (t.str != null) this.hV = Ee(t.str);\n        else if (t.date == null && t.millis == !0) {\n            var r = /* @__PURE__ */ new Date();\n            this.hV = Ee(this.formatDate(r, \"gen\", !0));\n        } else if (t.date != null && t.date instanceof Date) {\n            var i = t.millis === !0;\n            this.hV = Ee(this.formatDate(t.date, \"gen\", i));\n        } else t instanceof Date && (this.hV = Ee(this.formatDate(t, \"gen\")));\n        if (this.hV == null) throw new Error(\"parameter not specified properly for GeneralizedTime\");\n        return this.hV;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.DERGeneralizedTime, a.asn1.DERAbstractTime);\na.asn1.DERSequence = function(e) {\n    a.asn1.DERSequence.superclass.constructor.call(this, e), this.hT = \"30\", this.getFreshValueHex = function() {\n        for(var t = \"\", r = 0; r < this.asn1Array.length; r++){\n            var i = this.asn1Array[r];\n            t += i.tohex();\n        }\n        return this.hV = t, this.hV;\n    };\n};\nN(a.asn1.DERSequence, a.asn1.DERAbstractStructured);\na.asn1.DERSet = function(e) {\n    a.asn1.DERSet.superclass.constructor.call(this, e), this.hT = \"31\", this.sortFlag = !0, this.getFreshValueHex = function() {\n        for(var t = new Array(), r = 0; r < this.asn1Array.length; r++){\n            var i = this.asn1Array[r];\n            t.push(i.tohex());\n        }\n        return this.sortFlag == !0 && t.sort(), this.hV = t.join(\"\"), this.hV;\n    }, typeof e < \"u\" && typeof e.sortflag < \"u\" && e.sortflag == !1 && (this.sortFlag = !1);\n};\nN(a.asn1.DERSet, a.asn1.DERAbstractStructured);\na.asn1.DERTaggedObject = function(e) {\n    a.asn1.DERTaggedObject.superclass.constructor.call(this);\n    var t = a.asn1, r = V, i = r.getV;\n    r.isASN1HEX;\n    var s = t.ASN1Util.newObject;\n    this.hT = \"a0\", this.hV = \"\", this.isExplicit = !0, this.asn1Object = null, this.params = {\n        tag: \"a0\",\n        explicit: !0\n    }, this.setASN1Object = function(n, h, u) {\n        this.params = {\n            tag: h,\n            explicit: n,\n            obj: u\n        };\n    }, this.getFreshValueHex = function() {\n        var n = this.params;\n        if (n.explicit == null && (n.explicit = !0), n.tage != null && (n.tag = n.tage, n.explicit = !0), n.tagi != null && (n.tag = n.tagi, n.explicit = !1), n.str != null) this.hV = ht(n.str);\n        else if (n.hex != null) this.hV = n.hex;\n        else if (n.obj != null) {\n            var h;\n            n.obj instanceof t.ASN1Object ? h = n.obj.tohex() : typeof n.obj == \"object\" && (h = s(n.obj).tohex()), n.explicit ? this.hV = h : this.hV = i(h, 0);\n        } else throw new Error(\"str, hex nor obj not specified\");\n        return n.tag == null && (n.tag = \"a0\"), this.hT = n.tag, this.hTLV = null, this.isModified = !0, this.hV;\n    }, this.setByParam = function(n) {\n        this.params = n;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.DERTaggedObject, a.asn1.ASN1Object);\nvar V = new function() {}();\nV.getLblen = function(e, t) {\n    if (e.substr(t + 2, 1) != \"8\") return 1;\n    var r = parseInt(e.substr(t + 3, 1));\n    return r == 0 ? -1 : 0 < r && r < 10 ? r + 1 : -2;\n};\nV.getL = function(e, t) {\n    var r = V.getLblen(e, t);\n    return r < 1 ? \"\" : e.substr(t + 2, r * 2);\n};\nV.getVblen = function(e, t) {\n    var r, i;\n    return r = V.getL(e, t), r == \"\" ? -1 : (r.substr(0, 1) === \"8\" ? i = new R(r.substr(2), 16) : i = new R(r, 16), i.intValue());\n};\nV.getVidx = function(e, t) {\n    var r = V.getLblen(e, t);\n    return r < 0 ? r : t + (r + 1) * 2;\n};\nV.getV = function(e, t) {\n    var r = V.getVidx(e, t), i = V.getVblen(e, t);\n    return e.substr(r, i * 2);\n};\nV.getTLV = function(e, t) {\n    return e.substr(t, 2) + V.getL(e, t) + V.getV(e, t);\n};\nV.getTLVblen = function(e, t) {\n    return 2 + V.getLblen(e, t) * 2 + V.getVblen(e, t) * 2;\n};\nV.getNextSiblingIdx = function(e, t) {\n    var r = V.getVidx(e, t), i = V.getVblen(e, t);\n    return r + i * 2;\n};\nV.getChildIdx = function(e, t) {\n    var r = V, i = [], s, n, h;\n    s = r.getVidx(e, t), n = r.getVblen(e, t) * 2, e.substr(t, 2) == \"03\" && (s += 2, n -= 2), h = 0;\n    for(var u = s; h <= n;){\n        var p = r.getTLVblen(e, u);\n        if (h += p, h <= n && i.push(u), u += p, h >= n) break;\n    }\n    return i;\n};\nV.getNthChildIdx = function(e, t, r) {\n    var i = V.getChildIdx(e, t);\n    return i[r];\n};\nV.getIdxbyList = function(e, t, r, i) {\n    var s = V, n, h;\n    return r.length == 0 ? i !== void 0 && e.substr(t, 2) !== i ? -1 : t : (n = r.shift(), h = s.getChildIdx(e, t), n >= h.length ? -1 : s.getIdxbyList(e, h[n], r, i));\n};\nV.getIdxbyListEx = function(e, t, r, i) {\n    var s = V, n, h;\n    if (r.length == 0) return i !== void 0 && e.substr(t, 2) !== i ? -1 : t;\n    n = r.shift(), h = s.getChildIdx(e, t);\n    for(var u = 0, p = 0; p < h.length; p++){\n        var c = e.substr(h[p], 2);\n        if (typeof n == \"number\" && !s.isContextTag(c) && u == n || typeof n == \"string\" && s.isContextTag(c, n)) return s.getIdxbyListEx(e, h[p], r, i);\n        s.isContextTag(c) || u++;\n    }\n    return -1;\n};\nV.getTLVbyList = function(e, t, r, i) {\n    var s = V, n = s.getIdxbyList(e, t, r, i);\n    return n == -1 || n >= e.length ? null : s.getTLV(e, n);\n};\nV.getTLVbyListEx = function(e, t, r, i) {\n    var s = V, n = s.getIdxbyListEx(e, t, r, i);\n    return n == -1 ? null : s.getTLV(e, n);\n};\nV.getVbyList = function(e, t, r, i, s) {\n    var n = V, h, u;\n    return h = n.getIdxbyList(e, t, r, i), h == -1 || h >= e.length ? null : (u = n.getV(e, h), s === !0 && (u = u.substr(2)), u);\n};\nV.getVbyListEx = function(e, t, r, i, s) {\n    var n = V, h, u;\n    return h = n.getIdxbyListEx(e, t, r, i), h == -1 ? null : (u = n.getV(e, h), e.substr(h, 2) == \"03\" && s !== !1 && (u = u.substr(2)), u);\n};\nV.getInt = function(e, t, r) {\n    r == null && (r = -1);\n    try {\n        var i = e.substr(t, 2);\n        if (i != \"02\" && i != \"03\") return r;\n        var s = V.getV(e, t);\n        return i == \"02\" ? parseInt(s, 16) : Sn(s);\n    } catch  {\n        return r;\n    }\n};\nV.getOID = function(e, t, r) {\n    r == null && (r = null);\n    try {\n        if (e.substr(t, 2) != \"06\") return r;\n        var i = V.getV(e, t);\n        return ft(i);\n    } catch  {\n        return r;\n    }\n};\nV.getOIDName = function(e, t, r) {\n    r == null && (r = null);\n    try {\n        var i = V.getOID(e, t, r);\n        if (i == r) return r;\n        var s = a.asn1.x509.OID.oid2name(i);\n        return s == \"\" ? i : s;\n    } catch  {\n        return r;\n    }\n};\nV.getString = function(e, t, r) {\n    r == null && (r = null);\n    try {\n        var i = V.getV(e, t);\n        return Ae(i);\n    } catch  {\n        return r;\n    }\n};\nV.hextooidstr = function(e) {\n    var t = function(v, o) {\n        return v.length >= o ? v : new Array(o - v.length + 1).join(\"0\") + v;\n    }, r = [], i = e.substr(0, 2), s = parseInt(i, 16);\n    r[0] = new String(Math.floor(s / 40)), r[1] = new String(s % 40);\n    for(var n = e.substr(2), h = [], u = 0; u < n.length / 2; u++)h.push(parseInt(n.substr(u * 2, 2), 16));\n    for(var p = [], c = \"\", u = 0; u < h.length; u++)h[u] & 128 ? c = c + t((h[u] & 127).toString(2), 7) : (c = c + t((h[u] & 127).toString(2), 7), p.push(new String(parseInt(c, 2))), c = \"\");\n    var y = r.join(\".\");\n    return p.length > 0 && (y = y + \".\" + p.join(\".\")), y;\n};\nV.dump = function(e, t, r, i) {\n    var s = V, n = s.getV, h = s.dump, u = s.getChildIdx, p = e;\n    e instanceof a.asn1.ASN1Object && (p = e.tohex());\n    var c = function(E, w) {\n        if (E.length <= w * 2) return E;\n        var x = E.substr(0, w) + \"..(total \" + E.length / 2 + \"bytes)..\" + E.substr(E.length - w, w);\n        return x;\n    };\n    t === void 0 && (t = {\n        ommit_long_octet: 32\n    }), r === void 0 && (r = 0), i === void 0 && (i = \"\");\n    var y = t.ommit_long_octet, I = p.substr(r, 2);\n    if (I == \"01\") {\n        var v = n(p, r);\n        return v == \"00\" ? i + `BOOLEAN FALSE\n` : i + `BOOLEAN TRUE\n`;\n    }\n    if (I == \"02\") {\n        var v = n(p, r);\n        return i + \"INTEGER \" + c(v, y) + `\n`;\n    }\n    if (I == \"03\") {\n        var v = n(p, r);\n        if (s.isASN1HEX(v.substr(2))) {\n            var o = i + `BITSTRING, encapsulates\n`;\n            return o = o + h(v.substr(2), t, 0, i + \"  \"), o;\n        } else return i + \"BITSTRING \" + c(v, y) + `\n`;\n    }\n    if (I == \"04\") {\n        var v = n(p, r);\n        if (s.isASN1HEX(v)) {\n            var o = i + `OCTETSTRING, encapsulates\n`;\n            return o = o + h(v, t, 0, i + \"  \"), o;\n        } else return i + \"OCTETSTRING \" + c(v, y) + `\n`;\n    }\n    if (I == \"05\") return i + `NULL\n`;\n    if (I == \"06\") {\n        var l = n(p, r), f = a.asn1.ASN1Util.oidHexToInt(l), d = a.asn1.x509.OID.oid2name(f), g = f.replace(/\\./g, \" \");\n        return d != \"\" ? i + \"ObjectIdentifier \" + d + \" (\" + g + `)\n` : i + \"ObjectIdentifier (\" + g + `)\n`;\n    }\n    if (I == \"0a\") return i + \"ENUMERATED \" + parseInt(n(p, r)) + `\n`;\n    if (I == \"0c\") return i + \"UTF8String '\" + W(n(p, r)) + `'\n`;\n    if (I == \"13\") return i + \"PrintableString '\" + W(n(p, r)) + `'\n`;\n    if (I == \"14\") return i + \"TeletexString '\" + W(n(p, r)) + `'\n`;\n    if (I == \"16\") return i + \"IA5String '\" + W(n(p, r)) + `'\n`;\n    if (I == \"17\") return i + \"UTCTime \" + W(n(p, r)) + `\n`;\n    if (I == \"18\") return i + \"GeneralizedTime \" + W(n(p, r)) + `\n`;\n    if (I == \"1a\") return i + \"VisualString '\" + W(n(p, r)) + `'\n`;\n    if (I == \"1e\") return i + \"BMPString '\" + Tt(n(p, r)) + `'\n`;\n    if (I == \"30\") {\n        if (p.substr(r, 4) == \"3000\") return i + `SEQUENCE {}\n`;\n        var o = i + `SEQUENCE\n`, S = u(p, r), b = t;\n        if ((S.length == 2 || S.length == 3) && p.substr(S[0], 2) == \"06\" && p.substr(S[S.length - 1], 2) == \"04\") {\n            var d = s.oidname(n(p, S[0])), D = JSON.parse(JSON.stringify(t));\n            D.x509ExtName = d, b = D;\n        }\n        for(var A = 0; A < S.length; A++)o = o + h(p, b, S[A], i + \"  \");\n        return o;\n    }\n    if (I == \"31\") {\n        for(var o = i + `SET\n`, S = u(p, r), A = 0; A < S.length; A++)o = o + h(p, t, S[A], i + \"  \");\n        return o;\n    }\n    var I = parseInt(I, 16);\n    if (I & 128) {\n        var m = I & 31;\n        if (I & 32) {\n            for(var o = i + \"[\" + m + `]\n`, S = u(p, r), A = 0; A < S.length; A++)o = o + h(p, t, S[A], i + \"  \");\n            return o;\n        } else {\n            var v = n(p, r);\n            if (V.isASN1HEX(v)) {\n                var o = i + \"[\" + m + `]\n`;\n                return o = o + h(v, t, 0, i + \"  \"), o;\n            } else (v.substr(0, 8) == \"68747470\" || t.x509ExtName === \"subjectAltName\" && m == 2) && (v = W(v));\n            var o = i + \"[\" + m + \"] \" + v + `\n`;\n            return o;\n        }\n    }\n    return i + \"UNKNOWN(\" + I + \") \" + n(p, r) + `\n`;\n};\nV.parse = function(e) {\n    var t = V, r = t.parse, i = t.isASN1HEX, s = t.getV, n = t.getTLV, h = t.getChildIdx, u = a.asn1, p = u.ASN1Util.oidHexToInt, c = u.x509.OID.oid2name, y = W, v = Tt, o = fn, l = {\n        \"0c\": \"utf8str\",\n        12: \"numstr\",\n        13: \"prnstr\",\n        14: \"telstr\",\n        16: \"ia5str\",\n        17: \"utctime\",\n        18: \"gentime\",\n        \"1a\": \"visstr\",\n        \"1e\": \"bmpstr\",\n        30: \"seq\",\n        31: \"set\"\n    }, f = function(x) {\n        for(var F = [], P = h(x, 0), T = 0; T < P.length; T++){\n            var H = P[T], C = n(x, H), B = r(C);\n            F.push(B);\n        }\n        return F;\n    }, d = e.substr(0, 2), g = {}, S = s(e, 0);\n    if (d == \"01\") return e == \"0101ff\" ? {\n        bool: !0\n    } : {\n        bool: !1\n    };\n    if (d == \"02\") return {\n        int: {\n            hex: S\n        }\n    };\n    if (d == \"03\") try {\n        if (S.substr(0, 2) != \"00\") throw \"not encap\";\n        var b = S.substr(2);\n        if (!i(b)) throw \"not encap\";\n        return {\n            bitstr: {\n                obj: r(b)\n            }\n        };\n    } catch  {\n        var D = null;\n        return S.length <= 10 && (D = En(S)), D == null ? {\n            bitstr: {\n                hex: S\n            }\n        } : {\n            bitstr: {\n                bin: D\n            }\n        };\n    }\n    else if (d == \"04\") try {\n        if (!i(S)) throw \"not encap\";\n        return {\n            octstr: {\n                obj: r(S)\n            }\n        };\n    } catch  {\n        return {\n            octstr: {\n                hex: S\n            }\n        };\n    }\n    else {\n        if (d == \"05\") return {\n            null: \"\"\n        };\n        if (d == \"06\") {\n            var A = p(S), I = c(A);\n            return I == \"\" ? {\n                oid: A\n            } : {\n                oid: I\n            };\n        } else {\n            if (d == \"0a\") return S.length > 4 ? {\n                enum: {\n                    hex: S\n                }\n            } : {\n                enum: parseInt(S, 16)\n            };\n            if (d == \"30\" || d == \"31\") return g[l[d]] = f(e), g;\n            if (d == \"14\") {\n                var m = o(S);\n                return g[l[d]] = {\n                    str: m\n                }, g;\n            } else if (d == \"1e\") {\n                var m = v(S);\n                return g[l[d]] = {\n                    str: m\n                }, g;\n            } else if (\":0c:12:13:16:17:18:1a:\".indexOf(d) != -1) {\n                var m = y(S);\n                return g[l[d]] = {\n                    str: m\n                }, g;\n            } else if (d.match(/^8[0-9]$/)) {\n                var m = y(S);\n                return m == null | m == \"\" ? {\n                    tag: {\n                        tag: d,\n                        explicit: !1,\n                        hex: S\n                    }\n                } : m.match(/[\\x00-\\x1F\\x7F-\\x9F]/) != null || m.match(/[\\u0000-\\u001F\\u0080–\\u009F]/) != null ? {\n                    tag: {\n                        tag: d,\n                        explicit: !1,\n                        hex: S\n                    }\n                } : {\n                    tag: {\n                        tag: d,\n                        explicit: !1,\n                        str: m\n                    }\n                };\n            } else if (d.match(/^a[0-9]$/)) try {\n                if (!i(S)) throw new Error(\"not encap\");\n                return {\n                    tag: {\n                        tag: d,\n                        explicit: !0,\n                        obj: r(S)\n                    }\n                };\n            } catch  {\n                return {\n                    tag: {\n                        tag: d,\n                        explicit: !0,\n                        hex: S\n                    }\n                };\n            }\n            else {\n                var E = new a.asn1.ASN1Object();\n                E.hV = S;\n                var w = E.getLengthHexFromValue();\n                return {\n                    asn1: {\n                        tlv: d + w + S\n                    }\n                };\n            }\n        }\n    }\n};\nV.isContextTag = function(e, t) {\n    e = e.toLowerCase();\n    var r, i;\n    try {\n        r = parseInt(e, 16);\n    } catch  {\n        return -1;\n    }\n    if (t === void 0) return (r & 192) == 128;\n    try {\n        var s = t.match(/^\\[[0-9]+\\]$/);\n        return s == null || (i = parseInt(t.substr(1, t.length - 1), 10), i > 31) ? !1 : (r & 192) == 128 && (r & 31) == i;\n    } catch  {\n        return !1;\n    }\n};\nV.isASN1HEX = function(e) {\n    var t = V;\n    if (e.length % 2 == 1) return !1;\n    var r = t.getVblen(e, 0), i = e.substr(0, 2), s = t.getL(e, 0), n = e.length - i.length - s.length;\n    return n == r * 2;\n};\nV.checkStrictDER = function(e, t, r, i, s) {\n    var n = V;\n    if (r === void 0) {\n        if (typeof e != \"string\") throw new Error(\"not hex string\");\n        if (e = e.toLowerCase(), !a.lang.String.isHex(e)) throw new Error(\"not hex string\");\n        r = e.length, i = e.length / 2, i < 128 ? s = 1 : s = Math.ceil(i.toString(16)) + 1;\n    }\n    var h = n.getL(e, t);\n    if (h.length > s * 2) throw new Error(\"L of TLV too long: idx=\" + t);\n    var u = n.getVblen(e, t);\n    if (u > i) throw new Error(\"value of L too long than hex: idx=\" + t);\n    var p = n.getTLV(e, t), c = p.length - 2 - n.getL(e, t).length;\n    if (c !== u * 2) throw new Error(\"V string length and L's value not the same:\" + c + \"/\" + u * 2);\n    if (t === 0 && e.length != p.length) throw new Error(\"total length and TLV length unmatch:\" + e.length + \"!=\" + p.length);\n    var y = e.substr(t, 2);\n    if (y === \"02\") {\n        var v = n.getVidx(e, t);\n        if (e.substr(v, 2) == \"00\" && e.charCodeAt(v + 2) < 56) throw new Error(\"not least zeros for DER INTEGER\");\n    }\n    if (parseInt(y, 16) & 32) {\n        for(var o = n.getVblen(e, t), l = 0, f = n.getChildIdx(e, t), d = 0; d < f.length; d++){\n            var g = n.getTLV(e, f[d]);\n            l += g.length, n.checkStrictDER(e, f[d], r, i, s);\n        }\n        if (o * 2 != l) throw new Error(\"sum of children's TLV length and L unmatch: \" + o * 2 + \"!=\" + l);\n    }\n};\nV.oidname = function(e) {\n    var t = a.asn1;\n    a.lang.String.isHex(e) && (e = t.ASN1Util.oidHexToInt(e));\n    var r = t.x509.OID.oid2name(e);\n    return r === \"\" && (r = e), r;\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\n(typeof a.asn1.x509 > \"u\" || !a.asn1.x509) && (a.asn1.x509 = {});\na.asn1.x509.Certificate = function(e) {\n    a.asn1.x509.Certificate.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERBitString, s = r.DERSequence, n = r.x509, h = n.TBSCertificate, u = n.AlgorithmIdentifier;\n    this.params = void 0, this.setByParam = function(p) {\n        this.params = p;\n    }, this.sign = function() {\n        var p = this.params, c = p.sigalg;\n        p.sigalg.name != null && (c = p.sigalg.name);\n        var y = p.tbsobj.tohex(), v = new a.crypto.Signature({\n            alg: c\n        });\n        v.init(p.cakey), v.updateHex(y), p.sighex = v.sign();\n    }, this.getPEM = function() {\n        return de(this.tohex(), \"CERTIFICATE\");\n    }, this.tohex = function() {\n        var p = this.params;\n        if ((p.tbsobj == null || p.tbsobj == null) && (p.tbsobj = new h(p)), p.sighex == null && p.cakey != null && this.sign(), p.sighex == null) throw new Error(\"sighex or cakey parameter not defined\");\n        var c = [];\n        c.push(p.tbsobj), c.push(new u({\n            name: p.sigalg\n        })), c.push(new i({\n            hex: \"00\" + p.sighex\n        }));\n        var y = new s({\n            array: c\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && (this.params = e);\n};\nN(a.asn1.x509.Certificate, a.asn1.ASN1Object);\na.asn1.x509.TBSCertificate = function(e) {\n    a.asn1.x509.TBSCertificate.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.x509, s = r.DERTaggedObject, n = r.DERInteger, h = r.DERSequence, u = i.AlgorithmIdentifier, p = i.Time, c = i.X500Name, y = i.Extensions, v = i.SubjectPublicKeyInfo;\n    this.params = null, this.setByParam = function(o) {\n        this.params = o;\n    }, this.tohex = function() {\n        var o = [], l = this.params;\n        if (l.version != null || l.version != 1) {\n            var f = 2;\n            l.version != null && (f = l.version - 1);\n            var d = new s({\n                obj: new n({\n                    int: f\n                })\n            });\n            o.push(d);\n        }\n        o.push(new n(l.serial)), o.push(new u({\n            name: l.sigalg\n        })), o.push(new c(l.issuer)), o.push(new h({\n            array: [\n                new p(l.notbefore),\n                new p(l.notafter)\n            ]\n        })), o.push(new c(l.subject)), o.push(new v(k.getKey(l.sbjpubkey))), l.ext !== void 0 && l.ext.length > 0 && o.push(new s({\n            tag: \"a3\",\n            obj: new y(l.ext)\n        }));\n        var g = new a.asn1.DERSequence({\n            array: o\n        });\n        return g.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.TBSCertificate, a.asn1.ASN1Object);\na.asn1.x509.Extensions = function(e) {\n    a.asn1.x509.Extensions.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.x509;\n    this.aParam = [], this.setByParam = function(n) {\n        this.aParam = n;\n    }, this.tohex = function() {\n        for(var n = [], h = 0; h < this.aParam.length; h++){\n            var u = this.aParam[h], p = u.extname, c = null;\n            if (u.extn != null) c = new s.PrivateExtension(u);\n            else if (p == \"subjectKeyIdentifier\") c = new s.SubjectKeyIdentifier(u);\n            else if (p == \"keyUsage\") c = new s.KeyUsage(u);\n            else if (p == \"subjectAltName\") c = new s.SubjectAltName(u);\n            else if (p == \"issuerAltName\") c = new s.IssuerAltName(u);\n            else if (p == \"basicConstraints\") c = new s.BasicConstraints(u);\n            else if (p == \"nameConstraints\") c = new s.NameConstraints(u);\n            else if (p == \"cRLDistributionPoints\") c = new s.CRLDistributionPoints(u);\n            else if (p == \"certificatePolicies\") c = new s.CertificatePolicies(u);\n            else if (p == \"policyMappings\") c = new s.PolicyMappings(u);\n            else if (p == \"policyConstraints\") c = new s.PolicyConstraints(u);\n            else if (p == \"inhibitAnyPolicy\") c = new s.InhibitAnyPolicy(u);\n            else if (p == \"authorityKeyIdentifier\") c = new s.AuthorityKeyIdentifier(u);\n            else if (p == \"extKeyUsage\") c = new s.ExtKeyUsage(u);\n            else if (p == \"authorityInfoAccess\") c = new s.AuthorityInfoAccess(u);\n            else if (p == \"cRLNumber\") c = new s.CRLNumber(u);\n            else if (p == \"cRLReason\") c = new s.CRLReason(u);\n            else if (p == \"ocspNonce\") c = new s.OCSPNonce(u);\n            else if (p == \"ocspNoCheck\") c = new s.OCSPNoCheck(u);\n            else if (p == \"adobeTimeStamp\") c = new s.AdobeTimeStamp(u);\n            else if (p == \"subjectDirectoryAttributes\") c = new s.SubjectDirectoryAttributes(u);\n            else throw new Error(\"extension not supported:\" + JSON.stringify(u));\n            c != null && n.push(c);\n        }\n        var y = new i({\n            array: n\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.x509.Extensions, a.asn1.ASN1Object);\na.asn1.x509.Extension = function(e) {\n    a.asn1.x509.Extension.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERObjectIdentifier, s = r.DEROctetString;\n    r.DERBitString;\n    var n = r.DERBoolean, h = r.DERSequence;\n    this.tohex = function() {\n        var u = new i({\n            oid: this.oid\n        }), p = new s({\n            hex: this.getExtnValueHex()\n        }), c = new Array();\n        c.push(u), this.critical && c.push(new n()), c.push(p);\n        var y = new h({\n            array: c\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.critical = !1, e !== void 0 && e.critical !== void 0 && (this.critical = e.critical);\n};\nN(a.asn1.x509.Extension, a.asn1.ASN1Object);\na.asn1.x509.KeyUsage = function(e) {\n    a.asn1.x509.KeyUsage.superclass.constructor.call(this, e);\n    var t = Error, r = {\n        digitalSignature: 0,\n        nonRepudiation: 1,\n        keyEncipherment: 2,\n        dataEncipherment: 3,\n        keyAgreement: 4,\n        keyCertSign: 5,\n        cRLSign: 6,\n        encipherOnly: 7,\n        decipherOnly: 8\n    };\n    this.getExtnValueHex = function() {\n        var i = this.getBinValue();\n        return this.asn1ExtnValue = new a.asn1.DERBitString({\n            bin: i\n        }), this.asn1ExtnValue.tohex();\n    }, this.getBinValue = function() {\n        var i = this.params;\n        if (typeof i != \"object\" || typeof i.names != \"object\" && typeof i.bin != \"string\") throw new t(\"parameter not yet set\");\n        if (i.names != null) return rt(i.names, r);\n        if (i.bin != null) return i.bin;\n        throw new t(\"parameter not set properly\");\n    }, this.oid = \"2.5.29.15\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.KeyUsage, a.asn1.x509.Extension);\na.asn1.x509.BasicConstraints = function(e) {\n    a.asn1.x509.BasicConstraints.superclass.constructor.call(this, e);\n    var t = a.asn1, r = t.DERBoolean, i = t.DERInteger, s = t.DERSequence;\n    this.getExtnValueHex = function() {\n        var n = new Array();\n        this.cA && n.push(new r()), this.pathLen > -1 && n.push(new i({\n            int: this.pathLen\n        }));\n        var h = new s({\n            array: n\n        });\n        return this.asn1ExtnValue = h, this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.19\", this.cA = !1, this.pathLen = -1, e !== void 0 && (e.cA !== void 0 && (this.cA = e.cA), e.pathLen !== void 0 && (this.pathLen = e.pathLen));\n};\nN(a.asn1.x509.BasicConstraints, a.asn1.x509.Extension);\na.asn1.x509.CRLDistributionPoints = function(e) {\n    a.asn1.x509.CRLDistributionPoints.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.x509;\n    this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n    }, this.setByDPArray = function(s) {\n        for(var n = [], h = 0; h < s.length; h++)if (s[h] instanceof a.asn1.ASN1Object) n.push(s[h]);\n        else {\n            var u = new i.DistributionPoint(s[h]);\n            n.push(u);\n        }\n        this.asn1ExtnValue = new r.DERSequence({\n            array: n\n        });\n    }, this.setByOneURI = function(s) {\n        var n = new i.DistributionPoint({\n            fulluri: s\n        });\n        this.setByDPArray([\n            n\n        ]);\n    }, this.oid = \"2.5.29.31\", e !== void 0 && (e.array !== void 0 ? this.setByDPArray(e.array) : e.uri !== void 0 && this.setByOneURI(e.uri));\n};\nN(a.asn1.x509.CRLDistributionPoints, a.asn1.x509.Extension);\na.asn1.x509.DistributionPoint = function(e) {\n    a.asn1.x509.DistributionPoint.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.x509.DistributionPointName;\n    this.tohex = function() {\n        var s = new r.DERSequence();\n        if (this.asn1DP != null) {\n            var n = new r.DERTaggedObject({\n                explicit: !0,\n                tag: \"a0\",\n                obj: this.asn1DP\n            });\n            s.appendASN1Object(n);\n        }\n        return this.hTLV = s.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (e.dpobj !== void 0 ? this.asn1DP = e.dpobj : e.dpname !== void 0 ? this.asn1DP = new i(e.dpname) : e.fulluri !== void 0 && (this.asn1DP = new i({\n        full: [\n            {\n                uri: e.fulluri\n            }\n        ]\n    })));\n};\nN(a.asn1.x509.DistributionPoint, a.asn1.ASN1Object);\na.asn1.x509.DistributionPointName = function(e) {\n    a.asn1.x509.DistributionPointName.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERTaggedObject;\n    if (this.tohex = function() {\n        if (this.type != \"full\") throw new Error(\"currently type shall be 'full': \" + this.type);\n        return this.asn1Obj = new i({\n            explicit: !1,\n            tag: this.tag,\n            obj: this.asn1V\n        }), this.hTLV = this.asn1Obj.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0) if (r.x509.GeneralNames.prototype.isPrototypeOf(e)) this.type = \"full\", this.tag = \"a0\", this.asn1V = e;\n    else if (e.full !== void 0) this.type = \"full\", this.tag = \"a0\", this.asn1V = new r.x509.GeneralNames(e.full);\n    else throw new Error(\"This class supports GeneralNames only as argument\");\n};\nN(a.asn1.x509.DistributionPointName, a.asn1.ASN1Object);\na.asn1.x509.CertificatePolicies = function(e) {\n    a.asn1.x509.CertificatePolicies.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.x509, s = r.DERSequence, n = i.PolicyInformation;\n    this.params = null, this.getExtnValueHex = function() {\n        for(var h = [], u = 0; u < this.params.array.length; u++)h.push(new n(this.params.array[u]));\n        var p = new s({\n            array: h\n        });\n        return this.asn1ExtnValue = p, this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.32\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.CertificatePolicies, a.asn1.x509.Extension);\na.asn1.x509.PolicyInformation = function(e) {\n    a.asn1.x509.PolicyInformation.superclass.constructor.call(this, e);\n    var t = a.asn1, r = t.DERSequence, i = t.DERObjectIdentifier, s = t.x509.PolicyQualifierInfo;\n    this.params = null, this.tohex = function() {\n        if (this.params.policyoid === void 0 && this.params.array === void 0) throw new Error(\"parameter oid and array missing\");\n        var n = [\n            new i(this.params.policyoid)\n        ];\n        if (this.params.array !== void 0) {\n            for(var h = [], u = 0; u < this.params.array.length; u++)h.push(new s(this.params.array[u]));\n            h.length > 0 && n.push(new r({\n                array: h\n            }));\n        }\n        var p = new r({\n            array: n\n        });\n        return p.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.PolicyInformation, a.asn1.ASN1Object);\na.asn1.x509.PolicyQualifierInfo = function(e) {\n    a.asn1.x509.PolicyQualifierInfo.superclass.constructor.call(this, e);\n    var t = a.asn1, r = t.DERSequence, i = t.DERIA5String, s = t.DERObjectIdentifier, n = t.x509.UserNotice;\n    this.params = null, this.tohex = function() {\n        if (this.params.cps !== void 0) {\n            var h = new r({\n                array: [\n                    new s({\n                        oid: \"1.3.6.1.5.5.7.2.1\"\n                    }),\n                    new i({\n                        str: this.params.cps\n                    })\n                ]\n            });\n            return h.tohex();\n        }\n        if (this.params.unotice != null) {\n            var h = new r({\n                array: [\n                    new s({\n                        oid: \"1.3.6.1.5.5.7.2.2\"\n                    }),\n                    new n(this.params.unotice)\n                ]\n            });\n            return h.tohex();\n        }\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.PolicyQualifierInfo, a.asn1.ASN1Object);\na.asn1.x509.UserNotice = function(e) {\n    a.asn1.x509.UserNotice.superclass.constructor.call(this, e);\n    var t = a.asn1.DERSequence;\n    a.asn1.DERInteger;\n    var r = a.asn1.x509.DisplayText, i = a.asn1.x509.NoticeReference;\n    this.params = null, this.tohex = function() {\n        var s = [];\n        this.params.noticeref !== void 0 && s.push(new i(this.params.noticeref)), this.params.exptext !== void 0 && s.push(new r(this.params.exptext));\n        var n = new t({\n            array: s\n        });\n        return n.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.UserNotice, a.asn1.ASN1Object);\na.asn1.x509.NoticeReference = function(e) {\n    a.asn1.x509.NoticeReference.superclass.constructor.call(this, e);\n    var t = a.asn1.DERSequence, r = a.asn1.DERInteger, i = a.asn1.x509.DisplayText;\n    this.params = null, this.tohex = function() {\n        var s = [];\n        if (this.params.org !== void 0 && s.push(new i(this.params.org)), this.params.noticenum !== void 0) {\n            for(var n = [], h = this.params.noticenum, u = 0; u < h.length; u++)n.push(new r(h[u]));\n            s.push(new t({\n                array: n\n            }));\n        }\n        if (s.length == 0) throw new Error(\"parameter is empty\");\n        var p = new t({\n            array: s\n        });\n        return p.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.NoticeReference, a.asn1.ASN1Object);\na.asn1.x509.DisplayText = function(e) {\n    a.asn1.x509.DisplayText.superclass.constructor.call(this, e), this.hT = \"0c\", e !== void 0 && (e.type === \"ia5\" ? this.hT = \"16\" : e.type === \"vis\" ? this.hT = \"1a\" : e.type === \"bmp\" && (this.hT = \"1e\"));\n};\nN(a.asn1.x509.DisplayText, a.asn1.DERAbstractString);\na.asn1.x509.PolicyMappings = function(e) {\n    a.asn1.x509.PolicyMappings.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1;\n    r.x509;\n    var i = r.ASN1Util.newObject;\n    this.params = null, this.getExtnValueHex = function() {\n        for(var s = this.params, n = [], h = 0; h < s.array.length; h++){\n            var u = s.array[h];\n            n.push({\n                seq: [\n                    {\n                        oid: u[0]\n                    },\n                    {\n                        oid: u[1]\n                    }\n                ]\n            });\n        }\n        return this.asn1ExtnValue = i({\n            seq: n\n        }), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.33\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.PolicyMappings, a.asn1.x509.Extension);\na.asn1.x509.PolicyConstraints = function(e) {\n    a.asn1.x509.PolicyConstraints.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1;\n    r.x509;\n    var i = r.ASN1Util.newObject;\n    this.params = null, this.getExtnValueHex = function() {\n        var s = this.params, n = [];\n        return s.reqexp != null && n.push({\n            tag: {\n                tagi: \"80\",\n                obj: {\n                    int: s.reqexp\n                }\n            }\n        }), s.inhibit != null && n.push({\n            tag: {\n                tagi: \"81\",\n                obj: {\n                    int: s.inhibit\n                }\n            }\n        }), this.asn1ExtnValue = i({\n            seq: n\n        }), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.36\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.PolicyConstraints, a.asn1.x509.Extension);\na.asn1.x509.InhibitAnyPolicy = function(e) {\n    a.asn1.x509.InhibitAnyPolicy.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1;\n    r.x509;\n    var i = r.ASN1Util.newObject;\n    this.params = null, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = i({\n            int: this.params.skip\n        }), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.54\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.InhibitAnyPolicy, a.asn1.x509.Extension);\na.asn1.x509.NameConstraints = function(e) {\n    a.asn1.x509.NameConstraints.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.x509, s = r.ASN1Util.newObject, n = i.GeneralSubtree;\n    this.params = null, this.getExtnValueHex = function() {\n        var h = this.params, u = [];\n        if (h.permit != null && h.permit.length != null) {\n            for(var p = [], c = 0; c < h.permit.length; c++)p.push(new n(h.permit[c]));\n            u.push({\n                tag: {\n                    tagi: \"a0\",\n                    obj: {\n                        seq: p\n                    }\n                }\n            });\n        }\n        if (h.exclude != null && h.exclude.length != null) {\n            for(var y = [], c = 0; c < h.exclude.length; c++)y.push(new n(h.exclude[c]));\n            u.push({\n                tag: {\n                    tagi: \"a1\",\n                    obj: {\n                        seq: y\n                    }\n                }\n            });\n        }\n        return this.asn1ExtnValue = s({\n            seq: u\n        }), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.30\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.NameConstraints, a.asn1.x509.Extension);\na.asn1.x509.GeneralSubtree = function(e) {\n    a.asn1.x509.GeneralSubtree.superclass.constructor.call(this);\n    var t = a.asn1, r = t.x509, i = r.GeneralName, s = t.ASN1Util.newObject;\n    this.params = null, this.setByParam = function(n) {\n        this.params = n;\n    }, this.tohex = function() {\n        var n = this.params, h = [\n            new i(n)\n        ];\n        n.min != null && h.push({\n            tag: {\n                tagi: \"80\",\n                obj: {\n                    int: n.min\n                }\n            }\n        }), n.max != null && h.push({\n            tag: {\n                tagi: \"81\",\n                obj: {\n                    int: n.max\n                }\n            }\n        });\n        var u = s({\n            seq: h\n        });\n        return u.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.GeneralSubtree, a.asn1.ASN1Object);\na.asn1.x509.ExtKeyUsage = function(e) {\n    a.asn1.x509.ExtKeyUsage.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1;\n    this.setPurposeArray = function(i) {\n        this.asn1ExtnValue = new r.DERSequence();\n        for(var s = 0; s < i.length; s++){\n            var n = new r.DERObjectIdentifier(i[s]);\n            this.asn1ExtnValue.appendASN1Object(n);\n        }\n    }, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.37\", e !== void 0 && e.array !== void 0 && this.setPurposeArray(e.array);\n};\nN(a.asn1.x509.ExtKeyUsage, a.asn1.x509.Extension);\na.asn1.x509.AuthorityKeyIdentifier = function(e) {\n    a.asn1.x509.AuthorityKeyIdentifier.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.DERTaggedObject, s = r.x509.GeneralNames;\n    t.crypto.Util.isKey, this.asn1KID = null, this.asn1CertIssuer = null, this.asn1CertSN = null, this.getExtnValueHex = function() {\n        var n = new Array();\n        this.asn1KID && n.push(new i({\n            explicit: !1,\n            tag: \"80\",\n            obj: this.asn1KID\n        })), this.asn1CertIssuer && n.push(new i({\n            explicit: !1,\n            tag: \"a1\",\n            obj: new s([\n                {\n                    dn: this.asn1CertIssuer\n                }\n            ])\n        })), this.asn1CertSN && n.push(new i({\n            explicit: !1,\n            tag: \"82\",\n            obj: this.asn1CertSN\n        }));\n        var h = new r.DERSequence({\n            array: n\n        });\n        return this.asn1ExtnValue = h, this.asn1ExtnValue.tohex();\n    }, this.setKIDByParam = function(n) {\n        if (n.str !== void 0 || n.hex !== void 0) this.asn1KID = new a.asn1.DEROctetString(n);\n        else if (typeof n == \"object\" && a.crypto.Util.isKey(n) || typeof n == \"string\" && n.indexOf(\"BEGIN \") != -1) {\n            var h = n;\n            typeof n == \"string\" && (h = k.getKey(n));\n            var u = k.getKeyID(h);\n            this.asn1KID = new a.asn1.DEROctetString({\n                hex: u\n            });\n        }\n    }, this.setCertIssuerByParam = function(n) {\n        n.str !== void 0 || n.ldapstr !== void 0 || n.hex !== void 0 || n.certsubject !== void 0 || n.certissuer !== void 0 ? this.asn1CertIssuer = new a.asn1.x509.X500Name(n) : typeof n == \"string\" && n.indexOf(\"BEGIN \") != -1 && n.indexOf(\"CERTIFICATE\") != -1 && (this.asn1CertIssuer = new a.asn1.x509.X500Name({\n            certissuer: n\n        }));\n    }, this.setCertSNByParam = function(n) {\n        if (n.str !== void 0 || n.bigint !== void 0 || n.hex !== void 0) this.asn1CertSN = new a.asn1.DERInteger(n);\n        else if (typeof n == \"string\" && n.indexOf(\"BEGIN \") != -1 && n.indexOf(\"CERTIFICATE\")) {\n            var h = new L();\n            h.readCertPEM(n);\n            var u = h.getSerialNumberHex();\n            this.asn1CertSN = new a.asn1.DERInteger({\n                hex: u\n            });\n        }\n    }, this.oid = \"2.5.29.35\", e !== void 0 && (e.kid !== void 0 && this.setKIDByParam(e.kid), e.issuer !== void 0 && this.setCertIssuerByParam(e.issuer), e.sn !== void 0 && this.setCertSNByParam(e.sn), e.issuersn !== void 0 && typeof e.issuersn == \"string\" && e.issuersn.indexOf(\"BEGIN \") != -1 && e.issuersn.indexOf(\"CERTIFICATE\") && (this.setCertSNByParam(e.issuersn), this.setCertIssuerByParam(e.issuersn)));\n};\nN(a.asn1.x509.AuthorityKeyIdentifier, a.asn1.x509.Extension);\na.asn1.x509.SubjectKeyIdentifier = function(e) {\n    a.asn1.x509.SubjectKeyIdentifier.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.DEROctetString;\n    this.asn1KID = null, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = this.asn1KID, this.asn1ExtnValue.tohex();\n    }, this.setKIDByParam = function(s) {\n        if (s.str !== void 0 || s.hex !== void 0) this.asn1KID = new i(s);\n        else if (typeof s == \"object\" && a.crypto.Util.isKey(s) || typeof s == \"string\" && s.indexOf(\"BEGIN\") != -1) {\n            var n = s;\n            typeof s == \"string\" && (n = k.getKey(s));\n            var h = k.getKeyID(n);\n            this.asn1KID = new a.asn1.DEROctetString({\n                hex: h\n            });\n        }\n    }, this.oid = \"2.5.29.14\", e !== void 0 && e.kid !== void 0 && this.setKIDByParam(e.kid);\n};\nN(a.asn1.x509.SubjectKeyIdentifier, a.asn1.x509.Extension);\na.asn1.x509.AuthorityInfoAccess = function(e) {\n    a.asn1.x509.AuthorityInfoAccess.superclass.constructor.call(this, e), this.setAccessDescriptionArray = function(t) {\n        for(var r = new Array(), i = a, s = i.asn1, n = s.DERSequence, h = s.DERObjectIdentifier, u = s.x509.GeneralName, p = 0; p < t.length; p++){\n            var c, y = t[p];\n            if (y.ocsp !== void 0) c = new n({\n                array: [\n                    new h({\n                        oid: \"1.3.6.1.5.5.7.48.1\"\n                    }),\n                    new u({\n                        uri: y.ocsp\n                    })\n                ]\n            });\n            else if (y.caissuer !== void 0) c = new n({\n                array: [\n                    new h({\n                        oid: \"1.3.6.1.5.5.7.48.2\"\n                    }),\n                    new u({\n                        uri: y.caissuer\n                    })\n                ]\n            });\n            else throw new Error(\"unknown AccessMethod parameter: \" + JSON.stringify(y));\n            r.push(c);\n        }\n        this.asn1ExtnValue = new n({\n            array: r\n        });\n    }, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n    }, this.oid = \"1.3.6.1.5.5.7.1.1\", e !== void 0 && e.array !== void 0 && this.setAccessDescriptionArray(e.array);\n};\nN(a.asn1.x509.AuthorityInfoAccess, a.asn1.x509.Extension);\na.asn1.x509.SubjectAltName = function(e) {\n    a.asn1.x509.SubjectAltName.superclass.constructor.call(this, e), this.setNameArray = function(t) {\n        this.asn1ExtnValue = new a.asn1.x509.GeneralNames(t);\n    }, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.17\", e !== void 0 && e.array !== void 0 && this.setNameArray(e.array);\n};\nN(a.asn1.x509.SubjectAltName, a.asn1.x509.Extension);\na.asn1.x509.IssuerAltName = function(e) {\n    a.asn1.x509.IssuerAltName.superclass.constructor.call(this, e), this.setNameArray = function(t) {\n        this.asn1ExtnValue = new a.asn1.x509.GeneralNames(t);\n    }, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.18\", e !== void 0 && e.array !== void 0 && this.setNameArray(e.array);\n};\nN(a.asn1.x509.IssuerAltName, a.asn1.x509.Extension);\na.asn1.x509.SubjectDirectoryAttributes = function(e) {\n    a.asn1.x509.SubjectDirectoryAttributes.superclass.constructor.call(this, e);\n    var t = a.asn1, r = t.DERSequence, i = t.ASN1Util.newObject, s = t.x509.OID.name2oid;\n    this.params = null, this.getExtnValueHex = function() {\n        for(var n = [], h = 0; h < this.params.array.length; h++){\n            var u = this.params.array[h];\n            if (u.attr != null && u.array != null) {\n                var p = {\n                    seq: [\n                        {\n                            oid: u.attr\n                        },\n                        {\n                            set: u.array\n                        }\n                    ]\n                };\n                n.push(i(p));\n                continue;\n            }\n            var c = {\n                seq: [\n                    {\n                        oid: \"1.2.3.4\"\n                    },\n                    {\n                        set: [\n                            {\n                                utf8str: \"DE\"\n                            }\n                        ]\n                    }\n                ]\n            };\n            if (u.attr == \"dateOfBirth\") c.seq[0].oid = s(u.attr), c.seq[1].set[0] = {\n                gentime: u.str\n            };\n            else if (u.attr == \"placeOfBirth\") c.seq[0].oid = s(u.attr), c.seq[1].set[0] = {\n                utf8str: u.str\n            };\n            else if (u.attr == \"gender\") c.seq[0].oid = s(u.attr), c.seq[1].set[0] = {\n                prnstr: u.str\n            };\n            else if (u.attr == \"countryOfCitizenship\") c.seq[0].oid = s(u.attr), c.seq[1].set[0] = {\n                prnstr: u.str\n            };\n            else if (u.attr == \"countryOfResidence\") c.seq[0].oid = s(u.attr), c.seq[1].set[0] = {\n                prnstr: u.str\n            };\n            else throw new Error(\"unsupported attribute: \" + u.attr);\n            n.push(new i(c));\n        }\n        var y = new r({\n            array: n\n        });\n        return this.asn1ExtnValue = y, this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.9\", e !== void 0 && (this.params = e);\n};\nN(a.asn1.x509.SubjectDirectoryAttributes, a.asn1.x509.Extension);\na.asn1.x509.PrivateExtension = function(e) {\n    a.asn1.x509.PrivateExtension.superclass.constructor.call(this, e);\n    var t = a, r = t.lang.String.isHex, i = t.asn1, s = i.x509.OID.name2oid, n = i.ASN1Util.newObject;\n    this.params = null, this.setByParam = function(h) {\n        this.oid = s(h.extname), this.params = h;\n    }, this.getExtnValueHex = function() {\n        if (this.params.extname == null || this.params.extn == null) throw new Error(\"extname or extnhex not specified\");\n        var h = this.params.extn;\n        if (typeof h == \"string\" && r(h)) return h;\n        if (typeof h == \"object\") try {\n            return n(h).tohex();\n        } catch  {}\n        throw new Error(\"unsupported extn value\");\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.x509.PrivateExtension, a.asn1.x509.Extension);\na.asn1.x509.CRL = function(e) {\n    a.asn1.x509.CRL.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DERBitString, n = r.x509, h = n.AlgorithmIdentifier, u = n.TBSCertList;\n    this.params = void 0, this.setByParam = function(p) {\n        this.params = p;\n    }, this.sign = function() {\n        var p = new u(this.params).tohex(), c = new a.crypto.Signature({\n            alg: this.params.sigalg\n        });\n        c.init(this.params.cakey), c.updateHex(p);\n        var y = c.sign();\n        this.params.sighex = y;\n    }, this.getPEM = function() {\n        return de(this.tohex(), \"X509 CRL\");\n    }, this.tohex = function() {\n        var p = this.params;\n        if (p.tbsobj == null && (p.tbsobj = new u(p)), p.sighex == null && p.cakey != null && this.sign(), p.sighex == null) throw new Error(\"sighex or cakey parameter not defined\");\n        var c = [];\n        c.push(p.tbsobj), c.push(new h({\n            name: p.sigalg\n        })), c.push(new s({\n            hex: \"00\" + p.sighex\n        }));\n        var y = new i({\n            array: c\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && (this.params = e);\n};\nN(a.asn1.x509.CRL, a.asn1.ASN1Object);\na.asn1.x509.TBSCertList = function(e) {\n    a.asn1.x509.TBSCertList.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERInteger, s = r.DERSequence, n = r.DERTaggedObject;\n    r.DERObjectIdentifier;\n    var h = r.x509, u = h.AlgorithmIdentifier, p = h.Time, c = h.Extensions, y = h.X500Name;\n    this.params = null, this.setByParam = function(v) {\n        this.params = v;\n    }, this.getRevCertSequence = function() {\n        for(var v = [], o = this.params.revcert, l = 0; l < o.length; l++){\n            var f = [\n                new i(o[l].sn),\n                new p(o[l].date)\n            ];\n            o[l].ext != null && f.push(new c(o[l].ext)), v.push(new s({\n                array: f\n            }));\n        }\n        return new s({\n            array: v\n        });\n    }, this.tohex = function() {\n        var v = [], o = this.params;\n        if (o.version != null) {\n            var l = o.version - 1, f = new i({\n                int: l\n            });\n            v.push(f);\n        }\n        if (v.push(new u({\n            name: o.sigalg\n        })), v.push(new y(o.issuer)), v.push(new p(o.thisupdate)), o.nextupdate != null && v.push(new p(o.nextupdate)), o.revcert != null && v.push(this.getRevCertSequence()), o.ext != null) {\n            var d = new c(o.ext);\n            v.push(new n({\n                tag: \"a0\",\n                explicit: !0,\n                obj: d\n            }));\n        }\n        var g = new s({\n            array: v\n        });\n        return g.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.TBSCertList, a.asn1.ASN1Object);\na.asn1.x509.CRLEntry = function(e) {\n    a.asn1.x509.CRLEntry.superclass.constructor.call(this);\n    var t = a, r = t.asn1;\n    this.setCertSerial = function(i) {\n        this.sn = new r.DERInteger(i);\n    }, this.setRevocationDate = function(i) {\n        this.time = new r.x509.Time(i);\n    }, this.tohex = function() {\n        var i = new r.DERSequence({\n            array: [\n                this.sn,\n                this.time\n            ]\n        });\n        return this.TLV = i.tohex(), this.TLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (e.time !== void 0 && this.setRevocationDate(e.time), e.sn !== void 0 && this.setCertSerial(e.sn));\n};\nN(a.asn1.x509.CRLEntry, a.asn1.ASN1Object);\na.asn1.x509.CRLNumber = function(e) {\n    a.asn1.x509.CRLNumber.superclass.constructor.call(this, e), this.params = void 0, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = new a.asn1.DERInteger(this.params.num), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.20\", e != null && (this.params = e);\n};\nN(a.asn1.x509.CRLNumber, a.asn1.x509.Extension);\na.asn1.x509.CRLReason = function(e) {\n    a.asn1.x509.CRLReason.superclass.constructor.call(this, e), this.params = void 0, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = new a.asn1.DEREnumerated(this.params.code), this.asn1ExtnValue.tohex();\n    }, this.oid = \"2.5.29.21\", e != null && (this.params = e);\n};\nN(a.asn1.x509.CRLReason, a.asn1.x509.Extension);\na.asn1.x509.OCSPNonce = function(e) {\n    a.asn1.x509.OCSPNonce.superclass.constructor.call(this, e), this.params = void 0, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = new a.asn1.DEROctetString(this.params), this.asn1ExtnValue.tohex();\n    }, this.oid = \"1.3.6.1.5.5.7.48.1.2\", e != null && (this.params = e);\n};\nN(a.asn1.x509.OCSPNonce, a.asn1.x509.Extension);\na.asn1.x509.OCSPNoCheck = function(e) {\n    a.asn1.x509.OCSPNoCheck.superclass.constructor.call(this, e), this.params = void 0, this.getExtnValueHex = function() {\n        return this.asn1ExtnValue = new a.asn1.DERNull(), this.asn1ExtnValue.tohex();\n    }, this.oid = \"1.3.6.1.5.5.7.48.1.5\", e != null && (this.params = e);\n};\nN(a.asn1.x509.OCSPNoCheck, a.asn1.x509.Extension);\na.asn1.x509.AdobeTimeStamp = function(e) {\n    a.asn1.x509.AdobeTimeStamp.superclass.constructor.call(this, e);\n    var t = a, r = t.asn1, i = r.DERInteger, s = r.DERBoolean, n = r.DERSequence, h = r.x509.GeneralName;\n    this.params = null, this.getExtnValueHex = function() {\n        var u = this.params, p = [\n            new i(1)\n        ];\n        return p.push(new h({\n            uri: u.uri\n        })), u.reqauth != null && p.push(new s(u.reqauth)), this.asn1ExtnValue = new n({\n            array: p\n        }), this.asn1ExtnValue.tohex();\n    }, this.oid = \"1.2.840.113583.1.1.9.1\", e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.AdobeTimeStamp, a.asn1.x509.Extension);\na.asn1.x509.X500Name = function(e) {\n    a.asn1.x509.X500Name.superclass.constructor.call(this), this.asn1Array = [], this.paramArray = [], this.sRule = \"utf8\";\n    var t = a, r = t.asn1, i = r.x509, s = i.RDN;\n    this.setByString = function(n, h) {\n        h !== void 0 && (this.sRule = h);\n        var u = n.split(\"/\");\n        u.shift();\n        for(var p = [], c = 0; c < u.length; c++)if (u[c].match(/^[^=]+=.+$/)) p.push(u[c]);\n        else {\n            var y = p.length - 1;\n            p[y] = p[y] + \"/\" + u[c];\n        }\n        for(var c = 0; c < p.length; c++)this.asn1Array.push(new s({\n            str: p[c],\n            rule: this.sRule\n        }));\n    }, this.setByLdapString = function(n, h) {\n        h !== void 0 && (this.sRule = h);\n        var u = i.X500Name.ldapToCompat(n);\n        this.setByString(u, h);\n    }, this.setByObject = function(n, h) {\n        h !== void 0 && (this.sRule = h);\n        for(var u in n)if (n.hasOwnProperty(u)) {\n            var p = new s({\n                str: u + \"=\" + n[u],\n                rule: this.sRule\n            });\n            this.asn1Array ? this.asn1Array.push(p) : this.asn1Array = [\n                p\n            ];\n        }\n    }, this.setByParam = function(n) {\n        if (n.rule !== void 0 && (this.sRule = n.rule), n.array !== void 0) this.paramArray = n.array;\n        else if (n.str !== void 0) this.setByString(n.str);\n        else if (n.ldapstr !== void 0) this.setByLdapString(n.ldapstr);\n        else if (n.hex !== void 0) this.hTLV = n.hex;\n        else if (n.certissuer !== void 0) {\n            var h = new L();\n            h.readCertPEM(n.certissuer), this.hTLV = h.getIssuerHex();\n        } else if (n.certsubject !== void 0) {\n            var h = new L();\n            h.readCertPEM(n.certsubject), this.hTLV = h.getSubjectHex();\n        } else typeof n == \"object\" && n.certsubject === void 0 && n.certissuer === void 0 && this.setByObject(n);\n    }, this.tohex = function() {\n        if (typeof this.hTLV == \"string\") return this.hTLV;\n        if (this.asn1Array.length == 0 && this.paramArray.length > 0) for(var n = 0; n < this.paramArray.length; n++){\n            var h = {\n                array: this.paramArray[n]\n            };\n            this.sRule != \"utf8\" && (h.rule = this.sRule);\n            var u = new s(h);\n            this.asn1Array.push(u);\n        }\n        var p = new r.DERSequence({\n            array: this.asn1Array\n        });\n        return this.hTLV = p.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.X500Name, a.asn1.ASN1Object);\na.asn1.x509.X500Name.compatToLDAP = function(e) {\n    if (e.substr(0, 1) !== \"/\") throw \"malformed input\";\n    e = e.substr(1);\n    var t = e.split(\"/\");\n    return t.reverse(), t = t.map(function(r) {\n        return r.replace(/,/, \"\\\\,\");\n    }), t.join(\",\");\n};\na.asn1.x509.X500Name.onelineToLDAP = function(e) {\n    return a.asn1.x509.X500Name.compatToLDAP(e);\n};\na.asn1.x509.X500Name.ldapToCompat = function(e) {\n    for(var t = e.split(\",\"), r = !1, i = [], s = 0; t.length > 0; s++){\n        var n = t.shift();\n        if (r === !0) {\n            var h = i.pop(), u = (h + \",\" + n).replace(/\\\\,/g, \",\");\n            i.push(u), r = !1;\n        } else i.push(n);\n        n.substr(-1, 1) === \"\\\\\" && (r = !0);\n    }\n    return i = i.map(function(p) {\n        return p.replace(\"/\", \"\\\\/\");\n    }), i.reverse(), \"/\" + i.join(\"/\");\n};\na.asn1.x509.X500Name.ldapToOneline = function(e) {\n    return a.asn1.x509.X500Name.ldapToCompat(e);\n};\na.asn1.x509.RDN = function(e) {\n    a.asn1.x509.RDN.superclass.constructor.call(this), this.asn1Array = [], this.paramArray = [], this.sRule = \"utf8\";\n    var t = a.asn1.x509.AttributeTypeAndValue;\n    this.setByParam = function(r) {\n        r.rule !== void 0 && (this.sRule = r.rule), r.str !== void 0 && this.addByMultiValuedString(r.str), r.array !== void 0 && (this.paramArray = r.array);\n    }, this.addByString = function(r) {\n        this.asn1Array.push(new a.asn1.x509.AttributeTypeAndValue({\n            str: r,\n            rule: this.sRule\n        }));\n    }, this.addByMultiValuedString = function(r) {\n        for(var i = a.asn1.x509.RDN.parseString(r), s = 0; s < i.length; s++)this.addByString(i[s]);\n    }, this.tohex = function() {\n        if (this.asn1Array.length == 0 && this.paramArray.length > 0) for(var r = 0; r < this.paramArray.length; r++){\n            var i = this.paramArray[r];\n            i.rule !== void 0 && this.sRule != \"utf8\" && (i.rule = this.sRule);\n            var s = new t(i);\n            this.asn1Array.push(s);\n        }\n        var n = new a.asn1.DERSet({\n            array: this.asn1Array\n        });\n        return this.TLV = n.tohex(), this.TLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.RDN, a.asn1.ASN1Object);\na.asn1.x509.RDN.parseString = function(e) {\n    for(var t = e.split(/\\+/), r = !1, i = [], s = 0; t.length > 0; s++){\n        var n = t.shift();\n        if (r === !0) {\n            var h = i.pop(), u = (h + \"+\" + n).replace(/\\\\\\+/g, \"+\");\n            i.push(u), r = !1;\n        } else i.push(n);\n        n.substr(-1, 1) === \"\\\\\" && (r = !0);\n    }\n    for(var p = !1, c = [], s = 0; i.length > 0; s++){\n        var n = i.shift();\n        if (p === !0) {\n            var y = c.pop();\n            if (n.match(/\"$/)) {\n                var u = (y + \"+\" + n).replace(/^([^=]+)=\"(.*)\"$/, \"$1=$2\");\n                c.push(u), p = !1;\n            } else c.push(y + \"+\" + n);\n        } else c.push(n);\n        n.match(/^[^=]+=\"/) && (p = !0);\n    }\n    return c;\n};\na.asn1.x509.AttributeTypeAndValue = function(e) {\n    a.asn1.x509.AttributeTypeAndValue.superclass.constructor.call(this), this.sRule = \"utf8\", this.sType = null, this.sValue = null, this.dsType = null;\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DERUTF8String, n = r.DERPrintableString, h = r.DERTeletexString, u = r.DERIA5String, p = r.DERVisibleString, c = r.DERBMPString, y = t.lang.String.isMail, v = t.lang.String.isPrintable;\n    this.setByParam = function(o) {\n        if (o.rule !== void 0 && (this.sRule = o.rule), o.ds !== void 0 && (this.dsType = o.ds), o.value === void 0 && o.str !== void 0) {\n            var l = o.str, f = l.match(/^([^=]+)=(.+)$/);\n            if (f) this.sType = f[1], this.sValue = f[2];\n            else throw new Error(\"malformed attrTypeAndValueStr: \" + attrTypeAndValueStr);\n        } else this.sType = o.type, this.sValue = o.value;\n    }, this.setByString = function(o, l) {\n        l !== void 0 && (this.sRule = l);\n        var f = o.match(/^([^=]+)=(.+)$/);\n        if (f) this.setByAttrTypeAndValueStr(f[1], f[2]);\n        else throw new Error(\"malformed attrTypeAndValueStr: \" + attrTypeAndValueStr);\n    }, this._getDsType = function() {\n        var o = this.sType, l = this.sValue, f = this.sRule;\n        return f === \"prn\" ? o == \"CN\" && y(l) ? \"ia5\" : v(l) ? \"prn\" : \"utf8\" : f === \"utf8\" ? o == \"CN\" && y(l) ? \"ia5\" : o == \"C\" ? \"prn\" : \"utf8\" : \"utf8\";\n    }, this.setByAttrTypeAndValueStr = function(o, l, f) {\n        f !== void 0 && (this.sRule = f), this.sType = o, this.sValue = l;\n    }, this.getValueObj = function(o, l) {\n        if (o == \"utf8\") return new s({\n            str: l\n        });\n        if (o == \"prn\") return new n({\n            str: l\n        });\n        if (o == \"tel\") return new h({\n            str: l\n        });\n        if (o == \"ia5\") return new u({\n            str: l\n        });\n        if (o == \"vis\") return new p({\n            str: l\n        });\n        if (o == \"bmp\") return new c({\n            str: l\n        });\n        throw new Error(\"unsupported directory string type: type=\" + o + \" value=\" + l);\n    }, this.tohex = function() {\n        this.dsType == null && (this.dsType = this._getDsType());\n        var o = a.asn1.x509.OID.atype2obj(this.sType), l = this.getValueObj(this.dsType, this.sValue), f = new i({\n            array: [\n                o,\n                l\n            ]\n        });\n        return this.TLV = f.tohex(), this.TLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.AttributeTypeAndValue, a.asn1.ASN1Object);\na.asn1.x509.SubjectPublicKeyInfo = function(e) {\n    a.asn1.x509.SubjectPublicKeyInfo.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERInteger, s = r.DERBitString, n = r.DERObjectIdentifier, h = r.DERSequence, u = r.ASN1Util.newObject, p = r.x509, c = p.AlgorithmIdentifier, y = t.crypto;\n    y.ECDSA, y.DSA, this.getASN1Object = function() {\n        if (this.asn1AlgId == null || this.asn1SubjPKey == null) throw \"algId and/or subjPubKey not set\";\n        var v = new h({\n            array: [\n                this.asn1AlgId,\n                this.asn1SubjPKey\n            ]\n        });\n        return v;\n    }, this.tohex = function() {\n        var v = this.getASN1Object();\n        return this.hTLV = v.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setPubKey = function(v) {\n        try {\n            if (v instanceof q) {\n                var o = u({\n                    seq: [\n                        {\n                            int: {\n                                bigint: v.n\n                            }\n                        },\n                        {\n                            int: {\n                                int: v.e\n                            }\n                        }\n                    ]\n                }), l = o.tohex();\n                this.asn1AlgId = new c({\n                    name: \"rsaEncryption\"\n                }), this.asn1SubjPKey = new s({\n                    hex: \"00\" + l\n                });\n            }\n        } catch  {}\n        try {\n            if (v instanceof a.crypto.ECDSA) {\n                var f = new n({\n                    name: v.curveName\n                });\n                this.asn1AlgId = new c({\n                    name: \"ecPublicKey\",\n                    asn1params: f\n                }), this.asn1SubjPKey = new s({\n                    hex: \"00\" + v.pubKeyHex\n                });\n            }\n        } catch  {}\n        try {\n            if (v instanceof a.crypto.DSA) {\n                var f = new u({\n                    seq: [\n                        {\n                            int: {\n                                bigint: v.p\n                            }\n                        },\n                        {\n                            int: {\n                                bigint: v.q\n                            }\n                        },\n                        {\n                            int: {\n                                bigint: v.g\n                            }\n                        }\n                    ]\n                });\n                this.asn1AlgId = new c({\n                    name: \"dsa\",\n                    asn1params: f\n                });\n                var d = new i({\n                    bigint: v.y\n                });\n                this.asn1SubjPKey = new s({\n                    hex: \"00\" + d.tohex()\n                });\n            }\n        } catch  {}\n    }, e !== void 0 && this.setPubKey(e);\n};\nN(a.asn1.x509.SubjectPublicKeyInfo, a.asn1.ASN1Object);\na.asn1.x509.Time = function(e) {\n    a.asn1.x509.Time.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERUTCTime, s = r.DERGeneralizedTime;\n    this.params = null, this.type = null, this.setTimeParams = function(n) {\n        this.timeParams = n;\n    }, this.setByParam = function(n) {\n        this.params = n;\n    }, this.getType = function(n) {\n        return n.match(/^[0-9]{12}Z$/) ? \"utc\" : n.match(/^[0-9]{14}Z$/) ? \"gen\" : n.match(/^[0-9]{12}\\.[0-9]+Z$/) ? \"utc\" : n.match(/^[0-9]{14}\\.[0-9]+Z$/) ? \"gen\" : null;\n    }, this.tohex = function() {\n        var n = this.params, h = null;\n        if (typeof n == \"string\" && (n = {\n            str: n\n        }), n != null && n.str && (n.type == null || n.type == null) && (n.type = this.getType(n.str)), n != null && n.str ? (n.type == \"utc\" && (h = new i(n.str)), n.type == \"gen\" && (h = new s(n.str))) : this.type == \"gen\" ? h = new s() : h = new i(), h == null) throw new Error(\"wrong setting for Time\");\n        return this.TLV = h.tohex(), this.TLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\na.asn1.x509.Time_bak = function(e) {\n    a.asn1.x509.Time_bak.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERUTCTime, s = r.DERGeneralizedTime;\n    this.setTimeParams = function(n) {\n        this.timeParams = n;\n    }, this.tohex = function() {\n        var n = null;\n        return this.timeParams != null ? this.type == \"utc\" ? n = new i(this.timeParams) : n = new s(this.timeParams) : this.type == \"utc\" ? n = new i() : n = new s(), this.TLV = n.tohex(), this.TLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.type = \"utc\", e !== void 0 && (e.type !== void 0 ? this.type = e.type : e.str !== void 0 && (e.str.match(/^[0-9]{12}Z$/) && (this.type = \"utc\"), e.str.match(/^[0-9]{14}Z$/) && (this.type = \"gen\")), this.timeParams = e);\n};\nN(a.asn1.x509.Time, a.asn1.ASN1Object);\na.asn1.x509.AlgorithmIdentifier = function(e) {\n    a.asn1.x509.AlgorithmIdentifier.superclass.constructor.call(this), this.nameAlg = null, this.asn1Alg = null, this.asn1Params = null, this.paramEmpty = !1;\n    var t = a, r = t.asn1, i = r.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;\n    if (this.tohex = function() {\n        if (this.nameAlg === null && this.asn1Alg === null) throw new Error(\"algorithm not specified\");\n        if (this.nameAlg !== null) {\n            var n = null;\n            for(var h in i)h === this.nameAlg && (n = i[h]);\n            if (n !== null) return this.hTLV = n, this.hTLV;\n        }\n        this.nameAlg !== null && this.asn1Alg === null && (this.asn1Alg = r.x509.OID.name2obj(this.nameAlg));\n        var u = [\n            this.asn1Alg\n        ];\n        this.asn1Params !== null && u.push(this.asn1Params);\n        var p = new r.DERSequence({\n            array: u\n        });\n        return this.hTLV = p.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && (e.name !== void 0 && (this.nameAlg = e.name), e.asn1params !== void 0 && (this.asn1Params = e.asn1params), e.paramempty !== void 0 && (this.paramEmpty = e.paramempty)), this.asn1Params === null && this.paramEmpty === !1 && this.nameAlg !== null) {\n        this.nameAlg.name !== void 0 && (this.nameAlg = this.nameAlg.name);\n        var s = this.nameAlg.toLowerCase();\n        s.substr(-7, 7) !== \"withdsa\" && s.substr(-9, 9) !== \"withecdsa\" && (this.asn1Params = new r.DERNull());\n    }\n};\nN(a.asn1.x509.AlgorithmIdentifier, a.asn1.ASN1Object);\na.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV = {\n    SHAwithRSAandMGF1: \"300d06092a864886f70d01010a3000\",\n    SHA256withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040201a11a301806092a864886f70d010108300b0609608648016503040201a203020120\",\n    SHA384withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040202a11a301806092a864886f70d010108300b0609608648016503040202a203020130\",\n    SHA512withRSAandMGF1: \"303d06092a864886f70d01010a3030a00d300b0609608648016503040203a11a301806092a864886f70d010108300b0609608648016503040203a203020140\"\n};\na.asn1.x509.GeneralName = function(e) {\n    a.asn1.x509.GeneralName.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.x509, s = i.X500Name, n = i.OtherName, h = r.DERIA5String;\n    r.DERPrintableString;\n    var u = r.DEROctetString, p = r.DERTaggedObject, c = r.ASN1Object, y = Error;\n    this.params = null, this.setByParam = function(v) {\n        this.params = v;\n    }, this.tohex = function() {\n        var v = this.params, o, f, l, f = !1;\n        if (v.other !== void 0) o = \"a0\", l = new n(v.other);\n        else if (v.rfc822 !== void 0) o = \"81\", l = new h({\n            str: v.rfc822\n        });\n        else if (v.dns !== void 0) o = \"82\", l = new h({\n            str: v.dns\n        });\n        else if (v.dn !== void 0) o = \"a4\", f = !0, typeof v.dn == \"string\" ? l = new s({\n            str: v.dn\n        }) : v.dn instanceof a.asn1.x509.X500Name ? l = v.dn : l = new s(v.dn);\n        else if (v.ldapdn !== void 0) o = \"a4\", f = !0, l = new s({\n            ldapstr: v.ldapdn\n        });\n        else if (v.certissuer !== void 0 || v.certsubj !== void 0) {\n            o = \"a4\", f = !0;\n            var d, g, S = null;\n            if (v.certsubj !== void 0 ? (d = !1, g = v.certsubj) : (d = !0, g = v.certissuer), g.match(/^[0-9A-Fa-f]+$/), g.indexOf(\"-----BEGIN \") != -1 && (S = ie(g)), S == null) throw new Error(\"certsubj/certissuer not cert\");\n            var b = new L();\n            b.hex = S;\n            var D;\n            d ? D = b.getIssuerHex() : D = b.getSubjectHex(), l = new c(), l.hTLV = D;\n        } else if (v.uri !== void 0) o = \"86\", l = new h({\n            str: v.uri\n        });\n        else if (v.ip !== void 0) {\n            o = \"87\";\n            var A, I = v.ip;\n            try {\n                if (I.match(/^[0-9a-f]+$/)) {\n                    var m = I.length;\n                    if (m == 8 || m == 16 || m == 32 || m == 64) A = I;\n                    else throw \"err\";\n                } else A = Rt(I);\n            } catch (w) {\n                throw new y(\"malformed IP address: \" + v.ip + \":\" + w.message);\n            }\n            l = new u({\n                hex: A\n            });\n        } else throw new y(\"improper params\");\n        var E = new p({\n            tag: o,\n            explicit: f,\n            obj: l\n        });\n        return E.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.GeneralName, a.asn1.ASN1Object);\na.asn1.x509.GeneralNames = function(e) {\n    a.asn1.x509.GeneralNames.superclass.constructor.call(this);\n    var t = a, r = t.asn1;\n    this.setByParamArray = function(i) {\n        for(var s = 0; s < i.length; s++){\n            var n = new r.x509.GeneralName(i[s]);\n            this.asn1Array.push(n);\n        }\n    }, this.tohex = function() {\n        var i = new r.DERSequence({\n            array: this.asn1Array\n        });\n        return i.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.asn1Array = new Array(), typeof e < \"u\" && this.setByParamArray(e);\n};\nN(a.asn1.x509.GeneralNames, a.asn1.ASN1Object);\na.asn1.x509.OtherName = function(e) {\n    a.asn1.x509.OtherName.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DERObjectIdentifier, s = r.DERSequence, n = r.ASN1Util.newObject;\n    this.params = null, this.setByParam = function(h) {\n        this.params = h;\n    }, this.tohex = function() {\n        var h = this.params;\n        if (h.oid == null || h.value == null) throw new Error(\"oid or value not specified\");\n        var u = new i({\n            oid: h.oid\n        }), p = n({\n            tag: {\n                tag: \"a0\",\n                explicit: !0,\n                obj: h.value\n            }\n        }), c = new s({\n            array: [\n                u,\n                p\n            ]\n        });\n        return c.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.x509.OtherName, a.asn1.ASN1Object);\na.asn1.x509.OID = new function() {\n    var e = a.asn1.DERObjectIdentifier;\n    this.name2oidList = {\n        \"aes128-CBC\": \"2.16.840.1.101.3.4.1.2\",\n        \"aes256-CBC\": \"2.16.840.1.101.3.4.1.42\",\n        sha1: \"1.3.14.3.2.26\",\n        sha256: \"2.16.840.1.101.3.4.2.1\",\n        sha384: \"2.16.840.1.101.3.4.2.2\",\n        sha512: \"2.16.840.1.101.3.4.2.3\",\n        sha224: \"2.16.840.1.101.3.4.2.4\",\n        md5: \"1.2.840.113549.2.5\",\n        md2: \"1.3.14.7.2.2.1\",\n        ripemd160: \"1.3.36.3.2.1\",\n        hmacWithSHA1: \"1.2.840.113549.2.7\",\n        hmacWithSHA224: \"1.2.840.113549.2.8\",\n        hmacWithSHA256: \"1.2.840.113549.2.9\",\n        hmacWithSHA384: \"1.2.840.113549.2.10\",\n        hmacWithSHA512: \"1.2.840.113549.2.11\",\n        MD2withRSA: \"1.2.840.113549.1.1.2\",\n        MD4withRSA: \"1.2.840.113549.1.1.3\",\n        MD5withRSA: \"1.2.840.113549.1.1.4\",\n        SHA1withRSA: \"1.2.840.113549.1.1.5\",\n        \"pkcs1-MGF\": \"1.2.840.113549.1.1.8\",\n        rsaPSS: \"1.2.840.113549.1.1.10\",\n        SHA224withRSA: \"1.2.840.113549.1.1.14\",\n        SHA256withRSA: \"1.2.840.113549.1.1.11\",\n        SHA384withRSA: \"1.2.840.113549.1.1.12\",\n        SHA512withRSA: \"1.2.840.113549.1.1.13\",\n        SHA1withECDSA: \"1.2.840.10045.4.1\",\n        SHA224withECDSA: \"1.2.840.10045.4.3.1\",\n        SHA256withECDSA: \"1.2.840.10045.4.3.2\",\n        SHA384withECDSA: \"1.2.840.10045.4.3.3\",\n        SHA512withECDSA: \"1.2.840.10045.4.3.4\",\n        dsa: \"1.2.840.10040.4.1\",\n        SHA1withDSA: \"1.2.840.10040.4.3\",\n        SHA224withDSA: \"2.16.840.1.101.3.4.3.1\",\n        SHA256withDSA: \"2.16.840.1.101.3.4.3.2\",\n        rsaEncryption: \"1.2.840.113549.1.1.1\",\n        commonName: \"2.5.4.3\",\n        countryName: \"2.5.4.6\",\n        localityName: \"2.5.4.7\",\n        stateOrProvinceName: \"2.5.4.8\",\n        streetAddress: \"2.5.4.9\",\n        organizationName: \"2.5.4.10\",\n        organizationalUnitName: \"2.5.4.11\",\n        domainComponent: \"0.9.2342.19200300.100.1.25\",\n        userId: \"0.9.2342.19200300.100.1.1\",\n        surname: \"2.5.4.4\",\n        givenName: \"2.5.4.42\",\n        title: \"2.5.4.12\",\n        distinguishedName: \"2.5.4.49\",\n        emailAddress: \"1.2.840.113549.1.9.1\",\n        description: \"2.5.4.13\",\n        businessCategory: \"2.5.4.15\",\n        postalCode: \"2.5.4.17\",\n        uniqueIdentifier: \"2.5.4.45\",\n        organizationIdentifier: \"2.5.4.97\",\n        jurisdictionOfIncorporationL: \"1.3.6.1.4.1.311.60.2.1.1\",\n        jurisdictionOfIncorporationSP: \"1.3.6.1.4.1.311.60.2.1.2\",\n        jurisdictionOfIncorporationC: \"1.3.6.1.4.1.311.60.2.1.3\",\n        subjectDirectoryAttributes: \"2.5.29.9\",\n        subjectKeyIdentifier: \"2.5.29.14\",\n        keyUsage: \"2.5.29.15\",\n        subjectAltName: \"2.5.29.17\",\n        issuerAltName: \"2.5.29.18\",\n        basicConstraints: \"2.5.29.19\",\n        cRLNumber: \"2.5.29.20\",\n        cRLReason: \"2.5.29.21\",\n        nameConstraints: \"2.5.29.30\",\n        cRLDistributionPoints: \"2.5.29.31\",\n        certificatePolicies: \"2.5.29.32\",\n        anyPolicy: \"2.5.29.32.0\",\n        policyMappings: \"2.5.29.33\",\n        authorityKeyIdentifier: \"2.5.29.35\",\n        policyConstraints: \"2.5.29.36\",\n        extKeyUsage: \"2.5.29.37\",\n        inhibitAnyPolicy: \"2.5.29.54\",\n        authorityInfoAccess: \"1.3.6.1.5.5.7.1.1\",\n        ocsp: \"1.3.6.1.5.5.7.48.1\",\n        ocspBasic: \"1.3.6.1.5.5.7.48.1.1\",\n        ocspNonce: \"1.3.6.1.5.5.7.48.1.2\",\n        ocspNoCheck: \"1.3.6.1.5.5.7.48.1.5\",\n        caIssuers: \"1.3.6.1.5.5.7.48.2\",\n        anyExtendedKeyUsage: \"2.5.29.37.0\",\n        serverAuth: \"1.3.6.1.5.5.7.3.1\",\n        clientAuth: \"1.3.6.1.5.5.7.3.2\",\n        codeSigning: \"1.3.6.1.5.5.7.3.3\",\n        emailProtection: \"1.3.6.1.5.5.7.3.4\",\n        timeStamping: \"1.3.6.1.5.5.7.3.8\",\n        ocspSigning: \"1.3.6.1.5.5.7.3.9\",\n        smtpUTF8Mailbox: \"1.3.6.1.5.5.7.8.9\",\n        dateOfBirth: \"1.3.6.1.5.5.7.9.1\",\n        placeOfBirth: \"1.3.6.1.5.5.7.9.2\",\n        gender: \"1.3.6.1.5.5.7.9.3\",\n        countryOfCitizenship: \"1.3.6.1.5.5.7.9.4\",\n        countryOfResidence: \"1.3.6.1.5.5.7.9.5\",\n        ecPublicKey: \"1.2.840.10045.2.1\",\n        \"P-256\": \"1.2.840.10045.3.1.7\",\n        secp256r1: \"1.2.840.10045.3.1.7\",\n        secp256k1: \"1.3.132.0.10\",\n        secp384r1: \"1.3.132.0.34\",\n        secp521r1: \"1.3.132.0.35\",\n        pkcs5PBES2: \"1.2.840.113549.1.5.13\",\n        pkcs5PBKDF2: \"1.2.840.113549.1.5.12\",\n        \"des-EDE3-CBC\": \"1.2.840.113549.3.7\",\n        data: \"1.2.840.113549.1.7.1\",\n        \"signed-data\": \"1.2.840.113549.1.7.2\",\n        \"enveloped-data\": \"1.2.840.113549.1.7.3\",\n        \"digested-data\": \"1.2.840.113549.1.7.5\",\n        \"encrypted-data\": \"1.2.840.113549.1.7.6\",\n        \"authenticated-data\": \"1.2.840.113549.1.9.16.1.2\",\n        tstinfo: \"1.2.840.113549.1.9.16.1.4\",\n        signingCertificate: \"1.2.840.113549.1.9.16.2.12\",\n        timeStampToken: \"1.2.840.113549.1.9.16.2.14\",\n        signaturePolicyIdentifier: \"1.2.840.113549.1.9.16.2.15\",\n        etsArchiveTimeStamp: \"1.2.840.113549.1.9.16.2.27\",\n        signingCertificateV2: \"1.2.840.113549.1.9.16.2.47\",\n        etsArchiveTimeStampV2: \"1.2.840.113549.1.9.16.2.48\",\n        extensionRequest: \"1.2.840.113549.1.9.14\",\n        contentType: \"1.2.840.113549.1.9.3\",\n        messageDigest: \"1.2.840.113549.1.9.4\",\n        signingTime: \"1.2.840.113549.1.9.5\",\n        counterSignature: \"1.2.840.113549.1.9.6\",\n        archiveTimeStampV3: \"0.4.0.1733.2.4\",\n        pdfRevocationInfoArchival: \"1.2.840.113583.1.1.8\",\n        adobeTimeStamp: \"1.2.840.113583.1.1.9.1\",\n        smimeMailboxLegacy: \"2.23.140.1.5.1.1\",\n        smimeMailboxMulti: \"2.23.140.1.5.1.2\",\n        smimeMailboxStrict: \"2.23.140.1.5.1.3\",\n        smimeOrganizationLegacy: \"2.23.140.1.5.2.1\",\n        smimeOrganizationMulti: \"2.23.140.1.5.2.2\",\n        smimeOrganizationStrict: \"2.23.140.1.5.2.3\",\n        smimeSponsorLegacy: \"2.23.140.1.5.3.1\",\n        smimeSponsorMulti: \"2.23.140.1.5.3.2\",\n        smimeSponsorStrict: \"2.23.140.1.5.3.3\",\n        smimeIndividualLegacy: \"2.23.140.1.5.4.1\",\n        smimeIndividualMulti: \"2.23.140.1.5.4.2\",\n        smimeIndividualStrict: \"2.23.140.1.5.4.3\"\n    }, this.atype2oidList = {\n        CN: \"2.5.4.3\",\n        L: \"2.5.4.7\",\n        ST: \"2.5.4.8\",\n        O: \"2.5.4.10\",\n        OU: \"2.5.4.11\",\n        C: \"2.5.4.6\",\n        STREET: \"2.5.4.9\",\n        DC: \"0.9.2342.19200300.100.1.25\",\n        UID: \"0.9.2342.19200300.100.1.1\",\n        SN: \"2.5.4.4\",\n        T: \"2.5.4.12\",\n        GN: \"2.5.4.42\",\n        DN: \"2.5.4.49\",\n        E: \"1.2.840.113549.1.9.1\",\n        description: \"2.5.4.13\",\n        businessCategory: \"2.5.4.15\",\n        postalCode: \"2.5.4.17\",\n        serialNumber: \"2.5.4.5\",\n        uniqueIdentifier: \"2.5.4.45\",\n        organizationIdentifier: \"2.5.4.97\",\n        jurisdictionOfIncorporationL: \"1.3.6.1.4.1.311.60.2.1.1\",\n        jurisdictionOfIncorporationSP: \"1.3.6.1.4.1.311.60.2.1.2\",\n        jurisdictionOfIncorporationC: \"1.3.6.1.4.1.311.60.2.1.3\"\n    }, this.objCache = {}, this.name2obj = function(t) {\n        if (typeof this.objCache[t] < \"u\") return this.objCache[t];\n        if (typeof this.name2oidList[t] > \"u\") throw \"Name of ObjectIdentifier not defined: \" + t;\n        var r = this.name2oidList[t], i = new e({\n            oid: r\n        });\n        return this.objCache[t] = i, i;\n    }, this.atype2obj = function(t) {\n        if (this.objCache[t] !== void 0) return this.objCache[t];\n        var r;\n        if (t.match(/^\\d+\\.\\d+\\.[0-9.]+$/)) r = t;\n        else if (this.atype2oidList[t] !== void 0) r = this.atype2oidList[t];\n        else if (this.name2oidList[t] !== void 0) r = this.name2oidList[t];\n        else throw new Error(\"AttributeType name undefined: \" + t);\n        var i = new e({\n            oid: r\n        });\n        return this.objCache[t] = i, i;\n    }, this.registerOIDs = function(t) {\n        if (this.checkOIDs(t)) for(var r in t)this.name2oidList[r] = t[r];\n    }, this.checkOIDs = function(t) {\n        try {\n            var r = Object.keys(t);\n            return r.length == 0 ? !1 : (r.map(function(i, s, n) {\n                var h = this[i];\n                if (!h.match(/^[0-2]\\.[0-9.]+$/)) throw new Error(\"value is not OID\");\n            }, t), !0);\n        } catch  {\n            return !1;\n        }\n    };\n}();\na.asn1.x509.OID.oid2name = function(e) {\n    var t = a.asn1.x509.OID.name2oidList;\n    for(var r in t)if (t[r] == e) return r;\n    return \"\";\n};\na.asn1.x509.OID.oid2atype = function(e) {\n    var t = a.asn1.x509.OID.atype2oidList;\n    for(var r in t)if (t[r] == e) return r;\n    return e;\n};\na.asn1.x509.OID.name2oid = function(e) {\n    if (e.match(/^[0-9.]+$/)) return e;\n    var t = a.asn1.x509.OID.name2oidList;\n    return t[e] === void 0 ? \"\" : t[e];\n};\na.asn1.x509.X509Util = {};\na.asn1.x509.X509Util.newCertPEM = function(e) {\n    var t = a.asn1.x509;\n    t.TBSCertificate;\n    var r = t.Certificate, i = new r(e);\n    return i.getPEM();\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\n(typeof a.asn1.cms > \"u\" || !a.asn1.cms) && (a.asn1.cms = {});\na.asn1.cms.Attribute = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.DERSet, h = i.DERObjectIdentifier;\n    this.params = null, this.typeOid = null, this.setByParam = function(u) {\n        this.params = u;\n    }, this.getValueArray = function() {\n        throw new t(\"not yet implemented abstract\");\n    }, this.tohex = function() {\n        var u = new h({\n            oid: this.typeOid\n        }), p = new n({\n            array: this.getValueArray()\n        }), c = new s({\n            array: [\n                u,\n                p\n            ]\n        });\n        return c.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    };\n};\nN(a.asn1.cms.Attribute, a.asn1.ASN1Object);\na.asn1.cms.ContentType = function(e) {\n    var t = a, r = t.asn1;\n    r.cms.ContentType.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.3\", this.getValueArray = function() {\n        var i = new r.DERObjectIdentifier(this.params.type);\n        return [\n            i\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.ContentType, a.asn1.cms.Attribute);\na.asn1.cms.MessageDigest = function(e) {\n    var t = a, r = t.asn1, i = r.DEROctetString, s = r.cms;\n    s.MessageDigest.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.4\", this.getValueArray = function() {\n        var n = new i(this.params);\n        return [\n            n\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.MessageDigest, a.asn1.cms.Attribute);\na.asn1.cms.SigningTime = function(e) {\n    var t = a, r = t.asn1;\n    r.cms.SigningTime.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.5\", this.getValueArray = function() {\n        var i = new r.x509.Time(this.params);\n        return [\n            i\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SigningTime, a.asn1.cms.Attribute);\na.asn1.cms.SigningCertificate = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.cms, h = n.ESSCertID;\n    r.crypto, n.SigningCertificate.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.16.2.12\", this.getValueArray = function() {\n        if (this.params == null || this.params == null || this.params.array == null) throw new t(\"parameter 'array' not specified\");\n        for(var u = this.params.array, p = [], c = 0; c < u.length; c++){\n            var y = u[c];\n            e.hasis == !1 && typeof y == \"string\" && (y.indexOf(\"-----BEGIN\") != -1 || V.isASN1HEX(y)) && (y = {\n                cert: y\n            }), y.hasis != !1 && e.hasis == !1 && (y.hasis = !1), p.push(new h(y));\n        }\n        var v = new s({\n            array: p\n        }), o = new s({\n            array: [\n                v\n            ]\n        });\n        return [\n            o\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SigningCertificate, a.asn1.cms.Attribute);\na.asn1.cms.ESSCertID = function(e) {\n    a.asn1.cms.ESSCertID.superclass.constructor.call(this);\n    var t = Error, r = a, i = r.asn1, s = i.DEROctetString, n = i.DERSequence, h = i.cms.IssuerSerial;\n    this.params = null, this.getCertHash = function(u, p) {\n        if (u.hash != null) return u.hash;\n        if (typeof u == \"string\" && u.indexOf(\"-----BEGIN\") == -1 && !V.isASN1HEX(u)) return u;\n        var c;\n        if (typeof u == \"string\") c = u;\n        else if (u.cert != null) c = u.cert;\n        else throw new t(\"hash nor cert unspecified\");\n        var y;\n        c.indexOf(\"-----BEGIN\") != -1 ? y = ie(c) : y = c, typeof u == \"string\" && (u.indexOf(\"-----BEGIN\") != -1 ? y = ie(u) : V.isASN1HEX(u) && (y = u));\n        var v;\n        if (u.alg != null) v = u.alg;\n        else if (p != null) v = p;\n        else throw new t(\"hash alg unspecified\");\n        return r.crypto.Util.hashHex(y, v);\n    }, this.tohex = function() {\n        var u = this.params, p = this.getCertHash(u, \"sha1\"), c = [];\n        c.push(new s({\n            hex: p\n        })), (typeof u == \"string\" && u.indexOf(\"-----BEGIN\") != -1 || u.cert != null && u.hasis != !1 || u.issuer != null && u.serial != null) && c.push(new h(u));\n        var y = new n({\n            array: c\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.ESSCertID, a.asn1.ASN1Object);\na.asn1.cms.SigningCertificateV2 = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence;\n    i.x509;\n    var n = i.cms, h = n.ESSCertIDv2;\n    r.crypto, n.SigningCertificateV2.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.16.2.47\", this.getValueArray = function() {\n        if (this.params == null || this.params == null || this.params.array == null) throw new t(\"parameter 'array' not specified\");\n        for(var u = this.params.array, p = [], c = 0; c < u.length; c++){\n            var y = u[c];\n            (e.alg != null || e.hasis == !1) && typeof y == \"string\" && (y.indexOf(\"-----BEGIN\") != -1 || V.isASN1HEX(y)) && (y = {\n                cert: y\n            }), y.alg == null && e.alg != null && (y.alg = e.alg), y.hasis != !1 && e.hasis == !1 && (y.hasis = !1), p.push(new h(y));\n        }\n        var v = new s({\n            array: p\n        }), o = new s({\n            array: [\n                v\n            ]\n        });\n        return [\n            o\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SigningCertificateV2, a.asn1.cms.Attribute);\na.asn1.cms.ESSCertIDv2 = function(e) {\n    a.asn1.cms.ESSCertIDv2.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.DEROctetString, s = r.DERSequence, n = r.cms.IssuerSerial, h = r.x509.AlgorithmIdentifier;\n    this.params = null, this.tohex = function() {\n        var u = this.params, p = this.getCertHash(u, \"sha256\"), c = [];\n        u.alg != null && u.alg != \"sha256\" && c.push(new h({\n            name: u.alg\n        })), c.push(new i({\n            hex: p\n        })), (typeof u == \"string\" && u.indexOf(\"-----BEGIN\") != -1 || u.cert != null && u.hasis != !1 || u.issuer != null && u.serial != null) && c.push(new n(u));\n        var y = new s({\n            array: c\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.ESSCertIDv2, a.asn1.cms.ESSCertID);\na.asn1.cms.IssuerSerial = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERInteger, n = i.DERSequence, h = i.cms, u = i.x509, p = u.GeneralNames, c = L;\n    h.IssuerSerial.superclass.constructor.call(this), this.setByParam = function(y) {\n        this.params = y;\n    }, this.tohex = function() {\n        var y = this.params, v, o;\n        if (typeof y == \"string\" && y.indexOf(\"-----BEGIN\") != -1 || y.cert != null) {\n            var l;\n            y.cert != null ? l = y.cert : l = y;\n            var f = new c();\n            f.readCertPEM(l), v = f.getIssuer(), o = {\n                hex: f.getSerialNumberHex()\n            };\n        } else if (y.issuer != null && y.serial) v = y.issuer, o = y.serial;\n        else throw new t(\"cert or issuer and serial parameter not specified\");\n        var d = new p([\n            {\n                dn: v\n            }\n        ]), g = new s(o), S = new n({\n            array: [\n                d,\n                g\n            ]\n        });\n        return S.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.IssuerSerial, a.asn1.ASN1Object);\na.asn1.cms.SignerIdentifier = function(e) {\n    var t = a, r = t.asn1;\n    r.DERInteger, r.DERSequence;\n    var i = r.cms, s = i.IssuerAndSerialNumber, n = i.SubjectKeyIdentifier, h = r.x509;\n    h.X500Name, i.SignerIdentifier.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var u = this.params;\n        if (u.type == \"isssn\") {\n            var p = new s(u);\n            return p.tohex();\n        } else if (u.type == \"skid\") {\n            var c = new n(u);\n            return c.tohex();\n        } else throw new Error(\"wrong property for isssn or skid\");\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SignerIdentifier, a.asn1.ASN1Object);\na.asn1.cms.IssuerAndSerialNumber = function(e) {\n    var t = a, r = t.asn1, i = r.DERInteger, s = r.DERSequence, n = r.cms, h = r.x509, u = h.X500Name, p = L, c = Error;\n    n.IssuerAndSerialNumber.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var y = this.params, v, o;\n        if (typeof y == \"string\" && y.indexOf(\"-----BEGIN\") != -1 || y.cert != null) {\n            var l;\n            y.cert != null ? l = y.cert : l = y;\n            var f = new p();\n            f.readCertPEM(l), v = f.getIssuer(), o = {\n                hex: f.getSerialNumberHex()\n            };\n        } else if (y.issuer != null && y.serial) v = y.issuer, o = y.serial;\n        else throw new c(\"cert or issuer and serial parameter not specified\");\n        var d = new u(v), g = new i(o), S = new s({\n            array: [\n                d,\n                g\n            ]\n        });\n        return S.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(y) {\n        this.params = y;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.IssuerAndSerialNumber, a.asn1.ASN1Object);\na.asn1.cms.SubjectKeyIdentifier = function(e) {\n    var t = a, r = t.asn1;\n    r.DERInteger, r.DERSequence;\n    var i = r.ASN1Util.newObject, s = r.cms;\n    s.IssuerAndSerialName, s.SubjectKeyIdentifier;\n    var n = r.x509;\n    n.X500Name;\n    var h = L, u = Error;\n    s.SubjectKeyIdentifier.superclass.constructor.call(this), this.tohex = function() {\n        var p = this.params;\n        if (p.cert == null && p.skid == null) throw new u(\"property cert nor skid undefined\");\n        var c;\n        if (p.cert != null) {\n            var y = new h(p.cert), v = y.getExtSubjectKeyIdentifier();\n            c = v.kid.hex;\n        } else p.skid != null && (c = p.skid);\n        var o = i({\n            tag: {\n                tage: \"a0\",\n                obj: {\n                    octstr: {\n                        hex: c\n                    }\n                }\n            }\n        });\n        return o.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SubjectKeyIdentifier, a.asn1.ASN1Object);\na.asn1.cms.AttributeList = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSet, n = i.cms;\n    n.AttributeList.superclass.constructor.call(this), this.params = null, this.hTLV = null, this.setByParam = function(h) {\n        this.params = h;\n    }, this.tohex = function() {\n        var h = this.params;\n        if (this.hTLV != null) return this.hTLV;\n        var u = !0;\n        h.sortflag != null && (u = h.sortflag);\n        for(var p = h.array, c = [], y = 0; y < p.length; y++){\n            var v = p[y], o = v.attr;\n            if (o == \"contentType\") c.push(new n.ContentType(v));\n            else if (o == \"messageDigest\") c.push(new n.MessageDigest(v));\n            else if (o == \"signingTime\") c.push(new n.SigningTime(v));\n            else if (o == \"signingCertificate\") c.push(new n.SigningCertificate(v));\n            else if (o == \"signingCertificateV2\") c.push(new n.SigningCertificateV2(v));\n            else if (o == \"signaturePolicyIdentifier\") c.push(new a.asn1.cades.SignaturePolicyIdentifier(v));\n            else if (o == \"signatureTimeStamp\" || o == \"timeStampToken\") c.push(new a.asn1.cades.SignatureTimeStamp(v));\n            else throw new t(\"unknown attr: \" + o);\n        }\n        var l = new s({\n            array: c,\n            sortflag: u\n        });\n        return this.hTLV = l.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.AttributeList, a.asn1.ASN1Object);\na.asn1.cms.SignerInfo = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERInteger, n = i.DEROctetString, h = i.DERSequence, u = i.DERTaggedObject, p = i.cms, c = p.SignerIdentifier, y = p.AttributeList;\n    p.ContentType, p.EncapsulatedContentInfo, p.MessageDigest, p.SignedData;\n    var v = i.x509, o = v.AlgorithmIdentifier, l = r.crypto, f = k;\n    p.SignerInfo.superclass.constructor.call(this), this.params = null, this.sign = function() {\n        var d = this.params, g = d.sigalg, S = new y(d.sattrs).tohex(), b = f.getKey(d.signkey), D = new l.Signature({\n            alg: g\n        });\n        D.init(b), D.updateHex(S);\n        var A = D.sign();\n        d.sighex = A;\n    }, this.tohex = function() {\n        var d = this.params, g = [];\n        if (g.push(new s({\n            int: d.version\n        })), g.push(new c(d.id)), g.push(new o({\n            name: d.hashalg\n        })), d.sattrs != null) {\n            var S = new y(d.sattrs);\n            try {\n                g.push(new u({\n                    tag: \"a0\",\n                    explicit: !1,\n                    obj: S\n                }));\n            } catch (D) {\n                throw new t(\"si sattr error: \" + D);\n            }\n        }\n        if (d.sigalgfield != null ? g.push(new o({\n            name: d.sigalgfield\n        })) : g.push(new o({\n            name: d.sigalg\n        })), d.sighex == null && d.signkey != null && this.sign(), g.push(new n({\n            hex: d.sighex\n        })), d.uattrs != null) {\n            var S = new y(d.uattrs);\n            try {\n                g.push(new u({\n                    tag: \"a1\",\n                    explicit: !1,\n                    obj: S\n                }));\n            } catch (A) {\n                throw new t(\"si uattr error: \" + A);\n            }\n        }\n        var b = new h({\n            array: g\n        });\n        return b.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SignerInfo, a.asn1.ASN1Object);\na.asn1.cms.EncapsulatedContentInfo = function(e) {\n    var t = a, r = t.asn1, i = r.DERTaggedObject, s = r.DERSequence, n = r.DERObjectIdentifier, h = r.DEROctetString, u = r.cms;\n    u.EncapsulatedContentInfo.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var p = this.params, c = [];\n        if (c.push(new n(p.type)), p.content != null && (p.content.hex != null || p.content.str != null) && p.isDetached != !0) {\n            var y = new h(p.content), v = new i({\n                tag: \"a0\",\n                explicit: !0,\n                obj: y\n            });\n            c.push(v);\n        }\n        var o = new s({\n            array: c\n        });\n        return o.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(p) {\n        this.params = p;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.EncapsulatedContentInfo, a.asn1.ASN1Object);\na.asn1.cms.ContentInfo = function(e) {\n    var t = a, r = t.asn1, i = r.DERTaggedObject, s = r.DERSequence, n = r.DERObjectIdentifier, h = r.x509;\n    h.OID.name2obj, a.asn1.cms.ContentInfo.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var u = this.params, p = [];\n        p.push(new n(u.type));\n        var c = new i({\n            tag: \"a0\",\n            explicit: !0,\n            obj: u.obj\n        });\n        p.push(c);\n        var y = new s({\n            array: p\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(u) {\n        this.params = u;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.ContentInfo, a.asn1.ASN1Object);\na.asn1.cms.SignedData = function(e) {\n    var t = a, r = t.asn1;\n    r.ASN1Object;\n    var i = r.DERInteger, s = r.DERSet, n = r.DERSequence;\n    r.DERTaggedObject;\n    var h = r.cms, u = h.EncapsulatedContentInfo, p = h.SignerInfo, c = h.ContentInfo, y = h.CertificateSet, v = h.RevocationInfoChoices, o = r.x509, l = o.AlgorithmIdentifier;\n    a.asn1.cms.SignedData.superclass.constructor.call(this), this.params = null, this.checkAndFixParam = function() {\n        var f = this.params;\n        this._setDigestAlgs(f), this._setContentTypeByEContent(f), this._setMessageDigestByEContent(f), this._setSignerInfoVersion(f), this._setSignedDataVersion(f);\n    }, this._setDigestAlgs = function(f) {\n        for(var d = {}, g = f.sinfos, S = 0; S < g.length; S++){\n            var b = g[S];\n            d[b.hashalg] = 1;\n        }\n        f.hashalgs = Object.keys(d).sort();\n    }, this._setContentTypeByEContent = function(f) {\n        for(var d = f.econtent.type, g = f.sinfos, S = 0; S < g.length; S++){\n            var b = g[S], D = this._getAttrParamByName(b, \"contentType\");\n            D.type = d;\n        }\n    }, this._setMessageDigestByEContent = function(f) {\n        var d = f.econtent;\n        f.econtent.type;\n        var g = d.content.hex;\n        g == null && d.type == \"data\" && d.content.str != null && (g = Pe(d.content.str));\n        for(var S = f.sinfos, b = 0; b < S.length; b++){\n            var D = S[b], A = D.hashalg, I = this._getAttrParamByName(D, \"messageDigest\"), m = a.crypto.Util.hashHex(g, A);\n            I.hex = m;\n        }\n    }, this._getAttrParamByName = function(f, d) {\n        for(var g = f.sattrs.array, S = 0; S < g.length; S++)if (g[S].attr == d) return g[S];\n    }, this._setSignerInfoVersion = function(f) {\n        for(var d = f.sinfos, g = 0; g < d.length; g++){\n            var S = d[g], b = 1;\n            S.id.type == \"skid\" && (b = 3), S.version = b;\n        }\n    }, this._setSignedDataVersion = function(f) {\n        var d = this._getSignedDataVersion(f);\n        f.version = d;\n    }, this._getSignedDataVersion = function(f) {\n        if (f.revinfos != null) for(var d = f.revinfos, g = 0; g < d.length; g++){\n            var S = d[g];\n            if (S.ocsp != null) return 5;\n        }\n        for(var b = f.sinfos, g = 0; g < b.length; g++){\n            var D = f.sinfos[g];\n            if (D.version == 3) return 3;\n        }\n        return f.econtent.type != \"data\" ? 3 : 1;\n    }, this.tohex = function() {\n        var f = this.params;\n        this.getEncodedHexPrepare != null && this.getEncodedHexPrepare(), f.fixed != !0 && this.checkAndFixParam();\n        var d = [];\n        d.push(new i({\n            int: f.version\n        }));\n        for(var g = [], S = 0; S < f.hashalgs.length; S++){\n            var b = f.hashalgs[S];\n            g.push(new l({\n                name: b\n            }));\n        }\n        d.push(new s({\n            array: g\n        })), d.push(new u(f.econtent)), f.certs != null && d.push(new y(f.certs)), f.revinfos != null && d.push(new v(f.revinfos));\n        for(var D = [], S = 0; S < f.sinfos.length; S++){\n            var A = f.sinfos[S];\n            D.push(new p(A));\n        }\n        d.push(new s({\n            array: D\n        }));\n        var I = new n({\n            array: d\n        });\n        return I.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.getContentInfo = function() {\n        var f = new c({\n            type: \"signed-data\",\n            obj: this\n        });\n        return f;\n    }, this.getContentInfoEncodedHex = function() {\n        return this.getContentInfo().tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.SignedData, a.asn1.ASN1Object);\na.asn1.cms.CertificateSet = function(e) {\n    a.asn1.cms.CertificateSet.superclass.constructor.call(this);\n    var t = Error, r = a.asn1, i = r.DERTaggedObject, s = r.DERSet, n = r.ASN1Object;\n    this.params = null, this.tohex = function() {\n        var h = this.params, u = [], p;\n        if (h instanceof Array) p = h;\n        else if (h.array != null) p = h.array;\n        else throw new t(\"cert array not specified\");\n        for(var c = 0; c < p.length; c++){\n            var y = p[c], v = ie(y), o = new n();\n            o.hTLV = v, u.push(o);\n        }\n        var l = {\n            array: u\n        };\n        h.sortflag == !1 && (l.sortflag = !1);\n        var f = new s(l), d = new i({\n            tag: \"a0\",\n            explicit: !1,\n            obj: f\n        });\n        return d.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.CertificateSet, a.asn1.ASN1Object);\na.asn1.cms.RevocationInfoChoices = function(e) {\n    a.asn1.cms.RevocationInfoChoices.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var t = this.params;\n        if (!t instanceof Array) throw new Error(\"params is not array\");\n        for(var r = [], i = 0; i < t.length; i++)r.push(new a.asn1.cms.RevocationInfoChoice(t[i]));\n        var s = a.asn1.ASN1Util.newObject({\n            tag: {\n                tagi: \"a1\",\n                obj: {\n                    set: r\n                }\n            }\n        });\n        return s.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.RevocationInfoChoices, a.asn1.ASN1Object);\na.asn1.cms.RevocationInfoChoice = function(e) {\n    a.asn1.cms.RevocationInfoChoice.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var t = this.params;\n        if (t.crl != null && typeof t.crl == \"string\") {\n            var r = t.crl;\n            return t.crl.indexOf(\"-----BEGIN\") != -1 && (r = ie(t.crl)), r;\n        } else if (t.ocsp != null) {\n            var i = a.asn1.ASN1Util.newObject({\n                tag: {\n                    tagi: \"a1\",\n                    obj: new a.asn1.cms.OtherRevocationFormat(t)\n                }\n            });\n            return i.tohex();\n        } else throw new Error(\"property crl or ocsp undefined\");\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.RevocationInfoChoice, a.asn1.ASN1Object);\na.asn1.cms.OtherRevocationFormat = function(e) {\n    a.asn1.cms.OtherRevocationFormat.superclass.constructor.call(this);\n    var t = Error, r = a, i = r.asn1, s = i.ASN1Util.newObject, n = r.lang.String.isHex;\n    this.params = null, this.tohex = function() {\n        var h = this.params;\n        if (h.ocsp == null) throw new t(\"property ocsp not specified\");\n        if (!n(h.ocsp) || !V.isASN1HEX(h.ocsp)) throw new t(\"ocsp value not ASN.1 hex string\");\n        var u = s({\n            seq: [\n                {\n                    oid: \"1.3.6.1.5.5.7.16.2\"\n                },\n                {\n                    asn1: {\n                        tlv: h.ocsp\n                    }\n                }\n            ]\n        });\n        return u.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cms.OtherRevocationFormat, a.asn1.ASN1Object);\na.asn1.cms.CMSUtil = new function() {}();\na.asn1.cms.CMSUtil.newSignedData = function(e) {\n    return new a.asn1.cms.SignedData(e);\n};\na.asn1.cms.CMSUtil.verifySignedData = function(e) {\n    var t = a, r = t.asn1, i = r.cms;\n    i.SignerInfo, i.SignedData, i.SigningTime, i.SigningCertificate, i.SigningCertificateV2;\n    var s = r.cades;\n    s.SignaturePolicyIdentifier;\n    var n = t.lang.String.isHex, h = V, u = h.getVbyList, p = h.getTLVbyList, c = h.getIdxbyList, y = h.getChildIdx, v = h.getTLV, o = h.oidname, l = t.crypto.Util.hashHex;\n    e.cms === void 0 && n(e.cms);\n    var f = e.cms, d = function(w, x) {\n        for(var F, P = 3; P < 6; P++)if (F = c(w, 0, [\n            1,\n            0,\n            P\n        ]), F !== void 0) {\n            var T = w.substr(F, 2);\n            T === \"a0\" && (x.certsIdx = F), T === \"a1\" && (x.revinfosIdx = F), T === \"31\" && (x.signerinfosIdx = F);\n        }\n    }, g = function(w, x) {\n        var F = x.signerinfosIdx;\n        if (F !== void 0) {\n            var P = y(w, F);\n            x.signerInfoIdxList = P;\n            for(var T = 0; T < P.length; T++){\n                var H = P[T], C = {\n                    idx: H\n                };\n                S(w, C), x.signerInfos.push(C);\n            }\n        }\n    }, S = function(w, x) {\n        var F = x.idx;\n        x.signerid_issuer1 = p(w, F, [\n            1,\n            0\n        ], \"30\"), x.signerid_serial1 = u(w, F, [\n            1,\n            1\n        ], \"02\"), x.hashalg = o(u(w, F, [\n            2,\n            0\n        ], \"06\"));\n        var P = c(w, F, [\n            3\n        ], \"a0\");\n        x.idxSignedAttrs = P, b(w, x, P);\n        var T = y(w, F), H = T.length;\n        if (H < 6) throw \"malformed SignerInfo\";\n        x.sigalg = o(u(w, F, [\n            H - 2,\n            0\n        ], \"06\")), x.sigval = u(w, F, [\n            H - 1\n        ], \"04\");\n    }, b = function(w, x, F) {\n        var P = y(w, F);\n        x.signedAttrIdxList = P;\n        for(var T = 0; T < P.length; T++){\n            var H = P[T], C = u(w, H, [\n                0\n            ], \"06\"), B;\n            C === \"2a864886f70d010905\" ? (B = W(u(w, H, [\n                1,\n                0\n            ])), x.saSigningTime = B) : C === \"2a864886f70d010904\" && (B = u(w, H, [\n                1,\n                0\n            ], \"04\"), x.saMessageDigest = B);\n        }\n    }, D = function(w, x) {\n        if (u(w, 0, [\n            0\n        ], \"06\") !== \"2a864886f70d010702\") return x;\n        x.cmsType = \"signedData\", x.econtent = u(w, 0, [\n            1,\n            0,\n            2,\n            1,\n            0\n        ]), d(w, x), x.signerInfos = [], g(w, x);\n    }, A = function(w, x) {\n        for(var F = x.parse.signerInfos, P = F.length, T = !0, H = 0; H < P; H++){\n            var C = F[H];\n            m(w, x, C), C.isValid || (T = !1);\n        }\n        x.isValid = T;\n    }, I = function(w, x, F, P) {\n        var T = x.parse.certsIdx, H;\n        if (x.certs === void 0) {\n            H = [], x.certkeys = [];\n            for(var C = y(w, T), B = 0; B < C.length; B++){\n                var O = v(w, C[B]), j = new L();\n                j.readCertHex(O), H[B] = j, x.certkeys[B] = j.getPublicKey();\n            }\n            x.certs = H;\n        } else H = x.certs;\n        x.cccc = H.length, x.cccci = C.length;\n        for(var B = 0; B < H.length; B++){\n            var fe = j.getIssuerHex(), Z = j.getSerialNumberHex();\n            F.signerid_issuer1 === fe && F.signerid_serial1 === Z && (F.certkey_idx = B);\n        }\n    }, m = function(w, x, F, P) {\n        F.verifyDetail = {};\n        var T = F.verifyDetail, H = x.parse.econtent, C = F.hashalg, B = F.saMessageDigest;\n        T.validMessageDigest = !1, l(H, C) === B && (T.validMessageDigest = !0), I(w, x, F), T.validSignatureValue = !1;\n        var O = F.sigalg, j = \"31\" + v(w, F.idxSignedAttrs).substr(2);\n        F.signedattrshex = j;\n        var fe = x.certs[F.certkey_idx].getPublicKey(), Z = new a.crypto.Signature({\n            alg: O\n        });\n        Z.init(fe), Z.updateHex(j);\n        var X = Z.verify(F.sigval);\n        T.validSignatureValue_isValid = X, X === !0 && (T.validSignatureValue = !0), F.isValid = !1, T.validMessageDigest && T.validSignatureValue && (F.isValid = !0);\n    }, E = {\n        isValid: !1,\n        parse: {}\n    };\n    return D(f, E.parse), A(f, E), E;\n};\na.asn1.cms.CMSParser = function() {\n    var e = Error, t = L, r = new t(), i = V, s = i.getV, n = i.getTLV;\n    i.getIdxbyList;\n    var h = i.getTLVbyList, u = i.getTLVbyListEx, p = i.getVbyList, c = i.getVbyListEx, y = i.getChildIdx;\n    this.getCMSSignedData = function(v) {\n        var o = h(v, 0, [\n            1,\n            0\n        ]), l = this.getSignedData(o);\n        return l;\n    }, this.getSignedData = function(v) {\n        var o = y(v, 0), l = {}, f = s(v, o[0]), d = parseInt(f, 16);\n        l.version = d;\n        var g = n(v, o[1]);\n        l.hashalgs = this.getHashAlgArray(g);\n        var S = n(v, o[2]);\n        l.econtent = this.getEContent(S);\n        var b = u(v, 0, [\n            \"[0]\"\n        ]);\n        b != null && (l.certs = this.getCertificateSet(b)), u(v, 0, [\n            \"[1]\"\n        ]);\n        var D = u(v, 0, [\n            3\n        ]);\n        return l.sinfos = this.getSignerInfos(D), l;\n    }, this.getHashAlgArray = function(v) {\n        for(var o = y(v, 0), l = new t(), f = [], d = 0; d < o.length; d++){\n            var g = n(v, o[d]), S = l.getAlgorithmIdentifierName(g);\n            f.push(S);\n        }\n        return f;\n    }, this.getEContent = function(v) {\n        var o = {}, l = p(v, 0, [\n            0\n        ]), f = p(v, 0, [\n            1,\n            0\n        ]);\n        return o.type = a.asn1.x509.OID.oid2name(V.hextooidstr(l)), o.content = {\n            hex: f\n        }, o;\n    }, this.getSignerInfos = function(v) {\n        for(var o = [], l = y(v, 0), f = 0; f < l.length; f++){\n            var d = n(v, l[f]), g = this.getSignerInfo(d);\n            o.push(g);\n        }\n        return o;\n    }, this.getSignerInfo = function(v) {\n        var o = {}, l = y(v, 0), f = i.getInt(v, l[0], -1);\n        f != -1 && (o.version = f);\n        var d = n(v, l[1]), g = this.getIssuerAndSerialNumber(d);\n        o.id = g;\n        var S = n(v, l[2]), b = r.getAlgorithmIdentifierName(S);\n        o.hashalg = b;\n        var D = u(v, 0, [\n            \"[0]\"\n        ]);\n        if (D != null) {\n            var A = this.getAttributeList(D);\n            o.sattrs = A;\n        }\n        var I = u(v, 0, [\n            3\n        ]), m = r.getAlgorithmIdentifierName(I);\n        o.sigalg = m;\n        var E = c(v, 0, [\n            4\n        ]);\n        o.sighex = E;\n        var w = u(v, 0, [\n            \"[1]\"\n        ]);\n        if (w != null) {\n            var x = this.getAttributeList(w);\n            o.uattrs = x;\n        }\n        return o;\n    }, this.getSignerIdentifier = function(v) {\n        if (v.substr(0, 2) == \"30\") return this.getIssuerAndSerialNumber(v);\n        throw new Error(\"SKID of signerIdentifier not supported\");\n    }, this.getIssuerAndSerialNumber = function(v) {\n        var o = {\n            type: \"isssn\"\n        }, l = y(v, 0), f = n(v, l[0]);\n        o.issuer = r.getX500Name(f);\n        var d = s(v, l[1]);\n        return o.serial = {\n            hex: d\n        }, o;\n    }, this.getAttributeList = function(v) {\n        for(var o = [], l = y(v, 0), f = 0; f < l.length; f++){\n            var d = n(v, l[f]), g = this.getAttribute(d);\n            o.push(g);\n        }\n        return {\n            array: o\n        };\n    }, this.getAttribute = function(v) {\n        var o = {}, l = y(v, 0), f = i.getOID(v, l[0]), d = a.asn1.x509.OID.oid2name(f);\n        o.attr = d;\n        var g = n(v, l[1]), S = y(g, 0);\n        if (S.length == 1) o.valhex = n(g, S[0]);\n        else {\n            for(var b = [], D = 0; D < S.length; D++)b.push(n(g, S[D]));\n            o.valhex = b;\n        }\n        return d == \"contentType\" ? this.setContentType(o) : d == \"messageDigest\" ? this.setMessageDigest(o) : d == \"signingTime\" ? this.setSigningTime(o) : d == \"signingCertificate\" ? this.setSigningCertificate(o) : d == \"signingCertificateV2\" ? this.setSigningCertificateV2(o) : d == \"signaturePolicyIdentifier\" && this.setSignaturePolicyIdentifier(o), o;\n    }, this.setContentType = function(v) {\n        var o = i.getOIDName(v.valhex, 0, null);\n        o != null && (v.type = o, delete v.valhex);\n    }, this.setSigningTime = function(v) {\n        var o = s(v.valhex, 0), l = W(o);\n        v.str = l, delete v.valhex;\n    }, this.setMessageDigest = function(v) {\n        var o = s(v.valhex, 0);\n        v.hex = o, delete v.valhex;\n    }, this.setSigningCertificate = function(v) {\n        var o = y(v.valhex, 0);\n        if (o.length > 0) {\n            for(var l = n(v.valhex, o[0]), f = y(l, 0), d = [], g = 0; g < f.length; g++){\n                var S = n(l, f[g]), b = this.getESSCertID(S);\n                d.push(b);\n            }\n            v.array = d;\n        }\n        if (o.length > 1) {\n            var D = n(v.valhex, o[1]);\n            v.polhex = D;\n        }\n        delete v.valhex;\n    }, this.setSignaturePolicyIdentifier = function(v) {\n        var o = y(v.valhex, 0);\n        if (o.length > 0) {\n            var l = i.getOID(v.valhex, o[0]);\n            v.oid = l;\n        }\n        if (o.length > 1) {\n            var f = new t(), d = y(v.valhex, o[1]), g = n(v.valhex, d[0]), S = f.getAlgorithmIdentifierName(g);\n            v.alg = S;\n            var b = s(v.valhex, d[1]);\n            v.hash = b;\n        }\n        delete v.valhex;\n    }, this.setSigningCertificateV2 = function(v) {\n        var o = y(v.valhex, 0);\n        if (o.length > 0) {\n            for(var l = n(v.valhex, o[0]), f = y(l, 0), d = [], g = 0; g < f.length; g++){\n                var S = n(l, f[g]), b = this.getESSCertIDv2(S);\n                d.push(b);\n            }\n            v.array = d;\n        }\n        if (o.length > 1) {\n            var D = n(v.valhex, o[1]);\n            v.polhex = D;\n        }\n        delete v.valhex;\n    }, this.getESSCertID = function(v) {\n        var o = {}, l = y(v, 0);\n        if (l.length > 0) {\n            var f = s(v, l[0]);\n            o.hash = f;\n        }\n        if (l.length > 1) {\n            var d = n(v, l[1]), g = this.getIssuerSerial(d);\n            g.serial != null && (o.serial = g.serial), g.issuer != null && (o.issuer = g.issuer);\n        }\n        return o;\n    }, this.getESSCertIDv2 = function(v) {\n        var o = {}, l = y(v, 0);\n        if (l.length < 1 || 3 < l.length) throw new e(\"wrong number of elements\");\n        var f = 0;\n        if (v.substr(l[0], 2) == \"30\") {\n            var d = n(v, l[0]);\n            o.alg = r.getAlgorithmIdentifierName(d), f++;\n        } else o.alg = \"sha256\";\n        var g = s(v, l[f]);\n        if (o.hash = g, l.length > f + 1) {\n            var S = n(v, l[f + 1]), b = this.getIssuerSerial(S);\n            o.issuer = b.issuer, o.serial = b.serial;\n        }\n        return o;\n    }, this.getIssuerSerial = function(v) {\n        var o = {}, l = y(v, 0), f = n(v, l[0]), d = r.getGeneralNames(f), g = d[0].dn;\n        o.issuer = g;\n        var S = s(v, l[1]);\n        return o.serial = {\n            hex: S\n        }, o;\n    }, this.getCertificateSet = function(v) {\n        for(var o = y(v, 0), l = [], f = 0; f < o.length; f++){\n            var d = n(v, o[f]);\n            if (d.substr(0, 2) == \"30\") {\n                var g = de(d, \"CERTIFICATE\");\n                l.push(g);\n            }\n        }\n        return {\n            array: l,\n            sortflag: !1\n        };\n    };\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\n(typeof a.asn1.tsp > \"u\" || !a.asn1.tsp) && (a.asn1.tsp = {});\na.asn1.tsp.TimeStampToken = function(e) {\n    var t = a, r = t.asn1, i = r.tsp;\n    i.TimeStampToken.superclass.constructor.call(this), this.params = null, this.getEncodedHexPrepare = function() {\n        var s = new i.TSTInfo(this.params.econtent.content);\n        this.params.econtent.content.hex = s.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.TimeStampToken, a.asn1.cms.SignedData);\na.asn1.tsp.TSTInfo = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DERInteger, n = r.DERBoolean, h = r.DERGeneralizedTime, u = r.DERObjectIdentifier, p = r.DERTaggedObject, c = r.tsp, y = c.MessageImprint, v = c.Accuracy;\n    r.x509.X500Name;\n    var o = r.x509.GeneralName;\n    if (c.TSTInfo.superclass.constructor.call(this), this.dVersion = new s({\n        int: 1\n    }), this.dPolicy = null, this.dMessageImprint = null, this.dSerial = null, this.dGenTime = null, this.dAccuracy = null, this.dOrdering = null, this.dNonce = null, this.dTsa = null, this.tohex = function() {\n        var l = [\n            this.dVersion\n        ];\n        if (this.dPolicy == null) throw new Error(\"policy shall be specified.\");\n        if (l.push(this.dPolicy), this.dMessageImprint == null) throw new Error(\"messageImprint shall be specified.\");\n        if (l.push(this.dMessageImprint), this.dSerial == null) throw new Error(\"serialNumber shall be specified.\");\n        if (l.push(this.dSerial), this.dGenTime == null) throw new Error(\"genTime shall be specified.\");\n        l.push(this.dGenTime), this.dAccuracy != null && l.push(this.dAccuracy), this.dOrdering != null && l.push(this.dOrdering), this.dNonce != null && l.push(this.dNonce), this.dTsa != null && l.push(this.dTsa);\n        var f = new i({\n            array: l\n        });\n        return this.hTLV = f.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0) {\n        if (typeof e.policy == \"string\") {\n            if (!e.policy.match(/^[0-9.]+$/)) throw \"policy shall be oid like 0.1.4.134\";\n            this.dPolicy = new u({\n                oid: e.policy\n            });\n        }\n        e.messageImprint !== void 0 && (this.dMessageImprint = new y(e.messageImprint)), e.serial !== void 0 && (this.dSerial = new s(e.serial)), e.genTime !== void 0 && (this.dGenTime = new h(e.genTime)), e.accuracy !== void 0 && (this.dAccuracy = new v(e.accuracy)), e.ordering !== void 0 && e.ordering == !0 && (this.dOrdering = new n()), e.nonce !== void 0 && (this.dNonce = new s(e.nonce)), e.tsa !== void 0 && (this.dTsa = new p({\n            tag: \"a0\",\n            explicit: !0,\n            obj: new o({\n                dn: e.tsa\n            })\n        }));\n    }\n};\nN(a.asn1.tsp.TSTInfo, a.asn1.ASN1Object);\na.asn1.tsp.Accuracy = function(e) {\n    var t = a, r = t.asn1, i = r.ASN1Util.newObject;\n    r.tsp.Accuracy.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var s = this.params, n = [];\n        return s.seconds != null && typeof s.seconds == \"number\" && n.push({\n            int: s.seconds\n        }), s.millis != null && typeof s.millis == \"number\" && n.push({\n            tag: {\n                tagi: \"80\",\n                obj: {\n                    int: s.millis\n                }\n            }\n        }), s.micros != null && typeof s.micros == \"number\" && n.push({\n            tag: {\n                tagi: \"81\",\n                obj: {\n                    int: s.micros\n                }\n            }\n        }), i({\n            seq: n\n        }).tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.Accuracy, a.asn1.ASN1Object);\na.asn1.tsp.MessageImprint = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DEROctetString, n = r.x509, h = n.AlgorithmIdentifier;\n    r.tsp.MessageImprint.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var u = this.params, p = new h({\n            name: u.alg\n        }), c = new s({\n            hex: u.hash\n        }), y = new i({\n            array: [\n                p,\n                c\n            ]\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.tsp.MessageImprint, a.asn1.ASN1Object);\na.asn1.tsp.TimeStampReq = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DERInteger, n = r.DERBoolean;\n    r.ASN1Object;\n    var h = r.DERObjectIdentifier, u = r.tsp, p = u.MessageImprint;\n    u.TimeStampReq.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var c = this.params, y = [];\n        y.push(new s({\n            int: 1\n        })), c.messageImprint instanceof a.asn1.ASN1Object ? y.push(c.messageImprint) : y.push(new p(c.messageImprint)), c.policy != null && y.push(new h(c.policy)), c.nonce != null && y.push(new s(c.nonce)), c.certreq == !0 && y.push(new n());\n        var v = new i({\n            array: y\n        });\n        return v.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.TimeStampReq, a.asn1.ASN1Object);\na.asn1.tsp.TimeStampResp = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence;\n    r.ASN1Object;\n    var s = r.tsp, n = s.PKIStatusInfo;\n    s.TimeStampResp.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var h = this.params, u = [];\n        if (h.econtent != null || h.tst != null) if (h.statusinfo != null ? u.push(new n(h.statusinfo)) : u.push(new n(\"granted\")), h.econtent != null) u.push(new s.TimeStampToken(h).getContentInfo());\n        else if (h.tst instanceof r.ASN1Object) u.push(h.tst);\n        else throw new Error(\"improper member tst value\");\n        else if (h.statusinfo != null) u.push(new n(h.statusinfo));\n        else throw new Error(\"parameter for token nor statusinfo not specified\");\n        var p = new i({\n            array: u\n        });\n        return p.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.TimeStampResp, a.asn1.ASN1Object);\na.asn1.tsp.PKIStatusInfo = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.tsp, h = n.PKIStatus, u = n.PKIFreeText, p = n.PKIFailureInfo;\n    n.PKIStatusInfo.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var c = this.params, y = [];\n        if (typeof c == \"string\") y.push(new h(c));\n        else {\n            if (c.status == null) throw new t(\"property 'status' unspecified\");\n            y.push(new h(c.status)), c.statusstr != null && y.push(new u(c.statusstr)), c.failinfo != null && y.push(new p(c.failinfo));\n        }\n        var v = new s({\n            array: y\n        });\n        return v.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.PKIStatusInfo, a.asn1.ASN1Object);\na.asn1.tsp.PKIStatus = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERInteger, n = i.tsp;\n    n.PKIStatus.superclass.constructor.call(this);\n    var h = {\n        granted: 0,\n        grantedWithMods: 1,\n        rejection: 2,\n        waiting: 3,\n        revocationWarning: 4,\n        revocationNotification: 5\n    };\n    this.params = null, this.tohex = function() {\n        var u = this.params, p;\n        if (typeof u == \"string\") try {\n            p = h[u];\n        } catch  {\n            throw new t(\"undefined name: \" + u);\n        }\n        else if (typeof u == \"number\") p = u;\n        else throw new t(\"unsupported params\");\n        return new s({\n            int: p\n        }).tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.PKIStatus, a.asn1.ASN1Object);\na.asn1.tsp.PKIFreeText = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.DERUTF8String, h = i.tsp;\n    h.PKIFreeText.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var u = this.params;\n        if (!u instanceof Array) throw new t(\"wrong params: not array\");\n        for(var p = [], c = 0; c < u.length; c++)p.push(new n({\n            str: u[c]\n        }));\n        var y = new s({\n            array: p\n        });\n        return y.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.PKIFreeText, a.asn1.ASN1Object);\na.asn1.tsp.PKIFailureInfo = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERBitString, n = i.tsp, h = n.PKIFailureInfo, u = {\n        badAlg: 0,\n        badRequest: 2,\n        badDataFormat: 5,\n        timeNotAvailable: 14,\n        unacceptedPolicy: 15,\n        unacceptedExtension: 16,\n        addInfoNotAvailable: 17,\n        systemFailure: 25\n    };\n    h.superclass.constructor.call(this), this.params = null, this.getBinValue = function() {\n        var p = this.params, c = 0;\n        if (typeof p == \"number\" && 0 <= p && p <= 25) {\n            c |= 1 << p;\n            for(var y = c.toString(2), v = \"\", o = y.length - 1; o >= 0; o--)v += y[o];\n            return v;\n        } else {\n            if (typeof p == \"string\" && u[p] != null) return rt([\n                p\n            ], u);\n            if (typeof p == \"object\" && p.length != null) return rt(p, u);\n            throw new t(\"wrong params\");\n        }\n    }, this.tohex = function() {\n        this.params;\n        var p = this.getBinValue();\n        return new s({\n            bin: p\n        }).tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.tsp.PKIFailureInfo, a.asn1.ASN1Object);\na.asn1.tsp.AbstractTSAAdapter = function(e) {\n    this.getTSTHex = function(t, r) {\n        throw \"not implemented yet\";\n    };\n};\na.asn1.tsp.SimpleTSAAdapter = function(e) {\n    var t = a, r = t.asn1, i = r.tsp, s = t.crypto.Util.hashHex;\n    i.SimpleTSAAdapter.superclass.constructor.call(this), this.params = null, this.serial = 0, this.getTSTHex = function(n, h) {\n        var u = s(n, h);\n        this.params.econtent.content.messageImprint = {\n            alg: h,\n            hash: u\n        }, this.params.econtent.content.serial = {\n            int: this.serial++\n        };\n        var p = Math.floor(Math.random() * 1e9);\n        this.params.econtent.content.nonce = {\n            int: p\n        };\n        var c = new i.TimeStampToken(this.params);\n        return c.getContentInfoEncodedHex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.tsp.SimpleTSAAdapter, a.asn1.tsp.AbstractTSAAdapter);\na.asn1.tsp.FixedTSAAdapter = function(e) {\n    var t = a, r = t.asn1, i = r.tsp, s = t.crypto.Util.hashHex;\n    i.FixedTSAAdapter.superclass.constructor.call(this), this.params = null, this.getTSTHex = function(n, h) {\n        var u = s(n, h);\n        this.params.econtent.content.messageImprint = {\n            alg: h,\n            hash: u\n        };\n        var p = new i.TimeStampToken(this.params);\n        return p.getContentInfoEncodedHex();\n    }, e !== void 0 && (this.params = e);\n};\nN(a.asn1.tsp.FixedTSAAdapter, a.asn1.tsp.AbstractTSAAdapter);\na.asn1.tsp.TSPUtil = new function() {}();\na.asn1.tsp.TSPUtil.newTimeStampToken = function(e) {\n    return new a.asn1.tsp.TimeStampToken(e);\n};\na.asn1.tsp.TSPUtil.parseTimeStampReq = function(e) {\n    var t = new a.asn1.tsp.TSPParser();\n    return t.getTimeStampReq(e);\n};\na.asn1.tsp.TSPUtil.parseMessageImprint = function(e) {\n    var t = new a.asn1.tsp.TSPParser();\n    return t.getMessageImprint(e);\n};\na.asn1.tsp.TSPParser = function() {\n    var e = L, t = new e(), r = V, i = r.getV, s = r.getTLV, n = r.getIdxbyList;\n    r.getTLVbyListEx;\n    var h = r.getChildIdx, u = [\n        \"granted\",\n        \"grantedWithMods\",\n        \"rejection\",\n        \"waiting\",\n        \"revocationWarning\",\n        \"revocationNotification\"\n    ], p = {\n        0: \"badAlg\",\n        2: \"badRequest\",\n        5: \"badDataFormat\",\n        14: \"timeNotAvailable\",\n        15: \"unacceptedPolicy\",\n        16: \"unacceptedExtension\",\n        17: \"addInfoNotAvailable\",\n        25: \"systemFailure\"\n    };\n    this.getResponse = function(c) {\n        var y = h(c, 0);\n        if (y.length == 1) return this.getPKIStatusInfo(s(c, y[0]));\n        if (y.length > 1) {\n            var v = this.getPKIStatusInfo(s(c, y[0])), o = s(c, y[1]), l = this.getToken(o);\n            return l.statusinfo = v, l;\n        }\n    }, this.getToken = function(c) {\n        var y = new a.asn1.cms.CMSParser(), v = y.getCMSSignedData(c);\n        return this.setTSTInfo(v), v;\n    }, this.setTSTInfo = function(c) {\n        var y = c.econtent;\n        if (y.type == \"tstinfo\") {\n            var v = y.content.hex, o = this.getTSTInfo(v);\n            y.content = o;\n        }\n    }, this.getTSTInfo = function(c) {\n        var y = {}, v = h(c, 0), o = i(c, v[1]);\n        y.policy = ft(o);\n        var l = s(c, v[2]);\n        y.messageImprint = this.getMessageImprint(l);\n        var f = i(c, v[3]);\n        y.serial = {\n            hex: f\n        };\n        var d = i(c, v[4]);\n        y.genTime = {\n            str: W(d)\n        };\n        var g = 0;\n        if (v.length > 5 && c.substr(v[5], 2) == \"30\") {\n            var S = s(c, v[5]);\n            y.accuracy = this.getAccuracy(S), g++;\n        }\n        if (v.length > 5 + g && c.substr(v[5 + g], 2) == \"01\") {\n            var b = i(c, v[5 + g]);\n            b == \"ff\" && (y.ordering = !0), g++;\n        }\n        if (v.length > 5 + g && c.substr(v[5 + g], 2) == \"02\") {\n            var D = i(c, v[5 + g]);\n            y.nonce = {\n                hex: D\n            }, g++;\n        }\n        if (v.length > 5 + g && c.substr(v[5 + g], 2) == \"a0\") {\n            var A = s(c, v[5 + g]);\n            A = \"30\" + A.substr(2), pGeneralNames = t.getGeneralNames(A);\n            var I = pGeneralNames[0].dn;\n            y.tsa = I, g++;\n        }\n        if (v.length > 5 + g && c.substr(v[5 + g], 2) == \"a1\") {\n            var m = s(c, v[5 + g]);\n            m = \"30\" + m.substr(2);\n            var E = t.getExtParamArray(m);\n            y.ext = E, g++;\n        }\n        return y;\n    }, this.getAccuracy = function(c) {\n        for(var y = {}, v = h(c, 0), o = 0; o < v.length; o++){\n            var l = c.substr(v[o], 2), f = i(c, v[o]), d = parseInt(f, 16);\n            l == \"02\" ? y.seconds = d : l == \"80\" ? y.millis = d : l == \"81\" && (y.micros = d);\n        }\n        return y;\n    }, this.getMessageImprint = function(c) {\n        if (c.substr(0, 2) != \"30\") throw new Error(\"head of messageImprint hex shall be x30\");\n        var y = {};\n        h(c, 0);\n        var v = n(c, 0, [\n            0,\n            0\n        ]), o = i(c, v), l = r.hextooidstr(o), f = a.asn1.x509.OID.oid2name(l);\n        if (f == \"\") throw new Error(\"hashAlg name undefined: \" + l);\n        var d = f, g = n(c, 0, [\n            1\n        ]);\n        return y.alg = d, y.hash = i(c, g), y;\n    }, this.getPKIStatusInfo = function(c) {\n        var y = {}, v = h(c, 0), o = 0;\n        try {\n            var l = i(c, v[0]), f = parseInt(l, 16);\n            y.status = u[f];\n        } catch  {}\n        if (v.length > 1 && c.substr(v[1], 2) == \"30\") {\n            var d = s(c, v[1]);\n            y.statusstr = this.getPKIFreeText(d), o++;\n        }\n        if (v.length > o && c.substr(v[1 + o], 2) == \"03\") {\n            var g = s(c, v[1 + o]);\n            y.failinfo = this.getPKIFailureInfo(g);\n        }\n        return y;\n    }, this.getPKIFreeText = function(c) {\n        for(var y = [], v = h(c, 0), o = 0; o < v.length; o++)y.push(r.getString(c, v[o]));\n        return y;\n    }, this.getPKIFailureInfo = function(c) {\n        var y = r.getInt(c, 0);\n        return p[y] != null ? p[y] : y;\n    }, this.getTimeStampReq = function(c) {\n        var y = {};\n        y.certreq = !1;\n        var v = h(c, 0);\n        if (v.length < 2) throw new Error(\"TimeStampReq must have at least 2 items\");\n        var o = s(c, v[1]);\n        y.messageImprint = a.asn1.tsp.TSPUtil.parseMessageImprint(o);\n        for(var l = 2; l < v.length; l++){\n            var f = v[l], d = c.substr(f, 2);\n            if (d == \"06\") {\n                var g = i(c, f);\n                y.policy = r.hextooidstr(g);\n            }\n            d == \"02\" && (y.nonce = i(c, f)), d == \"01\" && (y.certreq = !0);\n        }\n        return y;\n    };\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\n(typeof a.asn1.cades > \"u\" || !a.asn1.cades) && (a.asn1.cades = {});\na.asn1.cades.SignaturePolicyIdentifier = function(e) {\n    var t = a, r = t.asn1, i = r.cades, s = i.SignaturePolicyId;\n    i.SignaturePolicyIdentifier.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.16.2.15\", this.params = null, this.getValueArray = function() {\n        return [\n            new s(this.params)\n        ];\n    }, this.setByParam = function(n) {\n        this.params = n;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.SignaturePolicyIdentifier, a.asn1.cms.Attribute);\na.asn1.cades.SignaturePolicyId = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.DERObjectIdentifier, n = r.x509;\n    n.AlgorithmIdentifier;\n    var h = r.cades, u = h.SignaturePolicyId, p = h.OtherHashAlgAndValue;\n    u.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var c = this.params, y = [];\n        y.push(new s(c.oid)), y.push(new p(c));\n        var v = new i({\n            array: y\n        });\n        return v.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(c) {\n        this.params = c;\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.SignaturePolicyId, a.asn1.ASN1Object);\na.asn1.cades.OtherHashAlgAndValue = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.DEROctetString, h = i.x509, u = h.AlgorithmIdentifier, p = i.cades, c = p.OtherHashAlgAndValue;\n    c.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var y = this.params;\n        if (y.alg == null) throw new t(\"property 'alg' not specified\");\n        if (y.hash == null && y.cert == null) throw new t(\"property 'hash' nor 'cert' not specified\");\n        var v = null;\n        if (y.hash != null) v = y.hash;\n        else if (y.cert != null) {\n            if (typeof y.cert != \"string\") throw new t(\"cert not string\");\n            var o = y.cert;\n            y.cert.indexOf(\"-----BEGIN\") != -1 && (o = ie(y.cert)), v = a.crypto.Util.hashHex(o, y.alg);\n        }\n        var l = [];\n        l.push(new u({\n            name: y.alg\n        })), l.push(new n({\n            hex: v\n        }));\n        var f = new s({\n            array: l\n        });\n        return f.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.OtherHashAlgAndValue, a.asn1.ASN1Object);\na.asn1.cades.OtherHashValue = function(e) {\n    a.asn1.cades.OtherHashValue.superclass.constructor.call(this);\n    var t = Error, r = a;\n    r.lang.String.isHex;\n    var i = r.asn1, s = i.DEROctetString;\n    r.crypto.Util.hashHex, this.params = null, this.tohex = function() {\n        var n = this.params;\n        if (n.hash == null && n.cert == null) throw new t(\"hash or cert not specified\");\n        var h = null;\n        if (n.hash != null) h = n.hash;\n        else if (n.cert != null) {\n            if (typeof n.cert != \"string\") throw new t(\"cert not string\");\n            var u = n.cert;\n            n.cert.indexOf(\"-----BEGIN\") != -1 && (u = ie(n.cert)), h = a.crypto.Util.hashHex(u, \"sha1\");\n        }\n        return new s({\n            hex: h\n        }).tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.OtherHashValue, a.asn1.ASN1Object);\na.asn1.cades.SignatureTimeStamp = function(e) {\n    var t = Error, r = a, i = r.lang.String.isHex, s = r.asn1, n = s.ASN1Object;\n    s.x509;\n    var h = s.cades;\n    h.SignatureTimeStamp.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.16.2.14\", this.params = null, this.getValueArray = function() {\n        var u = this.params;\n        if (u.tst != null) if (i(u.tst)) {\n            var p = new n();\n            return p.hTLV = u.tst, [\n                p\n            ];\n        } else {\n            if (u.tst instanceof n) return [\n                u.tst\n            ];\n            throw new t(\"params.tst has wrong value\");\n        }\n        else if (u.res != null) {\n            var c = u.res;\n            if (c instanceof n && (c = c.tohex()), typeof c != \"string\" || !i(c)) throw new t(\"params.res has wrong value\");\n            V.getTLVbyList(c, 0, [\n                1\n            ]);\n            var p = new n();\n            return p.hTLV = u.tst, [\n                p\n            ];\n        }\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.SignatureTimeStamp, a.asn1.cms.Attribute);\na.asn1.cades.CompleteCertificateRefs = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.cades, h = n.OtherCertID, u = r.lang.String.isHex;\n    n.CompleteCertificateRefs.superclass.constructor.call(this), this.typeOid = \"1.2.840.113549.1.9.16.2.21\", this.params = null, this.getValueArray = function() {\n        for(var p = this.params, c = [], y = 0; y < p.array.length; y++){\n            var v = p.array[y];\n            if (typeof v == \"string\") if (v.indexOf(\"-----BEGIN\") != -1) v = {\n                cert: v\n            };\n            else if (u(v)) v = {\n                hash: v\n            };\n            else throw new t(\"unsupported value: \" + v);\n            p.alg != null && v.alg == null && (v.alg = p.alg), p.hasis != null && v.hasis == null && (v.hasis = p.hasis);\n            var o = new h(v);\n            c.push(o);\n        }\n        var l = new s({\n            array: c\n        });\n        return [\n            l\n        ];\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.CompleteCertificateRefs, a.asn1.cms.Attribute);\na.asn1.cades.OtherCertID = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.cms, n = s.IssuerSerial, h = r.cades, u = h.OtherHashValue, p = h.OtherHashAlgAndValue;\n    h.OtherCertID.superclass.constructor.call(this), this.params = e, this.tohex = function() {\n        var c = this.params;\n        typeof c == \"string\" && (c.indexOf(\"-----BEGIN\") != -1 ? c = {\n            cert: c\n        } : _isHex(c) && (c = {\n            hash: c\n        }));\n        var y = [], v = null;\n        if (c.alg != null ? v = new p(c) : v = new u(c), y.push(v), c.cert != null && c.hasis == !0 || c.issuer != null && c.serial != null) {\n            var o = new n(c);\n            y.push(o);\n        }\n        var l = new i({\n            array: y\n        });\n        return l.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.OtherCertID, a.asn1.ASN1Object);\na.asn1.cades.OtherHash = function(e) {\n    var t = a, r = t.asn1;\n    r.cms;\n    var i = r.cades, s = i.OtherHashAlgAndValue, n = i.OtherHashValue;\n    t.crypto.Util.hashHex;\n    var h = t.lang.String.isHex;\n    i.OtherHash.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var u = this.params;\n        typeof u == \"string\" && (u.indexOf(\"-----BEGIN\") != -1 ? u = {\n            cert: u\n        } : h(u) && (u = {\n            hash: u\n        }));\n        var p = null;\n        return u.alg != null ? p = new s(u) : p = new n(u), p.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e != null && this.setByParam(e);\n};\nN(a.asn1.cades.OtherHash, a.asn1.ASN1Object);\na.asn1.cades.CAdESUtil = new function() {}();\na.asn1.cades.CAdESUtil.parseSignedDataForAddingUnsigned = function(e) {\n    var t = new a.asn1.cms.CMSParser(), r = t.getCMSSignedData(e);\n    return r;\n};\na.asn1.cades.CAdESUtil.parseSignerInfoForAddingUnsigned = function(e, t, r) {\n    var i = V, s = i.getChildIdx, n = i.getTLV, h = i.getV, u = a, p = u.asn1, c = p.ASN1Object, y = p.cms, v = y.AttributeList, o = y.SignerInfo, l = {}, f = s(e, t);\n    if (f.length != 6) throw \"not supported items for SignerInfo (!=6)\";\n    var d = f.shift();\n    l.version = n(e, d);\n    var g = f.shift();\n    l.si = n(e, g);\n    var S = f.shift();\n    l.digalg = n(e, S);\n    var b = f.shift();\n    l.sattrs = n(e, b);\n    var D = f.shift();\n    l.sigalg = n(e, D);\n    var A = f.shift();\n    l.sig = n(e, A), l.sigval = h(e, A);\n    var I = null;\n    return l.obj = new o(), I = new c(), I.hTLV = l.version, l.obj.dCMSVersion = I, I = new c(), I.hTLV = l.si, l.obj.dSignerIdentifier = I, I = new c(), I.hTLV = l.digalg, l.obj.dDigestAlgorithm = I, I = new c(), I.hTLV = l.sattrs, l.obj.dSignedAttrs = I, I = new c(), I.hTLV = l.sigalg, l.obj.dSigAlg = I, I = new c(), I.hTLV = l.sig, l.obj.dSig = I, l.obj.dUnsignedAttrs = new v(), l;\n};\n(typeof a.asn1.csr > \"u\" || !a.asn1.csr) && (a.asn1.csr = {});\na.asn1.csr.CertificationRequest = function(e) {\n    var t = a, r = t.asn1, i = r.DERBitString, s = r.DERSequence, n = r.csr;\n    r.x509;\n    var h = n.CertificationRequestInfo;\n    n.CertificationRequest.superclass.constructor.call(this), this.setByParam = function(u) {\n        this.params = u;\n    }, this.sign = function() {\n        var u = new h(this.params).tohex(), p = new a.crypto.Signature({\n            alg: this.params.sigalg\n        });\n        p.init(this.params.sbjprvkey), p.updateHex(u);\n        var c = p.sign();\n        this.params.sighex = c;\n    }, this.getPEM = function() {\n        return de(this.tohex(), \"CERTIFICATE REQUEST\");\n    }, this.tohex = function() {\n        var u = this.params, p = new a.asn1.csr.CertificationRequestInfo(this.params), c = new a.asn1.x509.AlgorithmIdentifier({\n            name: u.sigalg\n        });\n        if (u.sighex == null && u.sbjprvkey != null && this.sign(), u.sighex == null) throw new Error(\"sighex or sbjprvkey parameter not defined\");\n        var y = new i({\n            hex: \"00\" + u.sighex\n        }), v = new s({\n            array: [\n                p,\n                c,\n                y\n            ]\n        });\n        return v.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.csr.CertificationRequest, a.asn1.ASN1Object);\na.asn1.csr.CertificationRequestInfo = function(e) {\n    var t = a, r = t.asn1;\n    r.DERBitString;\n    var i = r.DERSequence, s = r.DERInteger, n = r.DERUTF8String, h = r.DERTaggedObject, u = r.ASN1Util.newObject, p = r.csr, c = r.x509, y = c.X500Name, v = c.Extensions, o = c.SubjectPublicKeyInfo;\n    p.AttributeList, p.CertificationRequestInfo.superclass.constructor.call(this), this.params = null, this.setByParam = function(f) {\n        f != null && (this.params = f);\n    }, this.tohex = function() {\n        var f = this.params, d = [];\n        if (d.push(new s({\n            int: 0\n        })), d.push(new y(f.subject)), d.push(new o(k.getKey(f.sbjpubkey))), f.attrs != null) {\n            var g = l(f.attrs), S = u({\n                tag: {\n                    tage: \"a0\",\n                    obj: g\n                }\n            });\n            d.push(S);\n        } else if (f.extreq != null) {\n            var b = new v(f.extreq), S = u({\n                tag: {\n                    tage: \"a0\",\n                    obj: {\n                        seq: [\n                            {\n                                oid: \"1.2.840.113549.1.9.14\"\n                            },\n                            {\n                                set: [\n                                    b\n                                ]\n                            }\n                        ]\n                    }\n                }\n            });\n            d.push(S);\n        } else d.push(new h({\n            tag: \"a0\",\n            explicit: !1,\n            obj: new n({\n                str: \"\"\n            })\n        }));\n        var D = new i({\n            array: d\n        });\n        return D.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    };\n    function l(f) {\n        for(var d = Error, g = a.asn1.x509.Extensions, S = [], b = 0; b < f.length; b++){\n            var D = f[b], A = D.attr;\n            if (A == \"extensionRequest\") {\n                var I = new g(D.ext), m = {\n                    seq: [\n                        {\n                            oid: \"1.2.840.113549.1.9.14\"\n                        },\n                        {\n                            set: [\n                                I\n                            ]\n                        }\n                    ]\n                };\n                S.push(m);\n            } else if (A == \"unstructuredName\") {\n                var m = {\n                    seq: [\n                        {\n                            oid: \"1.2.840.113549.1.9.2\"\n                        },\n                        {\n                            set: D.names\n                        }\n                    ]\n                };\n                S.push(m);\n            } else if (A == \"challengePassword\") {\n                var m = {\n                    seq: [\n                        {\n                            oid: \"1.2.840.113549.1.9.7\"\n                        },\n                        {\n                            set: [\n                                {\n                                    utf8str: D.password\n                                }\n                            ]\n                        }\n                    ]\n                };\n                S.push(m);\n            } else throw new d(\"unknown CSR attribute\");\n        }\n        return {\n            set: S\n        };\n    }\n    e != null && this.setByParam(e);\n};\nN(a.asn1.csr.CertificationRequestInfo, a.asn1.ASN1Object);\na.asn1.csr.AttributeList = function(e) {};\nN(a.asn1.csr.AttributeList, a.asn1.ASN1Object);\na.asn1.csr.CSRUtil = new function() {}();\na.asn1.csr.CSRUtil.newCSRPEM = function(e) {\n    var t = a.asn1.csr, r = new t.CertificationRequest(e), i = r.getPEM();\n    return i;\n};\na.asn1.csr.CSRUtil.getParam = function(e, t) {\n    var r = V, i = r.getV, s = r.getIdxbyList, n = r.getTLVbyList, h = r.getTLVbyListEx, u = r.getVbyListEx, p = function(b) {\n        var D = s(b, 0, [\n            0,\n            3,\n            0,\n            0\n        ], \"06\");\n        return i(b, D) != \"2a864886f70d01090e\" ? null : n(b, 0, [\n            0,\n            3,\n            0,\n            1,\n            0\n        ], \"30\");\n    }, c = {};\n    if (e.indexOf(\"-----BEGIN CERTIFICATE REQUEST\") == -1) throw new Error(\"argument is not PEM file\");\n    var y = ie(e, \"CERTIFICATE REQUEST\");\n    t && (c.tbs = n(y, 0, [\n        0\n    ]));\n    try {\n        var v = h(y, 0, [\n            0,\n            1\n        ]);\n        if (v == \"3000\") c.subject = {};\n        else {\n            var d = new L();\n            c.subject = d.getX500Name(v);\n        }\n    } catch  {}\n    var o = h(y, 0, [\n        0,\n        2\n    ]), l = k.getKey(o, null, \"pkcs8pub\");\n    c.sbjpubkey = k.getPEM(l, \"PKCS8PUB\");\n    var f = p(y), d = new L();\n    f != null && (c.extreq = d.getExtParamArray(f));\n    try {\n        var g = h(y, 0, [\n            1\n        ], \"30\"), d = new L();\n        c.sigalg = d.getAlgorithmIdentifierName(g);\n    } catch  {}\n    try {\n        var S = u(y, 0, [\n            2\n        ]);\n        c.sighex = S;\n    } catch  {}\n    return c;\n};\na.asn1.csr.CSRUtil.verifySignature = function(e) {\n    try {\n        var t = null;\n        if (typeof e == \"string\" && e.indexOf(\"-----BEGIN CERTIFICATE REQUEST\") != -1 ? t = a.asn1.csr.CSRUtil.getParam(e, !0) : typeof e == \"object\" && e.sbjpubkey != null && e.sigalg != null && e.sighex != null && e.tbs != null && (t = e), t == null) return !1;\n        var r = new a.crypto.Signature({\n            alg: t.sigalg\n        });\n        return r.init(t.sbjpubkey), r.updateHex(t.tbs), r.verify(t.sighex);\n    } catch (i) {\n        return alert(i), !1;\n    }\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.asn1 > \"u\" || !a.asn1) && (a.asn1 = {});\n(typeof a.asn1.ocsp > \"u\" || !a.asn1.ocsp) && (a.asn1.ocsp = {});\na.asn1.ocsp.DEFAULT_HASH = \"sha1\";\na.asn1.ocsp.OCSPResponse = function(e) {\n    a.asn1.ocsp.OCSPResponse.superclass.constructor.call(this), a.asn1.DEREnumerated;\n    var t = a.asn1.ASN1Util.newObject, r = a.asn1.ocsp.ResponseBytes, i = [\n        \"successful\",\n        \"malformedRequest\",\n        \"internalError\",\n        \"tryLater\",\n        \"_not_used_\",\n        \"sigRequired\",\n        \"unauthorized\"\n    ];\n    this.params = null, this._getStatusCode = function() {\n        var s = this.params.resstatus;\n        return typeof s == \"number\" ? s : typeof s != \"string\" ? -1 : i.indexOf(s);\n    }, this.setByParam = function(s) {\n        this.params = s;\n    }, this.tohex = function() {\n        var s = this.params, n = this._getStatusCode();\n        if (n == -1) throw new Error(\"responseStatus not supported: \" + s.resstatus);\n        if (n != 0) return t({\n            seq: [\n                {\n                    enum: {\n                        int: n\n                    }\n                }\n            ]\n        }).tohex();\n        var h = new r(s);\n        return t({\n            seq: [\n                {\n                    enum: {\n                        int: 0\n                    }\n                },\n                {\n                    tag: {\n                        tag: \"a0\",\n                        explicit: !0,\n                        obj: h\n                    }\n                }\n            ]\n        }).tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.OCSPResponse, a.asn1.ASN1Object);\na.asn1.ocsp.ResponseBytes = function(e) {\n    a.asn1.ocsp.ResponseBytes.superclass.constructor.call(this);\n    var t = a.asn1, r = t.DERSequence, i = t.DERObjectIdentifier, s = t.DEROctetString, n = t.ocsp.BasicOCSPResponse;\n    this.params = null, this.setByParam = function(h) {\n        this.params = h;\n    }, this.tohex = function() {\n        var h = this.params;\n        if (h.restype != \"ocspBasic\") throw new Error(\"not supported responseType: \" + h.restype);\n        var u = new n(h), p = [];\n        p.push(new i({\n            name: \"ocspBasic\"\n        })), p.push(new s({\n            hex: u.tohex()\n        }));\n        var c = new r({\n            array: p\n        });\n        return c.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.ResponseBytes, a.asn1.ASN1Object);\na.asn1.ocsp.BasicOCSPResponse = function(e) {\n    a.asn1.ocsp.BasicOCSPResponse.superclass.constructor.call(this);\n    var t = Error, r = a.asn1, i = r.ASN1Object, s = r.DERSequence;\n    r.DERGeneralizedTime;\n    var n = r.DERTaggedObject, h = r.DERBitString;\n    r.x509.Extensions;\n    var u = r.x509.AlgorithmIdentifier, p = r.ocsp;\n    p.ResponderID, _SingleResponseList = p.SingleResponseList, _ResponseData = p.ResponseData, this.params = null, this.setByParam = function(c) {\n        this.params = c;\n    }, this.sign = function() {\n        var c = this.params, y = c.tbsresp.tohex(), v = new a.crypto.Signature({\n            alg: c.sigalg\n        });\n        v.init(c.reskey), v.updateHex(y), c.sighex = v.sign();\n    }, this.tohex = function() {\n        var c = this.params;\n        c.tbsresp == null && (c.tbsresp = new _ResponseData(c)), c.sighex == null && c.reskey != null && this.sign();\n        var y = [];\n        if (y.push(c.tbsresp), y.push(new u({\n            name: c.sigalg\n        })), y.push(new h({\n            hex: \"00\" + c.sighex\n        })), c.certs != null && c.certs.length != null) {\n            for(var v = [], o = 0; o < c.certs.length; o++){\n                var l = c.certs[o], f = null;\n                if (V.isASN1HEX(l)) f = l;\n                else if (l.match(/-----BEGIN/)) f = ie(l);\n                else throw new t(\"certs[\" + o + \"] not hex or PEM\");\n                v.push(new i({\n                    tlv: f\n                }));\n            }\n            var d = new s({\n                array: v\n            });\n            y.push(new n({\n                tag: \"a0\",\n                explicit: !0,\n                obj: d\n            }));\n        }\n        var g = new s({\n            array: y\n        });\n        return g.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.BasicOCSPResponse, a.asn1.ASN1Object);\na.asn1.ocsp.ResponseData = function(e) {\n    a.asn1.ocsp.ResponseData.superclass.constructor.call(this);\n    var t = a.asn1, r = t.DERSequence, i = t.DERGeneralizedTime, s = t.DERTaggedObject, n = t.x509.Extensions, h = t.ocsp, u = h.ResponderID;\n    _SingleResponseList = h.SingleResponseList, this.params = null, this.tohex = function() {\n        var p = this.params;\n        p.respid != null, p.prodat != null, p.array != null;\n        var c = [];\n        if (c.push(new u(p.respid)), c.push(new i(p.prodat)), c.push(new _SingleResponseList(p.array)), p.ext != null) {\n            var y = new n(p.ext);\n            c.push(new s({\n                tag: \"a1\",\n                explicit: !0,\n                obj: y\n            }));\n        }\n        var v = new r({\n            array: c\n        });\n        return v.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(p) {\n        this.params = p;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.ResponseData, a.asn1.ASN1Object);\na.asn1.ocsp.ResponderID = function(e) {\n    a.asn1.ocsp.ResponderID.superclass.constructor.call(this);\n    var t = a, r = t.asn1, i = r.ASN1Util.newObject, s = r.x509.X500Name, n = t.lang.String.isHex, h = Error;\n    this.params = null, this.tohex = function() {\n        var u = this.params;\n        if (u.key != null) {\n            var p = null;\n            if (typeof u.key == \"string\") {\n                if (n(u.key) && (p = u.key), u.key.match(/-----BEGIN CERTIFICATE/)) {\n                    var c = new L(u.key), y = c.getExtSubjectKeyIdentifier();\n                    y != null && (p = y.kid.hex);\n                }\n            } else if (u.key instanceof L) {\n                var y = u.key.getExtSubjectKeyIdentifier();\n                y != null && (p = y.kid.hex);\n            }\n            if (p == null) throw new h(\"wrong key member value\");\n            var v = i({\n                tag: {\n                    tag: \"a2\",\n                    explicit: !0,\n                    obj: {\n                        octstr: {\n                            hex: p\n                        }\n                    }\n                }\n            });\n            return v.tohex();\n        } else if (u.name != null) {\n            var o = null;\n            if (typeof u.name == \"string\" && u.name.match(/-----BEGIN CERTIFICATE/)) {\n                var c = new L(u.name);\n                o = c.getSubject();\n            } else u.name instanceof L ? o = u.name.getSubject() : typeof u.name == \"object\" && (u.name.array != null || u.name.str != null) && (o = u.name);\n            if (o == null) throw new h(\"wrong name member value\");\n            var v = i({\n                tag: {\n                    tag: \"a1\",\n                    explicit: !0,\n                    obj: new s(o)\n                }\n            });\n            return v.tohex();\n        }\n        throw new h(\"key or name not specified\");\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(u) {\n        this.params = u;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.ResponderID, a.asn1.ASN1Object);\na.asn1.ocsp.SingleResponseList = function(e) {\n    a.asn1.ocsp.SingleResponseList.superclass.constructor.call(this);\n    var t = a.asn1, r = t.DERSequence, i = t.ocsp.SingleResponse;\n    this.params = null, this.tohex = function() {\n        var s = this.params;\n        if (typeof s != \"object\" || s.length == null) throw new Error(\"params not specified properly\");\n        for(var n = [], h = 0; h < s.length; h++)n.push(new i(s[h]));\n        var u = new r({\n            array: n\n        });\n        return u.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(s) {\n        this.params = s;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.SingleResponseList, a.asn1.ASN1Object);\na.asn1.ocsp.SingleResponse = function(e) {\n    var t = Error, r = a, i = r.asn1, s = i.DERSequence, n = i.DERGeneralizedTime, h = i.DERTaggedObject, u = i.ocsp, p = u.CertID, c = u.CertStatus, y = i.x509, v = y.Extensions;\n    u.SingleResponse.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var o = this.params, l = [];\n        if (o.certid == null) throw new t(\"certid unspecified\");\n        if (o.status == null) throw new t(\"status unspecified\");\n        if (o.thisupdate == null) throw new t(\"thisupdate unspecified\");\n        if (l.push(new p(o.certid)), l.push(new c(o.status)), l.push(new n(o.thisupdate)), o.nextupdate != null) {\n            var f = new n(o.nextupdate);\n            l.push(new h({\n                tag: \"a0\",\n                explicit: !0,\n                obj: f\n            }));\n        }\n        if (o.ext != null) {\n            var d = new v(o.ext);\n            l.push(new h({\n                tag: \"a1\",\n                explicit: !0,\n                obj: d\n            }));\n        }\n        var g = new s({\n            array: l\n        });\n        return g.tohex();\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(o) {\n        this.params = o;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.SingleResponse, a.asn1.ASN1Object);\na.asn1.ocsp.CertID = function(e) {\n    var t = a, r = t.asn1, i = r.DEROctetString, s = r.DERInteger, n = r.DERSequence, h = r.x509, u = h.AlgorithmIdentifier, p = r.ocsp;\n    p.DEFAULT_HASH;\n    var c = t.crypto, y = c.Util.hashHex, v = L, o = V, l = o.getVbyList;\n    p.CertID.superclass.constructor.call(this), this.DEFAULT_HASH = \"sha1\", this.params = null, this.setByValue = function(f, d, g, S) {\n        S == null && (S = this.DEFAULT_HASH), this.params = {\n            alg: S,\n            issname: f,\n            isskey: d,\n            sbjsn: g\n        };\n    }, this.setByCert = function(f, d, g) {\n        g == null && (g = this.DEFAULT_HASH), this.params = {\n            alg: g,\n            issuerCert: f,\n            subjectCert: d\n        };\n    }, this.getParamByCerts = function(f, d, g) {\n        g == null && (g = this.DEFAULT_HASH);\n        var S = new v(f), b = new v(d), D = y(S.getSubjectHex(), g), A = S.getPublicKeyHex(), I = y(l(A, 0, [\n            1\n        ], \"03\", !0), g), m = b.getSerialNumberHex(), E = {\n            alg: g,\n            issname: D,\n            isskey: I,\n            sbjsn: m\n        };\n        return E;\n    }, this.tohex = function() {\n        if (typeof this.params != \"object\") throw new Error(\"params not set\");\n        var f = this.params, d, g, S, b;\n        if (f.alg == null ? b = this.DEFAULT_HASH : b = f.alg, f.issuerCert != null && f.subjectCert != null) {\n            var D = this.getParamByCerts(f.issuerCert, f.subjectCert, b);\n            d = D.issname, g = D.isskey, S = D.sbjsn;\n        } else if (f.issname != null && f.isskey != null && f.sbjsn != null) d = f.issname, g = f.isskey, S = f.sbjsn;\n        else throw new Error(\"required param members not defined\");\n        var A = new u({\n            name: b\n        }), I = new i({\n            hex: d\n        }), m = new i({\n            hex: g\n        }), E = new s({\n            hex: S\n        }), w = new n({\n            array: [\n                A,\n                I,\n                m,\n                E\n            ]\n        });\n        return this.hTLV = w.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.CertID, a.asn1.ASN1Object);\na.asn1.ocsp.CertStatus = function(e) {\n    a.asn1.ocsp.CertStatus.superclass.constructor.call(this), this.params = null, this.tohex = function() {\n        var t = this.params;\n        if (t.status == \"good\") return \"8000\";\n        if (t.status == \"unknown\") return \"8200\";\n        if (t.status == \"revoked\") {\n            var r = [\n                {\n                    gentime: {\n                        str: t.time\n                    }\n                }\n            ];\n            t.reason != null && r.push({\n                tag: {\n                    tag: \"a0\",\n                    explicit: !0,\n                    obj: {\n                        enum: {\n                            int: t.reason\n                        }\n                    }\n                }\n            });\n            var i = {\n                tag: \"a1\",\n                explicit: !1,\n                obj: {\n                    seq: r\n                }\n            };\n            return a.asn1.ASN1Util.newObject({\n                tag: i\n            }).tohex();\n        }\n        throw new Error(\"bad status\");\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, this.setByParam = function(t) {\n        this.params = t;\n    }, e !== void 0 && this.setByParam(e);\n};\nN(a.asn1.ocsp.CertStatus, a.asn1.ASN1Object);\na.asn1.ocsp.Request = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.ocsp;\n    if (s.Request.superclass.constructor.call(this), this.dReqCert = null, this.dExt = null, this.tohex = function() {\n        var h = [];\n        if (this.dReqCert === null) throw \"reqCert not set\";\n        h.push(this.dReqCert);\n        var u = new i({\n            array: h\n        });\n        return this.hTLV = u.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, typeof e < \"u\") {\n        var n = new s.CertID(e);\n        this.dReqCert = n;\n    }\n};\nN(a.asn1.ocsp.Request, a.asn1.ASN1Object);\na.asn1.ocsp.TBSRequest = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.ocsp;\n    s.TBSRequest.superclass.constructor.call(this), this.version = 0, this.dRequestorName = null, this.dRequestList = [], this.dRequestExt = null, this.setRequestListByParam = function(n) {\n        for(var h = [], u = 0; u < n.length; u++){\n            var p = new s.Request(n[0]);\n            h.push(p);\n        }\n        this.dRequestList = h;\n    }, this.tohex = function() {\n        var n = [];\n        if (this.version !== 0) throw \"not supported version: \" + this.version;\n        if (this.dRequestorName !== null) throw \"requestorName not supported\";\n        var h = new i({\n            array: this.dRequestList\n        });\n        if (n.push(h), this.dRequestExt !== null) throw \"requestExtensions not supported\";\n        var u = new i({\n            array: n\n        });\n        return this.hTLV = u.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && e.reqList !== void 0 && this.setRequestListByParam(e.reqList);\n};\nN(a.asn1.ocsp.TBSRequest, a.asn1.ASN1Object);\na.asn1.ocsp.OCSPRequest = function(e) {\n    var t = a, r = t.asn1, i = r.DERSequence, s = r.ocsp;\n    if (s.OCSPRequest.superclass.constructor.call(this), this.dTbsRequest = null, this.dOptionalSignature = null, this.tohex = function() {\n        var h = [];\n        if (this.dTbsRequest !== null) h.push(this.dTbsRequest);\n        else throw \"tbsRequest not set\";\n        if (this.dOptionalSignature !== null) throw \"optionalSignature not supported\";\n        var u = new i({\n            array: h\n        });\n        return this.hTLV = u.tohex(), this.hTLV;\n    }, this.getEncodedHex = function() {\n        return this.tohex();\n    }, e !== void 0 && e.reqList !== void 0) {\n        var n = new s.TBSRequest(e);\n        this.dTbsRequest = n;\n    }\n};\nN(a.asn1.ocsp.OCSPRequest, a.asn1.ASN1Object);\na.asn1.ocsp.OCSPUtil = {};\na.asn1.ocsp.OCSPUtil.getRequestHex = function(e, t, r) {\n    var i = a, s = i.asn1, n = s.ocsp;\n    r === void 0 && (r = n.DEFAULT_HASH);\n    var h = {\n        alg: r,\n        issuerCert: e,\n        subjectCert: t\n    }, u = new n.OCSPRequest({\n        reqList: [\n            h\n        ]\n    });\n    return u.tohex();\n};\na.asn1.ocsp.OCSPUtil.getOCSPResponseInfo = function(e) {\n    var t = V, r = t.getVbyList, i = t.getVbyListEx, s = t.getIdxbyList;\n    t.getIdxbyListEx;\n    var n = t.getV, h = {};\n    try {\n        var u = i(e, 0, [\n            0\n        ], \"0a\");\n        h.responseStatus = parseInt(u, 16);\n    } catch  {}\n    if (h.responseStatus !== 0) return h;\n    try {\n        var p = s(e, 0, [\n            1,\n            0,\n            1,\n            0,\n            0,\n            2,\n            0,\n            1\n        ]);\n        e.substr(p, 2) === \"80\" ? h.certStatus = \"good\" : e.substr(p, 2) === \"a1\" ? (h.certStatus = \"revoked\", h.revocationTime = W(r(e, p, [\n            0\n        ]))) : e.substr(p, 2) === \"82\" && (h.certStatus = \"unknown\");\n    } catch  {}\n    try {\n        var c = s(e, 0, [\n            1,\n            0,\n            1,\n            0,\n            0,\n            2,\n            0,\n            2\n        ]);\n        h.thisUpdate = W(n(e, c));\n    } catch  {}\n    try {\n        var y = s(e, 0, [\n            1,\n            0,\n            1,\n            0,\n            0,\n            2,\n            0,\n            3\n        ]);\n        e.substr(y, 2) === \"a0\" && (h.nextUpdate = W(r(e, y, [\n            0\n        ])));\n    } catch  {}\n    return h;\n};\na.asn1.ocsp.OCSPParser = function() {\n    var e = Error, t = L, r = new t(), i = V, s = i.getV, n = i.getTLV, h = i.getIdxbyList, u = i.getVbyList, p = i.getTLVbyList, c = i.getVbyListEx, y = i.getTLVbyListEx, v = i.getChildIdx;\n    this.getOCSPRequest = function(o) {\n        var l = v(o, 0);\n        if (l.length != 1 && l.length != 2) throw new e(\"wrong number elements: \" + l.length);\n        var f = this.getTBSRequest(n(o, l[0]));\n        return f;\n    }, this.getTBSRequest = function(o) {\n        var l = {}, f = y(o, 0, [\n            0\n        ], \"30\");\n        l.array = this.getRequestList(f);\n        var d = y(o, 0, [\n            \"[2]\",\n            0\n        ], \"30\");\n        return d != null && (l.ext = r.getExtParamArray(d)), l;\n    }, this.getRequestList = function(o) {\n        for(var l = [], f = v(o, 0), d = 0; d < f.length; d++){\n            var o = n(o, f[d]);\n            l.push(this.getRequest(o));\n        }\n        return l;\n    }, this.getRequest = function(o) {\n        var l = v(o, 0);\n        if (l.length != 1 && l.length != 2) throw new e(\"wrong number elements: \" + l.length);\n        var f = this.getCertID(n(o, l[0]));\n        if (l.length == 2) {\n            var d = h(o, 0, [\n                1,\n                0\n            ]);\n            f.ext = r.getExtParamArray(n(o, d));\n        }\n        return f;\n    }, this.getCertID = function(o) {\n        var l = v(o, 0);\n        if (l.length != 4) throw new e(\"wrong number elements: \" + l.length);\n        var f = new t(), d = {};\n        return d.alg = f.getAlgorithmIdentifierName(n(o, l[0])), d.issname = s(o, l[1]), d.isskey = s(o, l[2]), d.sbjsn = s(o, l[3]), d;\n    }, this.getOCSPResponse = function(o) {\n        var l = v(o, 0), f, d = s(o, l[0]), g = parseInt(d);\n        if (l.length == 1) return {\n            resstatus: g\n        };\n        var S = p(o, 0, [\n            1,\n            0\n        ]);\n        return f = this.getResponseBytes(S), f.resstatus = g, f;\n    }, this.getResponseBytes = function(o) {\n        var l = v(o, 0), f, d = p(o, 0, [\n            1,\n            0\n        ]);\n        f = this.getBasicOCSPResponse(d);\n        var g = s(o, l[0]);\n        return f.restype = a.asn1.x509.OID.oid2name(ft(g)), f;\n    }, this.getBasicOCSPResponse = function(o) {\n        var l = v(o, 0), f;\n        f = this.getResponseData(n(o, l[0]));\n        var d = new L();\n        f.alg = d.getAlgorithmIdentifierName(n(o, l[1]));\n        var g = s(o, l[2]);\n        f.sighex = g.substr(2);\n        var S = c(o, 0, [\n            \"[0]\"\n        ]);\n        if (S != null) {\n            for(var b = v(S, 0), D = [], A = 0; A < b.length; A++){\n                var I = n(S, b[A]);\n                D.push(I);\n            }\n            f.certs = D;\n        }\n        return f;\n    }, this.getResponseData = function(o) {\n        var l = v(o, 0), f = l.length, d = {}, g = 0;\n        o.substr(l[0], 2) == \"a0\" && g++, d.respid = this.getResponderID(n(o, l[g++]));\n        var S = s(o, l[g++]);\n        if (d.prodat = W(S), d.array = this.getSingleResponseList(n(o, l[g++])), o.substr(l[f - 1], 2) == \"a1\") {\n            var b = p(o, l[f - 1], [\n                0\n            ]), D = new L();\n            d.ext = D.getExtParamArray(b);\n        }\n        return d;\n    }, this.getResponderID = function(o) {\n        var l = {};\n        if (o.substr(0, 2) == \"a2\") {\n            var f = u(o, 0, [\n                0\n            ]);\n            l.key = f;\n        }\n        if (o.substr(0, 2) == \"a1\") {\n            var d = p(o, 0, [\n                0\n            ]), g = new L();\n            l.name = g.getX500Name(d);\n        }\n        return l;\n    }, this.getSingleResponseList = function(o) {\n        for(var l = v(o, 0), f = [], d = 0; d < l.length; d++){\n            var g = this.getSingleResponse(n(o, l[d]));\n            f.push(g);\n        }\n        return f;\n    }, this.getSingleResponse = function(o) {\n        var l = v(o, 0), f = {}, d = this.getCertID(n(o, l[0]));\n        f.certid = d;\n        var g = this.getCertStatus(n(o, l[1]));\n        if (f.status = g, o.substr(l[2], 2) == \"18\") {\n            var S = s(o, l[2]);\n            f.thisupdate = W(S);\n        }\n        for(var b = 3; b < l.length; b++){\n            if (o.substr(l[b], 2) == \"a0\") {\n                var D = u(o, l[b], [\n                    0\n                ], \"18\");\n                f.nextupdate = W(D);\n            }\n            if (o.substr(l[b], 2) == \"a1\") {\n                var A = new L(), I = p(o, 0, [\n                    b,\n                    0\n                ]);\n                f.ext = A.getExtParamArray(I);\n            }\n        }\n        return f;\n    }, this.getCertStatus = function(o) {\n        var l = {};\n        if (o == \"8000\") return {\n            status: \"good\"\n        };\n        if (o == \"8200\") return {\n            status: \"unknown\"\n        };\n        if (o.substr(0, 2) == \"a1\") {\n            l.status = \"revoked\";\n            var f = u(o, 0, [\n                0\n            ]), d = W(f);\n            l.time = d;\n        }\n        return l;\n    };\n};\nvar a;\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.lang > \"u\" || !a.lang) && (a.lang = {});\na.lang.String = function() {};\nfunction hn(e) {\n    for(var t = new Array(), r = 0; r < e.length; r++)t[r] = e.charCodeAt(r);\n    return t;\n}\nfunction ot(e) {\n    for(var t = \"\", r = 0; r < e.length; r++){\n        var i = e[r].toString(16);\n        i.length == 1 && (i = \"0\" + i), t = t + i;\n    }\n    return t;\n}\nfunction Ee(e) {\n    return ot(hn(e));\n}\nfunction Xe(e) {\n    return e = e.replace(/\\=/g, \"\"), e = e.replace(/\\+/g, \"-\"), e = e.replace(/\\//g, \"_\"), e;\n}\nfunction ut(e) {\n    return e.length % 4 == 2 ? e = e + \"==\" : e.length % 4 == 3 && (e = e + \"=\"), e = e.replace(/-/g, \"+\"), e = e.replace(/_/g, \"/\"), e;\n}\nfunction ae(e) {\n    return e.length % 2 == 1 && (e = \"0\" + e), Xe(_e(e));\n}\nfunction Y(e) {\n    return it(ut(e));\n}\nvar Je, we;\ntypeof Buffer == \"function\" ? (Je = function(e) {\n    return Xe(Buffer.from(e, \"utf8\").toString(\"base64\"));\n}, we = function(e) {\n    return Buffer.from(ut(e), \"base64\").toString(\"utf8\");\n}) : (Je = function(e) {\n    return ae(It(Bt(e)));\n}, we = function(e) {\n    return decodeURIComponent(Ct(Y(e)));\n});\nfunction ht(e) {\n    return It(Bt(e)).toLowerCase();\n}\nfunction W(e) {\n    try {\n        return decodeURIComponent(Ct(e));\n    } catch  {\n        return null;\n    }\n}\nfunction fn(e) {\n    return W(cn(e));\n}\nfunction cn(e) {\n    for(var t = e.match(/.{1,2}/g), r = [], i = 0; i < t.length; i++){\n        var s = parseInt(t[i], 16);\n        161 <= s && s <= 191 ? (r.push(\"c2\"), r.push(t[i])) : 192 <= s && s <= 255 ? (r.push(\"c3\"), r.push((s - 64).toString(16))) : r.push(t[i]);\n    }\n    return r.join(\"\");\n}\nfunction Ae(e) {\n    for(var t = \"\", r = 0; r < e.length - 1; r += 2)t += String.fromCharCode(parseInt(e.substr(r, 2), 16));\n    return t;\n}\nfunction Pe(e) {\n    for(var t = \"\", r = 0; r < e.length; r++)t += (\"0\" + e.charCodeAt(r).toString(16)).slice(-2);\n    return t;\n}\nfunction ln(e) {\n    return _e(e);\n}\nfunction dn(e, t) {\n    return e = e.replace(new RegExp(\"(.{\" + t + \"})\", \"g\"), `$1\\r\n`), e = e.replace(/\\s+$/, \"\"), e;\n}\nfunction pn(e) {\n    var t = e.replace(/[^0-9A-Za-z\\/+=]*/g, \"\"), r = it(t);\n    return r;\n}\nfunction de(e, t) {\n    return \"-----BEGIN \" + t + `-----\\r\n` + dn(ln(e), 64) + `\\r\n-----END ` + t + `-----\\r\n`;\n}\nfunction ie(e, t) {\n    if (e.indexOf(\"-----BEGIN \") == -1) throw new Error(\"can't find PEM header\");\n    return t !== void 0 ? (e = e.replace(new RegExp(\"^[^]*-----BEGIN \" + t + \"-----\"), \"\"), e = e.replace(new RegExp(\"-----END \" + t + \"-----[^]*$\"), \"\")) : (e = e.replace(/^[^]*-----BEGIN [^-]+-----/, \"\"), e = e.replace(/-----END [^-]+-----[^]*$/, \"\")), pn(e);\n}\nfunction vn(e) {\n    var t, r, i, s, n, h, u, p, c, y;\n    if (e = yn(e), y = e.match(/^(\\d{4})(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(|\\.\\d+)Z$/), y) return t = parseInt(y[1]), r = parseInt(y[2]) - 1, i = parseInt(y[3]), s = parseInt(y[4]), n = parseInt(y[5]), h = parseInt(y[6]), u = 0, p = y[7], p !== \"\" && (c = (p.substr(1) + \"00\").substr(0, 3), u = parseInt(c)), Date.UTC(t, r, i, s, n, h, u);\n    throw new Error(\"unsupported zulu format: \" + e);\n}\nfunction gn(e) {\n    return Math.round(vn(e) / 1e3);\n}\nfunction yn(e) {\n    return e.match(/^[0-9]{12}Z$/) || e.match(/^[0-9]{12}[.][0-9]*Z$/) ? e.match(/^[0-4]/) ? \"20\" + e : \"19\" + e : e;\n}\nfunction It(e) {\n    return e.replace(/%/g, \"\");\n}\nfunction Ct(e) {\n    return e.replace(/(..)/g, \"%$1\");\n}\nfunction vt(e) {\n    var t = \"malformed IPv6 address\";\n    if (!e.match(/^[0-9A-Fa-f:]+$/)) throw t;\n    e = e.toLowerCase();\n    var r = e.split(\":\").length - 1;\n    if (r < 2) throw t;\n    var i = \":\".repeat(7 - r + 2);\n    e = e.replace(\"::\", i);\n    var s = e.split(\":\");\n    if (s.length != 8) throw t;\n    for(var n = 0; n < 8; n++)s[n] = (\"0000\" + s[n]).slice(-4);\n    return s.join(\"\");\n}\nfunction gt(e) {\n    if (!e.match(/^[0-9A-Fa-f]{32}$/)) throw new Error(\"malformed IPv6 address: \" + e);\n    e = e.toLowerCase();\n    var t = e.match(/.{1,4}/g);\n    t = t.map(function(s) {\n        return s.replace(/^0+/, \"\");\n    }), t = t.map(function(s) {\n        return s == \"\" ? \"0\" : s;\n    }), e = \":\" + t.join(\":\") + \":\";\n    var r = e.match(/:(0:){2,}/g);\n    if (r == null) return e.slice(1, -1);\n    var i = r.sort().slice(-1)[0];\n    return e = e.replace(i.substr(0, i.length - 1), \":\"), e.substr(0, 2) != \"::\" && (e = e.substr(1)), e.substr(-2, 2) != \"::\" && (e = e.substr(0, e.length - 1)), e;\n}\nfunction tt(e) {\n    var t = new Error(\"malformed hex value\");\n    if (!e.match(/^([0-9A-Fa-f][0-9A-Fa-f]){1,}$/)) throw t;\n    if (e.length == 8) {\n        var r;\n        try {\n            return r = parseInt(e.substr(0, 2), 16) + \".\" + parseInt(e.substr(2, 2), 16) + \".\" + parseInt(e.substr(4, 2), 16) + \".\" + parseInt(e.substr(6, 2), 16), r;\n        } catch  {\n            throw t;\n        }\n    } else if (e.length == 16) try {\n        return tt(e.substr(0, 8)) + \"/\" + yt(e.substr(8));\n    } catch  {\n        throw t;\n    }\n    else {\n        if (e.length == 32) return gt(e);\n        if (e.length == 64) {\n            try {\n                return gt(e.substr(0, 32)) + \"/\" + yt(e.substr(32));\n            } catch  {\n                throw t;\n            }\n            return;\n        } else return e;\n    }\n}\nfunction yt(e) {\n    var t = new Error(\"malformed mask\"), r;\n    try {\n        r = new R(e, 16).toString(2);\n    } catch  {\n        throw t;\n    }\n    if (!r.match(/^1*0*$/)) throw t;\n    return r.replace(/0+$/, \"\").length;\n}\nfunction Rt(e) {\n    var t = new Error(\"malformed IP address\");\n    if (e = e.toLowerCase(e), !e.match(/^[0-9a-f.:/]+$/)) throw t;\n    if (e.match(/^[0-9.]+$/)) {\n        var r = e.split(\".\");\n        if (r.length !== 4) throw t;\n        var i = \"\";\n        try {\n            for(var s = 0; s < 4; s++){\n                var n = parseInt(r[s]);\n                i += (\"0\" + n.toString(16)).slice(-2);\n            }\n            return i;\n        } catch  {\n            throw t;\n        }\n    } else if (e.match(/^[0-9.]+\\/[0-9]+$/)) {\n        var h = e.split(\"/\");\n        return Rt(h[0]) + mt(parseInt(h[1]), 32);\n    } else {\n        if (e.match(/^[0-9a-f:]+$/) && e.indexOf(\":\") !== -1) return vt(e);\n        if (e.match(/^[0-9a-f:]+\\/[0-9]+$/) && e.indexOf(\":\") !== -1) {\n            var h = e.split(\"/\");\n            return vt(h[0]) + mt(parseInt(h[1]), 128);\n        } else throw t;\n    }\n}\nfunction mt(e, t) {\n    if (t == 32 && e == 0) return \"00000000\";\n    if (t == 128 && e == 0) return \"00000000000000000000000000000000\";\n    var r = Array(e + 1).join(\"1\") + Array(t - e + 1).join(\"0\");\n    return new R(r, 2).toString(16);\n}\nfunction Tt(e) {\n    function t(s) {\n        var n = parseInt(s.substr(0, 2), 16), h = parseInt(s.substr(2), 16);\n        if (n == 0 & h < 128) return String.fromCharCode(h);\n        if (n < 8) {\n            var u = 192 | (n & 7) << 3 | (h & 192) >> 6, p = 128 | h & 63;\n            return W(u.toString(16) + p.toString(16));\n        }\n        var u = 224 | (n & 240) >> 4, p = 128 | (n & 15) << 2 | (h & 192) >> 6, c = 128 | h & 63;\n        return W(u.toString(16) + p.toString(16) + c.toString(16));\n    }\n    var r = e.match(/.{4}/g), i = r.map(t);\n    return i.join(\"\");\n}\nfunction Bt(e) {\n    for(var t = encodeURIComponent(e), r = \"\", i = 0; i < t.length; i++)t[i] == \"%\" ? (r = r + t.substr(i, 3), i = i + 2) : r = r + \"%\" + Ee(t[i]);\n    return r;\n}\na.lang.String.isInteger = function(e) {\n    return e.match(/^[0-9]+$/) ? !0 : !!e.match(/^-[0-9]+$/);\n};\na.lang.String.isHex = function(e) {\n    return Nt(e);\n};\nfunction Nt(e) {\n    return !!(e.length % 2 == 0 && (e.match(/^[0-9a-f]+$/) || e.match(/^[0-9A-F]+$/)));\n}\na.lang.String.isBase64 = function(e) {\n    return e = e.replace(/\\s+/g, \"\"), !!(e.match(/^[0-9A-Za-z+\\/]+={0,3}$/) && e.length % 4 == 0);\n};\na.lang.String.isBase64URL = function(e) {\n    return e.match(/[+/=]/) ? !1 : (e = ut(e), a.lang.String.isBase64(e));\n};\nfunction Ht(e) {\n    return !!e.match(/^[0-9A-Za-z-_.]+$/);\n}\na.lang.String.isIntegerArray = function(e) {\n    return e = e.replace(/\\s+/g, \"\"), !!e.match(/^\\[[0-9,]+\\]$/);\n};\na.lang.String.isPrintable = function(e) {\n    return e.match(/^[0-9A-Za-z '()+,-./:=?]*$/) !== null;\n};\na.lang.String.isIA5 = function(e) {\n    return e.match(/^[\\x20-\\x21\\x23-\\x7f]*$/) !== null;\n};\na.lang.String.isMail = function(e) {\n    return e.match(/^[A-Za-z0-9]{1}[A-Za-z0-9_.-]*@{1}[A-Za-z0-9_.-]{1,}\\.[A-Za-z0-9]{1,}$/) !== null;\n};\nfunction xt(e) {\n    return e.length % 2 == 1 ? \"0\" + e : e.substr(0, 1) > \"7\" ? \"00\" + e : e;\n}\nfunction mn(e) {\n    var t = function(u) {\n        var p = u.toString(16);\n        return p.length == 1 && (p = \"0\" + p), p;\n    }, r = function(u) {\n        var p = \"\", c = parseInt(u, 10), y = c.toString(2), v = 7 - y.length % 7;\n        v == 7 && (v = 0);\n        for(var o = \"\", l = 0; l < v; l++)o += \"0\";\n        y = o + y;\n        for(var l = 0; l < y.length - 1; l += 7){\n            var f = y.substr(l, 7);\n            l != y.length - 7 && (f = \"1\" + f), p += t(parseInt(f, 2));\n        }\n        return p;\n    };\n    try {\n        if (!e.match(/^[0-9.]+$/)) return null;\n        var i = \"\", s = e.split(\".\"), n = parseInt(s[0], 10) * 40 + parseInt(s[1], 10);\n        i += t(n), s.splice(0, 2);\n        for(var h = 0; h < s.length; h++)i += r(s[h]);\n        return i;\n    } catch  {\n        return null;\n    }\n}\nfunction ft(e) {\n    if (!Nt(e)) return null;\n    try {\n        var t = [], r = e.substr(0, 2), i = parseInt(r, 16);\n        t[0] = new String(Math.floor(i / 40)), t[1] = new String(i % 40);\n        for(var s = e.substr(2), n = [], h = 0; h < s.length / 2; h++)n.push(parseInt(s.substr(h * 2, 2), 16));\n        for(var u = [], p = \"\", h = 0; h < n.length; h++)n[h] & 128 ? p = p + St((n[h] & 127).toString(2), 7) : (p = p + St((n[h] & 127).toString(2), 7), u.push(new String(parseInt(p, 2))), p = \"\");\n        var c = t.join(\".\");\n        return u.length > 0 && (c = c + \".\" + u.join(\".\")), c;\n    } catch  {\n        return null;\n    }\n}\nfunction xn(e) {\n    var t = new R(String(e), 10);\n    return Ze(t);\n}\nfunction Ze(e) {\n    var t = e.toString(16);\n    if (t.substr(0, 1) != \"-\") return t.length % 2 == 1 ? t = \"0\" + t : t.match(/^[0-7]/) || (t = \"00\" + t), t;\n    var r = t.substr(1), i = r.length;\n    i % 2 == 1 ? i += 1 : t.match(/^[0-7]/) || (i += 2);\n    for(var s = \"\", n = 0; n < i; n++)s += \"f\";\n    var h = new R(s, 16), u = h.xor(e).add(R.ONE);\n    return t = u.toString(16).replace(/^-/, \"\"), t;\n}\nvar St = function(e, t, r) {\n    return r == null && (r = \"0\"), e.length >= t ? e : new Array(t - e.length + 1).join(r) + e;\n};\nfunction Sn(e) {\n    if (e.length % 2 != 0 || (e = e.toLowerCase(), e.match(/^[0-9a-f]+$/) == null)) return -1;\n    try {\n        var t = e.substr(0, 2);\n        if (t == \"00\") return parseInt(e.substr(2), 16);\n        var r = parseInt(t, 16);\n        if (r > 7) return -1;\n        var i = e.substr(2), s = parseInt(i, 16).toString(2);\n        s == \"0\" && (s = \"00000000\"), s = s.slice(0, 0 - r);\n        var n = parseInt(s, 2);\n        return n == NaN ? -1 : n;\n    } catch  {\n        return -1;\n    }\n}\nfunction En(e) {\n    if (typeof e != \"string\" || e.length % 2 != 0 || !e.match(/^[0-9a-f]+$/)) return null;\n    try {\n        var t = parseInt(e.substr(0, 2), 16);\n        if (t < 0 || 7 < t) return null;\n        for(var r = e.substr(2), i = \"\", s = 0; s < r.length; s += 2){\n            var n = r.substr(s, 2), h = parseInt(n, 16).toString(2);\n            h = (\"0000000\" + h).slice(-8), i += h;\n        }\n        return i.substr(0, i.length - t);\n    } catch  {\n        return null;\n    }\n}\nfunction rt(e, t) {\n    for(var r = 0, i = 0; i < e.length; i++)r |= 1 << t[e[i]];\n    for(var s = r.toString(2), n = \"\", i = s.length - 1; i >= 0; i--)n += s[i];\n    return n;\n}\nfunction J(e, i, r) {\n    if (typeof e == \"object\") {\n        for(var i = String(i).split(\".\"), s = 0; s < i.length && e; s++){\n            var n = i[s];\n            n.match(/^[0-9]+$/) && (n = parseInt(n)), e = e[n];\n        }\n        return e || e === !1 ? e : r;\n    }\n}\nfunction N(e, t) {\n    var r = function() {};\n    r.prototype = t.prototype, e.prototype = new r(), e.prototype.constructor = e, e.superclass = t.prototype, t.prototype.constructor == Object.prototype.constructor && (t.prototype.constructor = t);\n}\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.crypto > \"u\" || !a.crypto) && (a.crypto = {});\na.crypto.Util = new function() {\n    this.DIGESTINFOHEAD = {\n        sha1: \"3021300906052b0e03021a05000414\",\n        sha224: \"302d300d06096086480165030402040500041c\",\n        sha256: \"3031300d060960864801650304020105000420\",\n        sha384: \"3041300d060960864801650304020205000430\",\n        sha512: \"3051300d060960864801650304020305000440\",\n        md2: \"3020300c06082a864886f70d020205000410\",\n        md5: \"3020300c06082a864886f70d020505000410\",\n        ripemd160: \"3021300906052b2403020105000414\"\n    }, this.DEFAULTPROVIDER = {\n        md5: \"cryptojs\",\n        sha1: \"cryptojs\",\n        sha224: \"cryptojs\",\n        sha256: \"cryptojs\",\n        sha384: \"cryptojs\",\n        sha512: \"cryptojs\",\n        ripemd160: \"cryptojs\",\n        hmacmd5: \"cryptojs\",\n        hmacsha1: \"cryptojs\",\n        hmacsha224: \"cryptojs\",\n        hmacsha256: \"cryptojs\",\n        hmacsha384: \"cryptojs\",\n        hmacsha512: \"cryptojs\",\n        hmacripemd160: \"cryptojs\",\n        MD5withRSA: \"cryptojs/jsrsa\",\n        SHA1withRSA: \"cryptojs/jsrsa\",\n        SHA224withRSA: \"cryptojs/jsrsa\",\n        SHA256withRSA: \"cryptojs/jsrsa\",\n        SHA384withRSA: \"cryptojs/jsrsa\",\n        SHA512withRSA: \"cryptojs/jsrsa\",\n        RIPEMD160withRSA: \"cryptojs/jsrsa\",\n        MD5withECDSA: \"cryptojs/jsrsa\",\n        SHA1withECDSA: \"cryptojs/jsrsa\",\n        SHA224withECDSA: \"cryptojs/jsrsa\",\n        SHA256withECDSA: \"cryptojs/jsrsa\",\n        SHA384withECDSA: \"cryptojs/jsrsa\",\n        SHA512withECDSA: \"cryptojs/jsrsa\",\n        RIPEMD160withECDSA: \"cryptojs/jsrsa\",\n        SHA1withDSA: \"cryptojs/jsrsa\",\n        SHA224withDSA: \"cryptojs/jsrsa\",\n        SHA256withDSA: \"cryptojs/jsrsa\",\n        MD5withRSAandMGF1: \"cryptojs/jsrsa\",\n        SHAwithRSAandMGF1: \"cryptojs/jsrsa\",\n        SHA1withRSAandMGF1: \"cryptojs/jsrsa\",\n        SHA224withRSAandMGF1: \"cryptojs/jsrsa\",\n        SHA256withRSAandMGF1: \"cryptojs/jsrsa\",\n        SHA384withRSAandMGF1: \"cryptojs/jsrsa\",\n        SHA512withRSAandMGF1: \"cryptojs/jsrsa\",\n        RIPEMD160withRSAandMGF1: \"cryptojs/jsrsa\"\n    }, this.CRYPTOJSMESSAGEDIGESTNAME = {\n        md5: K.algo.MD5,\n        sha1: K.algo.SHA1,\n        sha224: K.algo.SHA224,\n        sha256: K.algo.SHA256,\n        sha384: K.algo.SHA384,\n        sha512: K.algo.SHA512,\n        ripemd160: K.algo.RIPEMD160\n    }, this.getDigestInfoHex = function(e, t) {\n        if (typeof this.DIGESTINFOHEAD[t] > \"u\") throw \"alg not supported in Util.DIGESTINFOHEAD: \" + t;\n        return this.DIGESTINFOHEAD[t] + e;\n    }, this.getPaddedDigestInfoHex = function(e, t, r) {\n        var i = this.getDigestInfoHex(e, t), s = r / 4;\n        if (i.length + 22 > s) throw \"key is too short for SigAlg: keylen=\" + r + \",\" + t;\n        for(var n = \"0001\", h = \"00\" + i, u = \"\", p = s - n.length - h.length, c = 0; c < p; c += 2)u += \"ff\";\n        var y = n + u + h;\n        return y;\n    }, this.hashString = function(e, t) {\n        var r = new a.crypto.MessageDigest({\n            alg: t\n        });\n        return r.digestString(e);\n    }, this.hashHex = function(e, t) {\n        var r = new a.crypto.MessageDigest({\n            alg: t\n        });\n        return r.digestHex(e);\n    }, this.sha1 = function(e) {\n        return this.hashString(e, \"sha1\");\n    }, this.sha256 = function(e) {\n        return this.hashString(e, \"sha256\");\n    }, this.sha256Hex = function(e) {\n        return this.hashHex(e, \"sha256\");\n    }, this.sha512 = function(e) {\n        return this.hashString(e, \"sha512\");\n    }, this.sha512Hex = function(e) {\n        return this.hashHex(e, \"sha512\");\n    }, this.isKey = function(e) {\n        return e instanceof q || e instanceof a.crypto.DSA || e instanceof a.crypto.ECDSA;\n    };\n}();\na.crypto.Util.md5 = function(e) {\n    var t = new a.crypto.MessageDigest({\n        alg: \"md5\",\n        prov: \"cryptojs\"\n    });\n    return t.digestString(e);\n};\na.crypto.Util.ripemd160 = function(e) {\n    var t = new a.crypto.MessageDigest({\n        alg: \"ripemd160\",\n        prov: \"cryptojs\"\n    });\n    return t.digestString(e);\n};\na.crypto.Util.SECURERANDOMGEN = new Ge();\na.crypto.Util.getRandomHexOfNbytes = function(e) {\n    var t = new Array(e);\n    return a.crypto.Util.SECURERANDOMGEN.nextBytes(t), ot(t);\n};\na.crypto.Util.getRandomBigIntegerOfNbytes = function(e) {\n    return new R(a.crypto.Util.getRandomHexOfNbytes(e), 16);\n};\na.crypto.Util.getRandomHexOfNbits = function(e) {\n    var t = e % 8, r = (e - t) / 8, i = new Array(r + 1);\n    return a.crypto.Util.SECURERANDOMGEN.nextBytes(i), i[0] = (255 << t & 255 ^ 255) & i[0], ot(i);\n};\na.crypto.Util.getRandomBigIntegerOfNbits = function(e) {\n    return new R(a.crypto.Util.getRandomHexOfNbits(e), 16);\n};\na.crypto.Util.getRandomBigIntegerZeroToMax = function(e) {\n    for(var t = e.bitLength();;){\n        var r = a.crypto.Util.getRandomBigIntegerOfNbits(t);\n        if (e.compareTo(r) != -1) return r;\n    }\n};\na.crypto.Util.getRandomBigIntegerMinToMax = function(e, t) {\n    var r = e.compareTo(t);\n    if (r == 1) throw \"biMin is greater than biMax\";\n    if (r == 0) return e;\n    var i = t.subtract(e), s = a.crypto.Util.getRandomBigIntegerZeroToMax(i);\n    return s.add(e);\n};\na.crypto.MessageDigest = function(e) {\n    this.setAlgAndProvider = function(t, r) {\n        if (t = a.crypto.MessageDigest.getCanonicalAlgName(t), t !== null && r === void 0 && (r = a.crypto.Util.DEFAULTPROVIDER[t]), \":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(t) != -1 && r == \"cryptojs\") {\n            try {\n                this.md = a.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[t].create();\n            } catch (i) {\n                throw \"setAlgAndProvider hash alg set fail alg=\" + t + \"/\" + i;\n            }\n            this.updateString = function(i) {\n                this.md.update(i);\n            }, this.updateHex = function(i) {\n                var s = K.enc.Hex.parse(i);\n                this.md.update(s);\n            }, this.digest = function() {\n                var i = this.md.finalize();\n                return i.toString(K.enc.Hex);\n            }, this.digestString = function(i) {\n                return this.updateString(i), this.digest();\n            }, this.digestHex = function(i) {\n                return this.updateHex(i), this.digest();\n            };\n        }\n        if (\":sha256:\".indexOf(t) != -1 && r == \"sjcl\") {\n            try {\n                this.md = new sjcl.hash.sha256();\n            } catch (i) {\n                throw \"setAlgAndProvider hash alg set fail alg=\" + t + \"/\" + i;\n            }\n            this.updateString = function(i) {\n                this.md.update(i);\n            }, this.updateHex = function(i) {\n                var s = sjcl.codec.hex.toBits(i);\n                this.md.update(s);\n            }, this.digest = function() {\n                var i = this.md.finalize();\n                return sjcl.codec.hex.fromBits(i);\n            }, this.digestString = function(i) {\n                return this.updateString(i), this.digest();\n            }, this.digestHex = function(i) {\n                return this.updateHex(i), this.digest();\n            };\n        }\n    }, this.updateString = function(t) {\n        throw \"updateString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n    }, this.updateHex = function(t) {\n        throw \"updateHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n    }, this.digest = function() {\n        throw \"digest() not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n    }, this.digestString = function(t) {\n        throw \"digestString(str) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n    }, this.digestHex = function(t) {\n        throw \"digestHex(hex) not supported for this alg/prov: \" + this.algName + \"/\" + this.provName;\n    }, e !== void 0 && e.alg !== void 0 && (this.algName = e.alg, e.prov === void 0 && (this.provName = a.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName));\n};\na.crypto.MessageDigest.getCanonicalAlgName = function(e) {\n    return typeof e == \"string\" && (e = e.toLowerCase(), e = e.replace(/-/, \"\")), e;\n};\na.crypto.MessageDigest.getHashLength = function(e) {\n    var t = a.crypto.MessageDigest, r = t.getCanonicalAlgName(e);\n    if (t.HASHLENGTH[r] === void 0) throw \"not supported algorithm: \" + e;\n    return t.HASHLENGTH[r];\n};\na.crypto.MessageDigest.HASHLENGTH = {\n    md5: 16,\n    sha1: 20,\n    sha224: 28,\n    sha256: 32,\n    sha384: 48,\n    sha512: 64,\n    ripemd160: 20\n};\na.crypto.Mac = function(e) {\n    this.setAlgAndProvider = function(t, r) {\n        if (t = t.toLowerCase(), t == null && (t = \"hmacsha1\"), t = t.toLowerCase(), t.substr(0, 4) != \"hmac\") throw \"setAlgAndProvider unsupported HMAC alg: \" + t;\n        r === void 0 && (r = a.crypto.Util.DEFAULTPROVIDER[t]), this.algProv = t + \"/\" + r;\n        var i = t.substr(4);\n        if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(i) != -1 && r == \"cryptojs\") {\n            try {\n                var s = a.crypto.Util.CRYPTOJSMESSAGEDIGESTNAME[i];\n                this.mac = K.algo.HMAC.create(s, this.pass);\n            } catch (n) {\n                throw \"setAlgAndProvider hash alg set fail hashAlg=\" + i + \"/\" + n;\n            }\n            this.updateString = function(n) {\n                this.mac.update(n);\n            }, this.updateHex = function(n) {\n                var h = K.enc.Hex.parse(n);\n                this.mac.update(h);\n            }, this.doFinal = function() {\n                var n = this.mac.finalize();\n                return n.toString(K.enc.Hex);\n            }, this.doFinalString = function(n) {\n                return this.updateString(n), this.doFinal();\n            }, this.doFinalHex = function(n) {\n                return this.updateHex(n), this.doFinal();\n            };\n        }\n    }, this.updateString = function(t) {\n        throw \"updateString(str) not supported for this alg/prov: \" + this.algProv;\n    }, this.updateHex = function(t) {\n        throw \"updateHex(hex) not supported for this alg/prov: \" + this.algProv;\n    }, this.doFinal = function() {\n        throw \"digest() not supported for this alg/prov: \" + this.algProv;\n    }, this.doFinalString = function(t) {\n        throw \"digestString(str) not supported for this alg/prov: \" + this.algProv;\n    }, this.doFinalHex = function(t) {\n        throw \"digestHex(hex) not supported for this alg/prov: \" + this.algProv;\n    }, this.setPassword = function(t) {\n        if (typeof t == \"string\") {\n            var r = t;\n            (t.length % 2 == 1 || !t.match(/^[0-9A-Fa-f]+$/)) && (r = Pe(t)), this.pass = K.enc.Hex.parse(r);\n            return;\n        }\n        if (typeof t != \"object\") throw \"KJUR.crypto.Mac unsupported password type: \" + t;\n        var r = null;\n        if (t.hex !== void 0) {\n            if (t.hex.length % 2 != 0 || !t.hex.match(/^[0-9A-Fa-f]+$/)) throw \"Mac: wrong hex password: \" + t.hex;\n            r = t.hex;\n        }\n        if (t.utf8 !== void 0 && (r = ht(t.utf8)), t.rstr !== void 0 && (r = Pe(t.rstr)), t.b64 !== void 0 && (r = it(t.b64)), t.b64u !== void 0 && (r = Y(t.b64u)), r == null) throw \"KJUR.crypto.Mac unsupported password type: \" + t;\n        this.pass = K.enc.Hex.parse(r);\n    }, e !== void 0 && (e.pass !== void 0 && this.setPassword(e.pass), e.alg !== void 0 && (this.algName = e.alg, e.prov === void 0 && (this.provName = a.crypto.Util.DEFAULTPROVIDER[this.algName]), this.setAlgAndProvider(this.algName, this.provName)));\n};\na.crypto.Signature = function(e) {\n    var t = null;\n    if (this._setAlgNames = function() {\n        var r = this.algName.match(/^(.+)with(.+)$/);\n        r && (this.mdAlgName = r[1].toLowerCase(), this.pubkeyAlgName = r[2].toLowerCase(), this.pubkeyAlgName == \"rsaandmgf1\" && this.mdAlgName == \"sha\" && (this.mdAlgName = \"sha1\"));\n    }, this._zeroPaddingOfSignature = function(r, i) {\n        for(var s = \"\", n = i / 4 - r.length, h = 0; h < n; h++)s = s + \"0\";\n        return s + r;\n    }, this.setAlgAndProvider = function(r, i) {\n        if (this._setAlgNames(), i != \"cryptojs/jsrsa\") throw new Error(\"provider not supported: \" + i);\n        if (\":md5:sha1:sha224:sha256:sha384:sha512:ripemd160:\".indexOf(this.mdAlgName) != -1) {\n            try {\n                this.md = new a.crypto.MessageDigest({\n                    alg: this.mdAlgName\n                });\n            } catch (s) {\n                throw new Error(\"setAlgAndProvider hash alg set fail alg=\" + this.mdAlgName + \"/\" + s);\n            }\n            this.init = function(s, n) {\n                var h = null;\n                try {\n                    n === void 0 ? h = k.getKey(s) : h = k.getKey(s, n);\n                } catch (u) {\n                    throw \"init failed:\" + u;\n                }\n                if (h.isPrivate === !0) this.prvKey = h, this.state = \"SIGN\";\n                else if (h.isPublic === !0) this.pubKey = h, this.state = \"VERIFY\";\n                else throw \"init failed.:\" + h;\n            }, this.updateString = function(s) {\n                this.md.updateString(s);\n            }, this.updateHex = function(s) {\n                this.md.updateHex(s);\n            }, this.sign = function() {\n                if (this.sHashHex = this.md.digest(), this.prvKey === void 0 && this.ecprvhex !== void 0 && this.eccurvename !== void 0 && a.crypto.ECDSA !== void 0 && (this.prvKey = new a.crypto.ECDSA({\n                    curve: this.eccurvename,\n                    prv: this.ecprvhex\n                })), this.prvKey instanceof q && this.pubkeyAlgName === \"rsaandmgf1\") this.hSign = this.prvKey.signWithMessageHashPSS(this.sHashHex, this.mdAlgName, this.pssSaltLen);\n                else if (this.prvKey instanceof q && this.pubkeyAlgName === \"rsa\") this.hSign = this.prvKey.signWithMessageHash(this.sHashHex, this.mdAlgName);\n                else if (this.prvKey instanceof a.crypto.ECDSA) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);\n                else if (this.prvKey instanceof a.crypto.DSA) this.hSign = this.prvKey.signWithMessageHash(this.sHashHex);\n                else throw \"Signature: unsupported private key alg: \" + this.pubkeyAlgName;\n                return this.hSign;\n            }, this.signString = function(s) {\n                return this.updateString(s), this.sign();\n            }, this.signHex = function(s) {\n                return this.updateHex(s), this.sign();\n            }, this.verify = function(s) {\n                if (this.sHashHex = this.md.digest(), this.pubKey === void 0 && this.ecpubhex !== void 0 && this.eccurvename !== void 0 && a.crypto.ECDSA !== void 0 && (this.pubKey = new a.crypto.ECDSA({\n                    curve: this.eccurvename,\n                    pub: this.ecpubhex\n                })), this.pubKey instanceof q && this.pubkeyAlgName === \"rsaandmgf1\") return this.pubKey.verifyWithMessageHashPSS(this.sHashHex, s, this.mdAlgName, this.pssSaltLen);\n                if (this.pubKey instanceof q && this.pubkeyAlgName === \"rsa\") return this.pubKey.verifyWithMessageHash(this.sHashHex, s);\n                if (a.crypto.ECDSA !== void 0 && this.pubKey instanceof a.crypto.ECDSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, s);\n                if (a.crypto.DSA !== void 0 && this.pubKey instanceof a.crypto.DSA) return this.pubKey.verifyWithMessageHash(this.sHashHex, s);\n                throw \"Signature: unsupported public key alg: \" + this.pubkeyAlgName;\n            };\n        }\n    }, this.init = function(r, i) {\n        throw \"init(key, pass) not supported for this alg:prov=\" + this.algProvName;\n    }, this.updateString = function(r) {\n        throw \"updateString(str) not supported for this alg:prov=\" + this.algProvName;\n    }, this.updateHex = function(r) {\n        throw \"updateHex(hex) not supported for this alg:prov=\" + this.algProvName;\n    }, this.sign = function() {\n        throw \"sign() not supported for this alg:prov=\" + this.algProvName;\n    }, this.signString = function(r) {\n        throw \"digestString(str) not supported for this alg:prov=\" + this.algProvName;\n    }, this.signHex = function(r) {\n        throw \"digestHex(hex) not supported for this alg:prov=\" + this.algProvName;\n    }, this.verify = function(r) {\n        throw \"verify(hSigVal) not supported for this alg:prov=\" + this.algProvName;\n    }, this.initParams = e, e !== void 0 && (e.alg !== void 0 && (this.algName = e.alg, e.prov === void 0 ? this.provName = a.crypto.Util.DEFAULTPROVIDER[this.algName] : this.provName = e.prov, this.algProvName = this.algName + \":\" + this.provName, this.setAlgAndProvider(this.algName, this.provName), this._setAlgNames()), e.psssaltlen !== void 0 && (this.pssSaltLen = e.psssaltlen), e.prvkeypem !== void 0)) {\n        if (e.prvkeypas !== void 0) throw \"both prvkeypem and prvkeypas parameters not supported\";\n        try {\n            var t = k.getKey(e.prvkeypem);\n            this.init(t);\n        } catch (r) {\n            throw \"fatal error to load pem private key: \" + r;\n        }\n    }\n};\na.crypto.Cipher = function(e) {};\na.crypto.Cipher.encrypt = function(e, t, r, i) {\n    if (J(i, \"enclag\") != null && (r = i.encalg), typeof r == \"string\" && r.substr(-4) == \"-CBC\") {\n        var s = t, n = e;\n        J(i, \"key\") != null && (s = i.key), J(i, \"enc\") != null && (hEnc = i.enc);\n        var h = K.enc.Hex.parse(s), u = K.enc.Hex.parse(n), p = K.enc.Hex.parse(i.iv), c;\n        if (r == \"des-EDE3-CBC\") c = K.TripleDES.encrypt(u, h, {\n            iv: p\n        });\n        else if (r == \"aes128-CBC\" || r == \"aes256-CBC\") c = K.AES.encrypt(u, h, {\n            iv: p\n        });\n        else throw new Error(\"unsupported algorithm: \" + r);\n        return c + \"\";\n    } else throw new Error(\"Cipher.encrypt: unsupported key or algorithm\");\n};\na.crypto.Cipher.decrypt = function(e, t, r, i) {\n    if (J(i, \"enclag\") != null && (r = i.encalg), typeof r == \"string\" && r.substr(-4) == \"-CBC\") {\n        var s = t, n = e;\n        J(i, \"key\") != null && (s = i.key), J(i, \"enc\") != null && (n = i.enc);\n        var h = K.enc.Hex.parse(s), u = K.enc.Hex.parse(n), p = K.enc.Hex.parse(i.iv), c;\n        if (r == \"des-EDE3-CBC\") c = K.TripleDES.decrypt({\n            ciphertext: u\n        }, h, {\n            iv: p\n        });\n        else if (r == \"aes128-CBC\" || r == \"aes256-CBC\") c = K.AES.decrypt({\n            ciphertext: u\n        }, h, {\n            iv: p\n        });\n        else throw new Error(\"unsupported algorithm: \" + r);\n        return K.enc.Hex.stringify(c);\n    } else throw new Error(\"Cipher.decrypt: unsupported key or algorithm\");\n};\na.crypto.OID = new function() {\n    this.oidhex2name = {\n        \"2a864886f70d010101\": \"rsaEncryption\",\n        \"2a8648ce3d0201\": \"ecPublicKey\",\n        \"2a8648ce380401\": \"dsa\",\n        \"2a8648ce3d030107\": \"secp256r1\",\n        \"2b8104001f\": \"secp192k1\",\n        \"2b81040021\": \"secp224r1\",\n        \"2b8104000a\": \"secp256k1\",\n        \"2b81040022\": \"secp384r1\",\n        \"2b81040023\": \"secp521r1\",\n        \"2a8648ce380403\": \"SHA1withDSA\",\n        \"608648016503040301\": \"SHA224withDSA\",\n        \"608648016503040302\": \"SHA256withDSA\"\n    };\n}();\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.crypto > \"u\" || !a.crypto) && (a.crypto = {});\na.crypto.ECDSA = function(e) {\n    var t = \"secp256r1\", r = Error, i = R, s = z, n = a.crypto.ECDSA, h = a.crypto.ECParameterDB, u = n.getName, p = V, c = p.getVbyListEx, y = p.isASN1HEX, v = new Ge();\n    this.type = \"EC\", this.isPrivate = !1, this.isPublic = !1, this.getBigRandom = function(o) {\n        return new i(o.bitLength(), v).mod(o.subtract(i.ONE)).add(i.ONE);\n    }, this.setNamedCurve = function(o) {\n        this.ecparams = h.getByName(o), this.prvKeyHex = null, this.pubKeyHex = null, this.curveName = o;\n    }, this.setPrivateKeyHex = function(o) {\n        this.isPrivate = !0, this.prvKeyHex = o;\n    }, this.setPublicKeyHex = function(o) {\n        this.isPublic = !0, this.pubKeyHex = o;\n    }, this.getPublicKeyXYHex = function() {\n        var o = this.pubKeyHex;\n        if (o.substr(0, 2) !== \"04\") throw \"this method supports uncompressed format(04) only\";\n        var l = this.ecparams.keycharlen;\n        if (o.length !== 2 + l * 2) throw \"malformed public key hex length\";\n        var f = {};\n        return f.x = o.substr(2, l), f.y = o.substr(2 + l), f;\n    }, this.getShortNISTPCurveName = function() {\n        var o = this.curveName;\n        return o === \"secp256r1\" || o === \"NIST P-256\" || o === \"P-256\" || o === \"prime256v1\" ? \"P-256\" : o === \"secp384r1\" || o === \"NIST P-384\" || o === \"P-384\" ? \"P-384\" : o === \"secp521r1\" || o === \"NIST P-521\" || o === \"P-521\" ? \"P-521\" : null;\n    }, this.generateKeyPairHex = function() {\n        var o = this.ecparams.n, l = this.getBigRandom(o), f = this.ecparams.keycharlen, d = (\"0000000000\" + l.toString(16)).slice(-f);\n        this.setPrivateKeyHex(d);\n        var g = this.generatePublicKeyHex();\n        return {\n            ecprvhex: d,\n            ecpubhex: g\n        };\n    }, this.generatePublicKeyHex = function() {\n        var o = new i(this.prvKeyHex, 16), l = this.ecparams.G.multiply(o), f = l.getX().toBigInteger(), d = l.getY().toBigInteger(), g = this.ecparams.keycharlen, S = (\"0000000000\" + f.toString(16)).slice(-g), b = (\"0000000000\" + d.toString(16)).slice(-g), D = \"04\" + S + b;\n        return this.setPublicKeyHex(D), D;\n    }, this.signWithMessageHash = function(o) {\n        return this.signHex(o, this.prvKeyHex);\n    }, this.signHex = function(o, l) {\n        var f = new i(l, 16), d = this.ecparams.n, g = new i(o.substring(0, this.ecparams.keycharlen), 16);\n        do var S = this.getBigRandom(d), b = this.ecparams.G, D = b.multiply(S), A = D.getX().toBigInteger().mod(d);\n        while (A.compareTo(i.ZERO) <= 0);\n        var I = S.modInverse(d).multiply(g.add(f.multiply(A))).mod(d);\n        return n.biRSSigToASN1Sig(A, I);\n    }, this.sign = function(o, l) {\n        var f = l, d = this.ecparams.n, g = i.fromByteArrayUnsigned(o);\n        do var S = this.getBigRandom(d), b = this.ecparams.G, D = b.multiply(S), A = D.getX().toBigInteger().mod(d);\n        while (A.compareTo(R.ZERO) <= 0);\n        var I = S.modInverse(d).multiply(g.add(f.multiply(A))).mod(d);\n        return this.serializeSig(A, I);\n    }, this.verifyWithMessageHash = function(o, l) {\n        return this.verifyHex(o, l, this.pubKeyHex);\n    }, this.verifyHex = function(o, l, f) {\n        try {\n            var d, g, S = n.parseSigHex(l);\n            d = S.r, g = S.s;\n            var b = s.decodeFromHex(this.ecparams.curve, f), D = new i(o.substring(0, this.ecparams.keycharlen), 16);\n            return this.verifyRaw(D, d, g, b);\n        } catch  {\n            return !1;\n        }\n    }, this.verify = function(o, l, f) {\n        var d, g;\n        if (Bitcoin.Util.isArray(l)) {\n            var S = this.parseSig(l);\n            d = S.r, g = S.s;\n        } else if (typeof l == \"object\" && l.r && l.s) d = l.r, g = l.s;\n        else throw \"Invalid value for signature\";\n        var b;\n        if (f instanceof z) b = f;\n        else if (Bitcoin.Util.isArray(f)) b = s.decodeFrom(this.ecparams.curve, f);\n        else throw \"Invalid format for pubkey value, must be byte array or ECPointFp\";\n        var D = i.fromByteArrayUnsigned(o);\n        return this.verifyRaw(D, d, g, b);\n    }, this.verifyRaw = function(o, l, f, d) {\n        var g = this.ecparams.n, S = this.ecparams.G;\n        if (l.compareTo(i.ONE) < 0 || l.compareTo(g) >= 0 || f.compareTo(i.ONE) < 0 || f.compareTo(g) >= 0) return !1;\n        var b = f.modInverse(g), D = o.multiply(b).mod(g), A = l.multiply(b).mod(g), I = S.multiply(D).add(d.multiply(A)), m = I.getX().toBigInteger().mod(g);\n        return m.equals(l);\n    }, this.serializeSig = function(o, l) {\n        var f = o.toByteArraySigned(), d = l.toByteArraySigned(), g = [];\n        return g.push(2), g.push(f.length), g = g.concat(f), g.push(2), g.push(d.length), g = g.concat(d), g.unshift(g.length), g.unshift(48), g;\n    }, this.parseSig = function(o) {\n        var l;\n        if (o[0] != 48) throw new Error(\"Signature not a valid DERSequence\");\n        if (l = 2, o[l] != 2) throw new Error(\"First element in signature must be a DERInteger\");\n        var f = o.slice(l + 2, l + 2 + o[l + 1]);\n        if (l += 2 + o[l + 1], o[l] != 2) throw new Error(\"Second element in signature must be a DERInteger\");\n        var d = o.slice(l + 2, l + 2 + o[l + 1]);\n        l += 2 + o[l + 1];\n        var g = i.fromByteArrayUnsigned(f), S = i.fromByteArrayUnsigned(d);\n        return {\n            r: g,\n            s: S\n        };\n    }, this.parseSigCompact = function(o) {\n        if (o.length !== 65) throw \"Signature has the wrong length\";\n        var l = o[0] - 27;\n        if (l < 0 || l > 7) throw \"Invalid signature type\";\n        var f = this.ecparams.n, d = i.fromByteArrayUnsigned(o.slice(1, 33)).mod(f), g = i.fromByteArrayUnsigned(o.slice(33, 65)).mod(f);\n        return {\n            r: d,\n            s: g,\n            i: l\n        };\n    }, this.readPKCS5PrvKeyHex = function(o) {\n        if (y(o) === !1) throw new Error(\"not ASN.1 hex string\");\n        var l, f, d;\n        try {\n            l = c(o, 0, [\n                \"[0]\",\n                0\n            ], \"06\"), f = c(o, 0, [\n                1\n            ], \"04\");\n            try {\n                d = c(o, 0, [\n                    \"[1]\",\n                    0\n                ], \"03\");\n            } catch  {}\n        } catch  {\n            throw new Error(\"malformed PKCS#1/5 plain ECC private key\");\n        }\n        if (this.curveName = u(l), this.curveName === void 0) throw \"unsupported curve name\";\n        this.setNamedCurve(this.curveName), this.setPublicKeyHex(d), this.setPrivateKeyHex(f), this.isPublic = !1;\n    }, this.readPKCS8PrvKeyHex = function(o) {\n        if (y(o) === !1) throw new r(\"not ASN.1 hex string\");\n        var l, f, d, g;\n        try {\n            l = c(o, 0, [\n                1,\n                0\n            ], \"06\"), f = c(o, 0, [\n                1,\n                1\n            ], \"06\"), d = c(o, 0, [\n                2,\n                0,\n                1\n            ], \"04\");\n            try {\n                g = c(o, 0, [\n                    2,\n                    0,\n                    \"[1]\",\n                    0\n                ], \"03\");\n            } catch  {}\n        } catch  {\n            throw new r(\"malformed PKCS#8 plain ECC private key\");\n        }\n        if (this.curveName = u(f), this.curveName === void 0) throw new r(\"unsupported curve name\");\n        this.setNamedCurve(this.curveName), this.setPublicKeyHex(g), this.setPrivateKeyHex(d), this.isPublic = !1;\n    }, this.readPKCS8PubKeyHex = function(o) {\n        if (y(o) === !1) throw new r(\"not ASN.1 hex string\");\n        var l, f, d;\n        try {\n            l = c(o, 0, [\n                0,\n                0\n            ], \"06\"), f = c(o, 0, [\n                0,\n                1\n            ], \"06\"), d = c(o, 0, [\n                1\n            ], \"03\");\n        } catch  {\n            throw new r(\"malformed PKCS#8 ECC public key\");\n        }\n        if (this.curveName = u(f), this.curveName === null) throw new r(\"unsupported curve name\");\n        this.setNamedCurve(this.curveName), this.setPublicKeyHex(d);\n    }, this.readCertPubKeyHex = function(o, l) {\n        if (y(o) === !1) throw new r(\"not ASN.1 hex string\");\n        var f, d;\n        try {\n            f = c(o, 0, [\n                0,\n                5,\n                0,\n                1\n            ], \"06\"), d = c(o, 0, [\n                0,\n                5,\n                1\n            ], \"03\");\n        } catch  {\n            throw new r(\"malformed X.509 certificate ECC public key\");\n        }\n        if (this.curveName = u(f), this.curveName === null) throw new r(\"unsupported curve name\");\n        this.setNamedCurve(this.curveName), this.setPublicKeyHex(d);\n    }, e !== void 0 && e.curve !== void 0 && (this.curveName = e.curve), this.curveName === void 0 && (this.curveName = t), this.setNamedCurve(this.curveName), e !== void 0 && (e.prv !== void 0 && this.setPrivateKeyHex(e.prv), e.pub !== void 0 && this.setPublicKeyHex(e.pub));\n};\na.crypto.ECDSA.parseSigHex = function(e) {\n    var t = a.crypto.ECDSA.parseSigHexInHexRS(e), r = new R(t.r, 16), i = new R(t.s, 16);\n    return {\n        r,\n        s: i\n    };\n};\na.crypto.ECDSA.parseSigHexInHexRS = function(e) {\n    var t = V, r = t.getChildIdx, i = t.getV;\n    if (t.checkStrictDER(e, 0), e.substr(0, 2) != \"30\") throw new Error(\"signature is not a ASN.1 sequence\");\n    var s = r(e, 0);\n    if (s.length != 2) throw new Error(\"signature shall have two elements\");\n    var n = s[0], h = s[1];\n    if (e.substr(n, 2) != \"02\") throw new Error(\"1st item not ASN.1 integer\");\n    if (e.substr(h, 2) != \"02\") throw new Error(\"2nd item not ASN.1 integer\");\n    var u = i(e, n), p = i(e, h);\n    return {\n        r: u,\n        s: p\n    };\n};\na.crypto.ECDSA.asn1SigToConcatSig = function(e) {\n    var t = a.crypto.ECDSA.parseSigHexInHexRS(e), r = t.r, i = t.s;\n    if (r.length >= 130 && r.length <= 134) {\n        if (r.length % 2 != 0) throw Error(\"unknown ECDSA sig r length error\");\n        if (i.length % 2 != 0) throw Error(\"unknown ECDSA sig s length error\");\n        r.substr(0, 2) == \"00\" && (r = r.substr(2)), i.substr(0, 2) == \"00\" && (i = i.substr(2));\n        var s = Math.max(r.length, i.length);\n        return r = (\"000000\" + r).slice(-s), i = (\"000000\" + i).slice(-s), r + i;\n    }\n    if (r.substr(0, 2) == \"00\" && r.length % 32 == 2 && (r = r.substr(2)), i.substr(0, 2) == \"00\" && i.length % 32 == 2 && (i = i.substr(2)), r.length % 32 == 30 && (r = \"00\" + r), i.length % 32 == 30 && (i = \"00\" + i), r.length % 32 != 0) throw Error(\"unknown ECDSA sig r length error\");\n    if (i.length % 32 != 0) throw Error(\"unknown ECDSA sig s length error\");\n    return r + i;\n};\na.crypto.ECDSA.concatSigToASN1Sig = function(e) {\n    if (e.length % 4 != 0) throw Error(\"unknown ECDSA concatinated r-s sig length error\");\n    var t = e.substr(0, e.length / 2), r = e.substr(e.length / 2);\n    return a.crypto.ECDSA.hexRSSigToASN1Sig(t, r);\n};\na.crypto.ECDSA.hexRSSigToASN1Sig = function(e, t) {\n    var r = new R(e, 16), i = new R(t, 16);\n    return a.crypto.ECDSA.biRSSigToASN1Sig(r, i);\n};\na.crypto.ECDSA.biRSSigToASN1Sig = function(e, t) {\n    var r = a.asn1, i = new r.DERInteger({\n        bigint: e\n    }), s = new r.DERInteger({\n        bigint: t\n    }), n = new r.DERSequence({\n        array: [\n            i,\n            s\n        ]\n    });\n    return n.tohex();\n};\na.crypto.ECDSA.getName = function(e) {\n    return e === \"2b8104001f\" ? \"secp192k1\" : e === \"2a8648ce3d030107\" ? \"secp256r1\" : e === \"2b8104000a\" ? \"secp256k1\" : e === \"2b81040021\" ? \"secp224r1\" : e === \"2b81040022\" ? \"secp384r1\" : e === \"2b81040023\" ? \"secp521r1\" : \"|secp256r1|NIST P-256|P-256|prime256v1|\".indexOf(e) !== -1 ? \"secp256r1\" : \"|secp256k1|\".indexOf(e) !== -1 ? \"secp256k1\" : \"|secp224r1|NIST P-224|P-224|\".indexOf(e) !== -1 ? \"secp224r1\" : \"|secp384r1|NIST P-384|P-384|\".indexOf(e) !== -1 ? \"secp384r1\" : \"|secp521r1|NIST P-521|P-521|\".indexOf(e) !== -1 ? \"secp521r1\" : null;\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.crypto > \"u\" || !a.crypto) && (a.crypto = {});\na.crypto.ECParameterDB = new function() {\n    var e = {}, t = {};\n    function r(i) {\n        return new R(i, 16);\n    }\n    this.getByName = function(i) {\n        var s = i;\n        if (typeof t[s] < \"u\" && (s = t[i]), typeof e[s] < \"u\") return e[s];\n        throw \"unregistered EC curve name: \" + s;\n    }, this.regist = function(i, s, n, h, u, p, c, y, v, o, l, f) {\n        e[i] = {};\n        var d = r(n), g = r(h), S = r(u), b = r(p), D = r(c), A = new Be(d, g, S), I = A.decodePointHex(\"04\" + y + v);\n        e[i].name = i, e[i].keylen = s, e[i].keycharlen = Math.ceil(s / 8) * 2, e[i].curve = A, e[i].G = I, e[i].n = b, e[i].h = D, e[i].oid = l, e[i].info = f;\n        for(var m = 0; m < o.length; m++)t[o[m]] = i;\n    };\n}();\na.crypto.ECParameterDB.regist(\"secp128r1\", 128, \"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFF\", \"FFFFFFFDFFFFFFFFFFFFFFFFFFFFFFFC\", \"E87579C11079F43DD824993C2CEE5ED3\", \"FFFFFFFE0000000075A30D1B9038A115\", \"1\", \"161FF7528B899B2D0C28607CA52C5B86\", \"CF5AC8395BAFEB13C02DA292DDED7A83\", [], \"\", \"secp128r1 : SECG curve over a 128 bit prime field\");\na.crypto.ECParameterDB.regist(\"secp160k1\", 160, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFAC73\", \"0\", \"7\", \"0100000000000000000001B8FA16DFAB9ACA16B6B3\", \"1\", \"3B4C382CE37AA192A4019E763036F4F5DD4D7EBB\", \"938CF935318FDCED6BC28286531733C3F03C4FEE\", [], \"\", \"secp160k1 : SECG curve over a 160 bit prime field\");\na.crypto.ECParameterDB.regist(\"secp160r1\", 160, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7FFFFFFC\", \"1C97BEFC54BD7A8B65ACF89F81D4D4ADC565FA45\", \"0100000000000000000001F4C8F927AED3CA752257\", \"1\", \"4A96B5688EF573284664698968C38BB913CBFC82\", \"23A628553168947D59DCC912042351377AC5FB32\", [], \"\", \"secp160r1 : SECG curve over a 160 bit prime field\");\na.crypto.ECParameterDB.regist(\"secp192k1\", 192, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFEE37\", \"0\", \"3\", \"FFFFFFFFFFFFFFFFFFFFFFFE26F2FC170F69466A74DEFD8D\", \"1\", \"DB4FF10EC057E9AE26B07D0280B7F4341DA5D1B1EAE06C7D\", \"9B2F2F6D9C5628A7844163D015BE86344082AA88D95E2F9D\", []);\na.crypto.ECParameterDB.regist(\"secp192r1\", 192, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFC\", \"64210519E59C80E70FA7E9AB72243049FEB8DEECC146B9B1\", \"FFFFFFFFFFFFFFFFFFFFFFFF99DEF836146BC9B1B4D22831\", \"1\", \"188DA80EB03090F67CBF20EB43A18800F4FF0AFD82FF1012\", \"07192B95FFC8DA78631011ED6B24CDD573F977A11E794811\", []);\na.crypto.ECParameterDB.regist(\"secp224r1\", 224, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000001\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFE\", \"B4050A850C04B3ABF54132565044B0B7D7BFD8BA270B39432355FFB4\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFF16A2E0B8F03E13DD29455C5C2A3D\", \"1\", \"B70E0CBD6BB4BF7F321390B94A03C1D356C21122343280D6115C1D21\", \"BD376388B5F723FB4C22DFE6CD4375A05A07476444D5819985007E34\", []);\na.crypto.ECParameterDB.regist(\"secp256k1\", 256, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F\", \"0\", \"7\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141\", \"1\", \"79BE667EF9DCBBAC55A06295CE870B07029BFCDB2DCE28D959F2815B16F81798\", \"483ADA7726A3C4655DA4FBFC0E1108A8FD17B448A68554199C47D08FFB10D4B8\", []);\na.crypto.ECParameterDB.regist(\"secp256r1\", 256, \"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF\", \"FFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC\", \"5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B\", \"FFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551\", \"1\", \"6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296\", \"4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5\", [\n    \"NIST P-256\",\n    \"P-256\",\n    \"prime256v1\"\n]);\na.crypto.ECParameterDB.regist(\"secp384r1\", 384, \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFFFF0000000000000000FFFFFFFC\", \"B3312FA7E23EE7E4988E056BE3F82D19181D9C6EFE8141120314088F5013875AC656398D8A2ED19D2A85C8EDD3EC2AEF\", \"FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC7634D81F4372DDF581A0DB248B0A77AECEC196ACCC52973\", \"1\", \"AA87CA22BE8B05378EB1C71EF320AD746E1D3B628BA79B9859F741E082542A385502F25DBF55296C3A545E3872760AB7\", \"3617de4a96262c6f5d9e98bf9292dc29f8f41dbd289a147ce9da3113b5f0b8c00a60b1ce1d7e819d7a431d7c90ea0e5f\", [\n    \"NIST P-384\",\n    \"P-384\"\n]);\na.crypto.ECParameterDB.regist(\"secp521r1\", 521, \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\", \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFC\", \"051953EB9618E1C9A1F929A21A0B68540EEA2DA725B99B315F3B8B489918EF109E156193951EC7E937B1652C0BD3BB1BF073573DF883D2C34F1EF451FD46B503F00\", \"1FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA51868783BF2F966B7FCC0148F709A5D03BB5C9B8899C47AEBB6FB71E91386409\", \"1\", \"00C6858E06B70404E9CD9E3ECB662395B4429C648139053FB521F828AF606B4D3DBAA14B5E77EFE75928FE1DC127A2FFA8DE3348B3C1856A429BF97E7E31C2E5BD66\", \"011839296a789a3bc0045c8a5fb42c7d1bd998f54449579b446817afbd17273e662c97ee72995ef42640c550b9013fad0761353c7086a272c24088be94769fd16650\", [\n    \"NIST P-521\",\n    \"P-521\"\n]);\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.crypto > \"u\" || !a.crypto) && (a.crypto = {});\na.crypto.DSA = function() {\n    var e = V;\n    e.getVbyList;\n    var t = e.getVbyListEx, r = e.isASN1HEX, i = R;\n    this.p = null, this.q = null, this.g = null, this.y = null, this.x = null, this.type = \"DSA\", this.isPrivate = !1, this.isPublic = !1, this.setPrivate = function(s, n, h, u, p) {\n        this.isPrivate = !0, this.p = s, this.q = n, this.g = h, this.y = u, this.x = p;\n    }, this.setPrivateHex = function(s, n, h, u, p) {\n        var c, y, v, o, l;\n        c = new R(s, 16), y = new R(n, 16), v = new R(h, 16), typeof u == \"string\" && u.length > 1 ? o = new R(u, 16) : o = null, l = new R(p, 16), this.setPrivate(c, y, v, o, l);\n    }, this.setPublic = function(s, n, h, u) {\n        this.isPublic = !0, this.p = s, this.q = n, this.g = h, this.y = u, this.x = null;\n    }, this.setPublicHex = function(s, n, h, u) {\n        var p, c, y, v;\n        p = new R(s, 16), c = new R(n, 16), y = new R(h, 16), v = new R(u, 16), this.setPublic(p, c, y, v);\n    }, this.signWithMessageHash = function(s) {\n        var n = this.p, h = this.q, u = this.g;\n        this.y;\n        var p = this.x, c = a.crypto.Util.getRandomBigIntegerMinToMax(R.ONE.add(R.ONE), h.subtract(R.ONE)), y = s.substr(0, h.bitLength() / 4), v = new R(y, 16), o = u.modPow(c, n).mod(h), l = c.modInverse(h).multiply(v.add(p.multiply(o))).mod(h), f = a.asn1.ASN1Util.jsonToASN1HEX({\n            seq: [\n                {\n                    int: {\n                        bigint: o\n                    }\n                },\n                {\n                    int: {\n                        bigint: l\n                    }\n                }\n            ]\n        });\n        return f;\n    }, this.verifyWithMessageHash = function(s, n) {\n        var h = this.p, u = this.q, p = this.g, c = this.y, y = this.parseASN1Signature(n), v = y[0], o = y[1], l = s.substr(0, u.bitLength() / 4), f = new R(l, 16);\n        if (R.ZERO.compareTo(v) > 0 || v.compareTo(u) > 0 || R.ZERO.compareTo(o) >= 0 || o.compareTo(u) > 0) throw \"invalid DSA signature\";\n        var d = o.modInverse(u), g = f.multiply(d).mod(u), S = v.multiply(d).mod(u), b = p.modPow(g, h).multiply(c.modPow(S, h)).mod(h).mod(u);\n        return b.compareTo(v) == 0;\n    }, this.parseASN1Signature = function(s) {\n        try {\n            var n = new i(t(s, 0, [\n                0\n            ], \"02\"), 16), h = new i(t(s, 0, [\n                1\n            ], \"02\"), 16);\n            return [\n                n,\n                h\n            ];\n        } catch  {\n            throw new Error(\"malformed ASN.1 DSA signature\");\n        }\n    }, this.readPKCS5PrvKeyHex = function(s) {\n        var n, h, u, p, c;\n        if (r(s) === !1) throw new Error(\"not ASN.1 hex string\");\n        try {\n            n = t(s, 0, [\n                1\n            ], \"02\"), h = t(s, 0, [\n                2\n            ], \"02\"), u = t(s, 0, [\n                3\n            ], \"02\"), p = t(s, 0, [\n                4\n            ], \"02\"), c = t(s, 0, [\n                5\n            ], \"02\");\n        } catch  {\n            throw new Error(\"malformed PKCS#1/5 plain DSA private key\");\n        }\n        this.setPrivateHex(n, h, u, p, c);\n    }, this.readPKCS8PrvKeyHex = function(s) {\n        var n, h, u, p;\n        if (r(s) === !1) throw new Error(\"not ASN.1 hex string\");\n        try {\n            n = t(s, 0, [\n                1,\n                1,\n                0\n            ], \"02\"), h = t(s, 0, [\n                1,\n                1,\n                1\n            ], \"02\"), u = t(s, 0, [\n                1,\n                1,\n                2\n            ], \"02\"), p = t(s, 0, [\n                2,\n                0\n            ], \"02\");\n        } catch  {\n            throw new Error(\"malformed PKCS#8 plain DSA private key\");\n        }\n        this.setPrivateHex(n, h, u, null, p);\n    }, this.readPKCS8PubKeyHex = function(s) {\n        var n, h, u, p;\n        if (r(s) === !1) throw new Error(\"not ASN.1 hex string\");\n        try {\n            n = t(s, 0, [\n                0,\n                1,\n                0\n            ], \"02\"), h = t(s, 0, [\n                0,\n                1,\n                1\n            ], \"02\"), u = t(s, 0, [\n                0,\n                1,\n                2\n            ], \"02\"), p = t(s, 0, [\n                1,\n                0\n            ], \"02\");\n        } catch  {\n            throw new Error(\"malformed PKCS#8 DSA public key\");\n        }\n        this.setPublicHex(n, h, u, p);\n    }, this.readCertPubKeyHex = function(s, n) {\n        var h, u, p, c;\n        if (r(s) === !1) throw new Error(\"not ASN.1 hex string\");\n        try {\n            h = t(s, 0, [\n                0,\n                5,\n                0,\n                1,\n                0\n            ], \"02\"), u = t(s, 0, [\n                0,\n                5,\n                0,\n                1,\n                1\n            ], \"02\"), p = t(s, 0, [\n                0,\n                5,\n                0,\n                1,\n                2\n            ], \"02\"), c = t(s, 0, [\n                0,\n                5,\n                1,\n                0\n            ], \"02\");\n        } catch  {\n            throw new Error(\"malformed X.509 certificate DSA public key\");\n        }\n        this.setPublicHex(h, u, p, c);\n    };\n};\nvar k = /* @__PURE__ */ function() {\n    var e = function(f, d, g) {\n        return i(K.AES, f, d, g);\n    }, t = function(f, d, g) {\n        return i(K.TripleDES, f, d, g);\n    }, r = function(f, d, g) {\n        return i(K.DES, f, d, g);\n    }, i = function(f, d, g, S) {\n        var b = K.enc.Hex.parse(d), D = K.enc.Hex.parse(g), A = K.enc.Hex.parse(S), I = {};\n        I.key = D, I.iv = A, I.ciphertext = b;\n        var m = f.decrypt(I, D, {\n            iv: A\n        });\n        return K.enc.Hex.stringify(m);\n    }, s = function(f, d, g) {\n        return u(K.AES, f, d, g);\n    }, n = function(f, d, g) {\n        return u(K.TripleDES, f, d, g);\n    }, h = function(f, d, g) {\n        return u(K.DES, f, d, g);\n    }, u = function(f, d, g, S) {\n        var b = K.enc.Hex.parse(d), D = K.enc.Hex.parse(g), A = K.enc.Hex.parse(S), I = f.encrypt(b, D, {\n            iv: A\n        }), m = K.enc.Hex.parse(I.toString()), E = K.enc.Base64.stringify(m);\n        return E;\n    }, p = {\n        \"AES-256-CBC\": {\n            proc: e,\n            eproc: s,\n            keylen: 32,\n            ivlen: 16\n        },\n        \"AES-192-CBC\": {\n            proc: e,\n            eproc: s,\n            keylen: 24,\n            ivlen: 16\n        },\n        \"AES-128-CBC\": {\n            proc: e,\n            eproc: s,\n            keylen: 16,\n            ivlen: 16\n        },\n        \"DES-EDE3-CBC\": {\n            proc: t,\n            eproc: n,\n            keylen: 24,\n            ivlen: 8\n        },\n        \"DES-CBC\": {\n            proc: r,\n            eproc: h,\n            keylen: 8,\n            ivlen: 8\n        }\n    }, c = function(f) {\n        var d = K.lib.WordArray.random(f), g = K.enc.Hex.stringify(d);\n        return g;\n    }, y = function(f) {\n        var d = {}, g = f.match(new RegExp(\"DEK-Info: ([^,]+),([0-9A-Fa-f]+)\", \"m\"));\n        g && (d.cipher = g[1], d.ivsalt = g[2]);\n        var S = f.match(new RegExp(\"-----BEGIN ([A-Z]+) PRIVATE KEY-----\"));\n        S && (d.type = S[1]);\n        var b = -1, D = 0;\n        f.indexOf(`\\r\n\\r\n`) != -1 && (b = f.indexOf(`\\r\n\\r\n`), D = 2), f.indexOf(`\n\n`) != -1 && (b = f.indexOf(`\n\n`), D = 1);\n        var A = f.indexOf(\"-----END\");\n        if (b != -1 && A != -1) {\n            var I = f.substring(b + D * 2, A - D);\n            I = I.replace(/\\s+/g, \"\"), d.data = I;\n        }\n        return d;\n    }, v = function(f, d, g) {\n        for(var S = g.substring(0, 16), b = K.enc.Hex.parse(S), D = K.enc.Utf8.parse(d), A = p[f].keylen + p[f].ivlen, I = \"\", m = null;;){\n            var E = K.algo.MD5.create();\n            if (m != null && E.update(m), E.update(D), E.update(b), m = E.finalize(), I = I + K.enc.Hex.stringify(m), I.length >= A * 2) break;\n        }\n        var w = {};\n        return w.keyhex = I.substr(0, p[f].keylen * 2), w.ivhex = I.substr(p[f].keylen * 2, p[f].ivlen * 2), w;\n    }, o = function(f, d, g, S) {\n        var b = K.enc.Base64.parse(f), D = K.enc.Hex.stringify(b), A = p[d].proc, I = A(D, g, S);\n        return I;\n    }, l = function(f, d, g, S) {\n        var b = p[d].eproc, D = b(f, g, S);\n        return D;\n    };\n    return {\n        version: \"1.0.0\",\n        parsePKCS5PEM: function(f) {\n            return y(f);\n        },\n        getKeyAndUnusedIvByPasscodeAndIvsalt: function(f, d, g) {\n            return v(f, d, g);\n        },\n        decryptKeyB64: function(f, d, g, S) {\n            return o(f, d, g, S);\n        },\n        getDecryptedKeyHex: function(f, d) {\n            var g = y(f), S = g.cipher, b = g.ivsalt, D = g.data, A = v(S, d, b), I = A.keyhex, m = o(D, S, I, b);\n            return m;\n        },\n        getEncryptedPKCS5PEMFromPrvKeyHex: function(f, d, g, S, b) {\n            var x = \"\";\n            if ((typeof S > \"u\" || S == null) && (S = \"AES-256-CBC\"), typeof p[S] > \"u\") throw new Error(\"KEYUTIL unsupported algorithm: \" + S);\n            if (typeof b > \"u\" || b == null) {\n                var D = p[S].ivlen, A = c(D);\n                b = A.toUpperCase();\n            }\n            var I = v(S, g, b), m = I.keyhex, E = l(d, S, m, b), w = E.replace(/(.{64})/g, `$1\\r\n`), x = \"-----BEGIN \" + f + ` PRIVATE KEY-----\\r\n`;\n            return x += `Proc-Type: 4,ENCRYPTED\\r\n`, x += \"DEK-Info: \" + S + \",\" + b + `\\r\n`, x += `\\r\n`, x += w, x += `\\r\n-----END ` + f + ` PRIVATE KEY-----\\r\n`, x;\n        },\n        getEncryptedPKCS8PEM: function(f, d, g) {\n            var S = this.getEncryptedPKCS8Hex(f, d, g);\n            return de(S, \"ENCRYPTED PRIVATE KEY\");\n        },\n        getEncryptedPKCS8Hex: function(f, d, g) {\n            var S;\n            g == null || g == null ? S = {} : S = JSON.parse(JSON.stringify(g)), S.plain = f, this.initPBES2Param(S), this.encryptPBES2Param(S, d);\n            var b = this.generatePBES2ASN1Param(S);\n            return a.asn1.ASN1Util.newObject(b).tohex();\n        },\n        initPBES2Param: function(f) {\n            if (J(f, \"encalg\") == null && (f.encalg = \"aes256-CBC\"), J(f, \"iter\") == null && (f.iter = 2048), J(f, \"prf\") == null && (f.prf = \"hmacWithSHA256\"), J(f, \"salt\") == null && (f.salt = K.enc.Hex.stringify(K.lib.WordArray.random(8))), J(f, \"enciv\") == null) {\n                var d;\n                f.encalg == \"des-EDE3-CBC\" && (d = 8), f.encalg == \"aes128-CBC\" && (d = 16), f.encalg == \"aes256-CBC\" && (d = 16), f.enciv = K.enc.Hex.stringify(K.lib.WordArray.random(d));\n            }\n        },\n        encryptPBES2Param: function(f, d) {\n            var g = k.getDKFromPBES2Param(f, d);\n            try {\n                var S = a.crypto.Cipher.encrypt(f.plain, g, f.encalg, {\n                    iv: f.enciv\n                });\n            } catch  {\n                throw new Error(\"encrypt error: \" + f.plain + \" \" + g + \" \" + f.encalg + \" \" + f.enciv);\n            }\n            f.enc = S;\n        },\n        generatePBES2ASN1Param: function(f) {\n            var d = {\n                seq: [\n                    {\n                        seq: [\n                            {\n                                oid: \"pkcs5PBES2\"\n                            },\n                            {\n                                seq: [\n                                    {\n                                        seq: [\n                                            {\n                                                oid: \"pkcs5PBKDF2\"\n                                            },\n                                            {\n                                                seq: [\n                                                    {\n                                                        octstr: {\n                                                            hex: f.salt\n                                                        }\n                                                    },\n                                                    {\n                                                        int: {\n                                                            hex: xn(f.iter)\n                                                        }\n                                                    }\n                                                ]\n                                            }\n                                        ]\n                                    },\n                                    {\n                                        seq: [\n                                            {\n                                                oid: f.encalg\n                                            },\n                                            {\n                                                octstr: {\n                                                    hex: f.enciv\n                                                }\n                                            }\n                                        ]\n                                    }\n                                ]\n                            }\n                        ]\n                    },\n                    {\n                        octstr: {\n                            hex: f.enc\n                        }\n                    }\n                ]\n            };\n            return f.prf != \"hmacWithSHA1\" && d.seq[0].seq[1].seq[0].seq[1].seq.push({\n                seq: [\n                    {\n                        oid: f.prf\n                    },\n                    {\n                        null: \"\"\n                    }\n                ]\n            }), d;\n        },\n        parseHexOfEncryptedPKCS8: function(f) {\n            var d = V, g = d.getChildIdx, S = d.getV, b = {}, D = g(f, 0);\n            if (D.length != 2) throw new Error(\"malformed format: SEQUENCE(0).items != 2: \" + D.length);\n            b.ciphertext = S(f, D[1]);\n            var A = g(f, D[0]);\n            if (A.length != 2) throw new Error(\"malformed format: SEQUENCE(0.0).items != 2: \" + A.length);\n            if (S(f, A[0]) != \"2a864886f70d01050d\") throw new Error(\"this only supports pkcs5PBES2\");\n            var I = g(f, A[1]);\n            if (A.length != 2) throw new Error(\"malformed format: SEQUENCE(0.0.1).items != 2: \" + I.length);\n            var m = g(f, I[1]);\n            if (m.length != 2) throw new Error(\"malformed format: SEQUENCE(0.0.1.1).items != 2: \" + m.length);\n            if (S(f, m[0]) != \"2a864886f70d0307\") throw \"this only supports TripleDES\";\n            b.encryptionSchemeAlg = \"TripleDES\", b.encryptionSchemeIV = S(f, m[1]);\n            var E = g(f, I[0]);\n            if (E.length != 2) throw new Error(\"malformed format: SEQUENCE(0.0.1.0).items != 2: \" + E.length);\n            if (S(f, E[0]) != \"2a864886f70d01050c\") throw new Error(\"this only supports pkcs5PBKDF2\");\n            var w = g(f, E[1]);\n            if (w.length < 2) throw new Error(\"malformed format: SEQUENCE(0.0.1.0.1).items < 2: \" + w.length);\n            b.pbkdf2Salt = S(f, w[0]);\n            var x = S(f, w[1]);\n            try {\n                b.pbkdf2Iter = parseInt(x, 16);\n            } catch  {\n                throw new Error(\"malformed format pbkdf2Iter: \" + x);\n            }\n            return b;\n        },\n        getPBKDF2KeyHexFromParam: function(f, d) {\n            var g = K.enc.Hex.parse(f.pbkdf2Salt), S = f.pbkdf2Iter, b = K.PBKDF2(d, g, {\n                keySize: 192 / 32,\n                iterations: S\n            }), D = K.enc.Hex.stringify(b);\n            return D;\n        },\n        _getPlainPKCS8HexFromEncryptedPKCS8PEM: function(f, d) {\n            var g = ie(f, \"ENCRYPTED PRIVATE KEY\"), S = this.parseHexOfEncryptedPKCS8(g), b = k.getPBKDF2KeyHexFromParam(S, d), D = {};\n            D.ciphertext = K.enc.Hex.parse(S.ciphertext);\n            var A = K.enc.Hex.parse(b), I = K.enc.Hex.parse(S.encryptionSchemeIV), m = K.TripleDES.decrypt(D, A, {\n                iv: I\n            }), E = K.enc.Hex.stringify(m);\n            return E;\n        },\n        parsePBES2: function(f) {\n            var d = V.parse(f);\n            if (J(d, \"seq.0.seq.0.oid\") != \"pkcs5PBES2\" || J(d, \"seq.0.seq.1.seq.0.seq.0.oid\") != \"pkcs5PBKDF2\") throw new Error(\"not pkcs5PBES2 and pkcs5PBKDF2 used\");\n            var g = J(d, \"seq.0.seq.1.seq.0.seq.1.seq\");\n            if (g == null) throw new Error(\"PBKDF2 parameter not found\");\n            var S = J(g, \"0.octstr.hex\"), b = J(g, \"1.int.hex\"), D = J(g, \"2.seq.0.oid\", \"hmacWithSHA1\"), A = -1;\n            try {\n                A = parseInt(b, 16);\n            } catch  {\n                throw new Error(\"iter not proper value\");\n            }\n            var I = J(d, \"seq.0.seq.1.seq.1.seq.0.oid\"), m = J(d, \"seq.0.seq.1.seq.1.seq.1.octstr.hex\"), E = J(d, \"seq.1.octstr.hex\");\n            if (I == null || m == null || E == null) throw new Error(\"encalg, enciv or enc is undefined\");\n            var w = {\n                salt: S,\n                iter: A,\n                prf: D,\n                encalg: I,\n                enciv: m,\n                enc: E\n            };\n            return w;\n        },\n        getDKFromPBES2Param: function(f, d) {\n            var g = {\n                hmacWithSHA1: K.algo.SHA1,\n                hmacWithSHA224: K.algo.SHA224,\n                hmacWithSHA256: K.algo.SHA256,\n                hmacWithSHA384: K.algo.SHA384,\n                hmacWithSHA512: K.algo.SHA512\n            }, S = {\n                \"des-EDE3-CBC\": 192 / 32,\n                \"aes128-CBC\": 128 / 32,\n                \"aes256-CBC\": 256 / 32\n            }, b = g[f.prf];\n            if (b == null) throw new Error(\"unsupported prf\");\n            var D = S[f.encalg];\n            if (D == null) throw new Error(\"unsupported encalg\");\n            var A = K.enc.Hex.parse(f.salt), I = f.iter;\n            try {\n                var m = K.PBKDF2(d, A, {\n                    keySize: D,\n                    iterations: I,\n                    hasher: b\n                });\n                return K.enc.Hex.stringify(m);\n            } catch (E) {\n                throw new Error(\"PBKDF2 error: \" + E + \" \" + JSON.stringify(f) + \" \" + d);\n            }\n        },\n        getPlainHexFromEncryptedPKCS8PEM: function(f, d) {\n            if (f.indexOf(\"BEGIN ENCRYPTED PRIVATE KEY\") == -1) throw new Error(\"not Encrypted PKCS#8 PEM string\");\n            var g = ie(f), S;\n            try {\n                S = k.parsePBES2(g);\n            } catch (D) {\n                throw new Error(\"malformed PBES2 format: \" + D.message);\n            }\n            var b = k.getDKFromPBES2Param(S, d);\n            return a.crypto.Cipher.decrypt(S.enc, b, S.encalg, {\n                iv: S.enciv\n            });\n        },\n        getKeyFromEncryptedPKCS8PEM: function(f, d) {\n            var g = this.getPlainHexFromEncryptedPKCS8PEM(f, d), S = this.getKeyFromPlainPrivatePKCS8Hex(g);\n            return S;\n        },\n        parsePlainPrivatePKCS8Hex: function(f) {\n            var d = V, g = d.getChildIdx, S = d.getV, b = {};\n            if (b.algparam = null, f.substr(0, 2) != \"30\") throw new Error(\"malformed plain PKCS8 private key(code:001)\");\n            var D = g(f, 0);\n            if (D.length < 3) throw new Error(\"malformed plain PKCS8 private key(code:002)\");\n            if (f.substr(D[1], 2) != \"30\") throw new Error(\"malformed PKCS8 private key(code:003)\");\n            var A = g(f, D[1]);\n            if (A.length != 2) throw new Error(\"malformed PKCS8 private key(code:004)\");\n            if (f.substr(A[0], 2) != \"06\") throw new Error(\"malformed PKCS8 private key(code:005)\");\n            if (b.algoid = S(f, A[0]), f.substr(A[1], 2) == \"06\" && (b.algparam = S(f, A[1])), f.substr(D[2], 2) != \"04\") throw new Error(\"malformed PKCS8 private key(code:006)\");\n            return b.keyidx = d.getVidx(f, D[2]), b;\n        },\n        getKeyFromPlainPrivatePKCS8PEM: function(f) {\n            var d = ie(f, \"PRIVATE KEY\"), g = this.getKeyFromPlainPrivatePKCS8Hex(d);\n            return g;\n        },\n        getKeyFromPlainPrivatePKCS8Hex: function(f) {\n            var d = this.parsePlainPrivatePKCS8Hex(f), g;\n            if (d.algoid == \"2a864886f70d010101\") g = new q();\n            else if (d.algoid == \"2a8648ce380401\") g = new a.crypto.DSA();\n            else if (d.algoid == \"2a8648ce3d0201\") g = new a.crypto.ECDSA();\n            else throw new Error(\"unsupported private key algorithm\");\n            return g.readPKCS8PrvKeyHex(f), g;\n        },\n        _getKeyFromPublicPKCS8Hex: function(f) {\n            var d, g = V.getVbyList(f, 0, [\n                0,\n                0\n            ], \"06\");\n            if (g === \"2a864886f70d010101\") d = new q();\n            else if (g === \"2a8648ce380401\") d = new a.crypto.DSA();\n            else if (g === \"2a8648ce3d0201\") d = new a.crypto.ECDSA();\n            else throw new Error(\"unsupported PKCS#8 public key hex\");\n            return d.readPKCS8PubKeyHex(f), d;\n        },\n        parsePublicRawRSAKeyHex: function(f) {\n            var d = V, g = d.getChildIdx, S = d.getV, b = {};\n            if (f.substr(0, 2) != \"30\") throw new Error(\"malformed RSA key(code:001)\");\n            var D = g(f, 0);\n            if (D.length != 2) throw new Error(\"malformed RSA key(code:002)\");\n            if (f.substr(D[0], 2) != \"02\") throw new Error(\"malformed RSA key(code:003)\");\n            if (b.n = S(f, D[0]), f.substr(D[1], 2) != \"02\") throw new Error(\"malformed RSA key(code:004)\");\n            return b.e = S(f, D[1]), b;\n        },\n        parsePublicPKCS8Hex: function(f) {\n            var d = V, g = d.getChildIdx, S = d.getV, b = {};\n            b.algparam = null;\n            var D = g(f, 0);\n            if (D.length != 2) throw new Error(\"outer DERSequence shall have 2 elements: \" + D.length);\n            var A = D[0];\n            if (f.substr(A, 2) != \"30\") throw new Error(\"malformed PKCS8 public key(code:001)\");\n            var I = g(f, A);\n            if (I.length != 2) throw new Error(\"malformed PKCS8 public key(code:002)\");\n            if (f.substr(I[0], 2) != \"06\") throw new Error(\"malformed PKCS8 public key(code:003)\");\n            if (b.algoid = S(f, I[0]), f.substr(I[1], 2) == \"06\" ? b.algparam = S(f, I[1]) : f.substr(I[1], 2) == \"30\" && (b.algparam = {}, b.algparam.p = d.getVbyList(f, I[1], [\n                0\n            ], \"02\"), b.algparam.q = d.getVbyList(f, I[1], [\n                1\n            ], \"02\"), b.algparam.g = d.getVbyList(f, I[1], [\n                2\n            ], \"02\")), f.substr(D[1], 2) != \"03\") throw new Error(\"malformed PKCS8 public key(code:004)\");\n            return b.key = S(f, D[1]).substr(2), b;\n        }\n    };\n}();\nk.getKey = function(e, t, r) {\n    var i = V, s = i.getChildIdx;\n    i.getV;\n    var n = i.getVbyList, h = a.crypto, u = h.ECDSA, p = h.DSA, c = q, y = ie, v = k;\n    if (typeof c < \"u\" && e instanceof c || typeof u < \"u\" && e instanceof u || typeof p < \"u\" && e instanceof p) return e;\n    if (e.curve !== void 0 && e.xy !== void 0 && e.d === void 0) return new u({\n        pub: e.xy,\n        curve: e.curve\n    });\n    if (e.curve !== void 0 && e.d !== void 0) return new u({\n        prv: e.d,\n        curve: e.curve\n    });\n    if (e.kty === void 0 && e.n !== void 0 && e.e !== void 0 && e.d === void 0) {\n        var o = new c();\n        return o.setPublic(e.n, e.e), o;\n    }\n    if (e.kty === void 0 && e.n !== void 0 && e.e !== void 0 && e.d !== void 0 && e.p !== void 0 && e.q !== void 0 && e.dp !== void 0 && e.dq !== void 0 && e.co !== void 0 && e.qi === void 0) {\n        var o = new c();\n        return o.setPrivateEx(e.n, e.e, e.d, e.p, e.q, e.dp, e.dq, e.co), o;\n    }\n    if (e.kty === void 0 && e.n !== void 0 && e.e !== void 0 && e.d !== void 0 && e.p === void 0) {\n        var o = new c();\n        return o.setPrivate(e.n, e.e, e.d), o;\n    }\n    if (e.p !== void 0 && e.q !== void 0 && e.g !== void 0 && e.y !== void 0 && e.x === void 0) {\n        var o = new p();\n        return o.setPublic(e.p, e.q, e.g, e.y), o;\n    }\n    if (e.p !== void 0 && e.q !== void 0 && e.g !== void 0 && e.y !== void 0 && e.x !== void 0) {\n        var o = new p();\n        return o.setPrivate(e.p, e.q, e.g, e.y, e.x), o;\n    }\n    if (e.kty === \"RSA\" && e.n !== void 0 && e.e !== void 0 && e.d === void 0) {\n        var o = new c();\n        return o.setPublic(Y(e.n), Y(e.e)), o;\n    }\n    if (e.kty === \"RSA\" && e.n !== void 0 && e.e !== void 0 && e.d !== void 0 && e.p !== void 0 && e.q !== void 0 && e.dp !== void 0 && e.dq !== void 0 && e.qi !== void 0) {\n        var o = new c();\n        return o.setPrivateEx(Y(e.n), Y(e.e), Y(e.d), Y(e.p), Y(e.q), Y(e.dp), Y(e.dq), Y(e.qi)), o;\n    }\n    if (e.kty === \"RSA\" && e.n !== void 0 && e.e !== void 0 && e.d !== void 0) {\n        var o = new c();\n        return o.setPrivate(Y(e.n), Y(e.e), Y(e.d)), o;\n    }\n    if (e.kty === \"EC\" && e.crv !== void 0 && e.x !== void 0 && e.y !== void 0 && e.d === void 0) {\n        var l = new u({\n            curve: e.crv\n        }), f = l.ecparams.keycharlen, d = (\"0000000000\" + Y(e.x)).slice(-f), g = (\"0000000000\" + Y(e.y)).slice(-f), S = \"04\" + d + g;\n        return l.setPublicKeyHex(S), l;\n    }\n    if (e.kty === \"EC\" && e.crv !== void 0 && e.x !== void 0 && e.y !== void 0 && e.d !== void 0) {\n        var l = new u({\n            curve: e.crv\n        }), f = l.ecparams.keycharlen, d = (\"0000000000\" + Y(e.x)).slice(-f), g = (\"0000000000\" + Y(e.y)).slice(-f), S = \"04\" + d + g, b = (\"0000000000\" + Y(e.d)).slice(-f);\n        return l.setPublicKeyHex(S), l.setPrivateKeyHex(b), l;\n    }\n    if (r === \"pkcs5prv\") {\n        var D = e, i = V, A, o;\n        if (A = s(D, 0), A.length === 9) o = new c(), o.readPKCS5PrvKeyHex(D);\n        else if (A.length === 6) o = new p(), o.readPKCS5PrvKeyHex(D);\n        else if (A.length > 2 && D.substr(A[1], 2) === \"04\") o = new u(), o.readPKCS5PrvKeyHex(D);\n        else throw new Error(\"unsupported PKCS#1/5 hexadecimal key\");\n        return o;\n    }\n    if (r === \"pkcs8prv\") {\n        var o = v.getKeyFromPlainPrivatePKCS8Hex(e);\n        return o;\n    }\n    if (r === \"pkcs8pub\") return v._getKeyFromPublicPKCS8Hex(e);\n    if (r === \"x509pub\") return L.getPublicKeyFromCertHex(e);\n    if (e.indexOf(\"-END CERTIFICATE-\", 0) != -1 || e.indexOf(\"-END X509 CERTIFICATE-\", 0) != -1 || e.indexOf(\"-END TRUSTED CERTIFICATE-\", 0) != -1) return L.getPublicKeyFromCertPEM(e);\n    if (e.indexOf(\"-END PUBLIC KEY-\") != -1) {\n        var I = ie(e, \"PUBLIC KEY\");\n        return v._getKeyFromPublicPKCS8Hex(I);\n    }\n    if (e.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") == -1) {\n        var m = y(e, \"RSA PRIVATE KEY\");\n        return v.getKey(m, null, \"pkcs5prv\");\n    }\n    if (e.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") == -1) {\n        var E = y(e, \"DSA PRIVATE KEY\"), w = n(E, 0, [\n            1\n        ], \"02\"), x = n(E, 0, [\n            2\n        ], \"02\"), F = n(E, 0, [\n            3\n        ], \"02\"), P = n(E, 0, [\n            4\n        ], \"02\"), T = n(E, 0, [\n            5\n        ], \"02\"), o = new p();\n        return o.setPrivate(new R(w, 16), new R(x, 16), new R(F, 16), new R(P, 16), new R(T, 16)), o;\n    }\n    if (e.indexOf(\"-END EC PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") == -1) {\n        var m = y(e, \"EC PRIVATE KEY\");\n        return v.getKey(m, null, \"pkcs5prv\");\n    }\n    if (e.indexOf(\"-END PRIVATE KEY-\") != -1) return v.getKeyFromPlainPrivatePKCS8PEM(e);\n    if (e.indexOf(\"-END RSA PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") != -1) {\n        var H = v.getDecryptedKeyHex(e, t), C = new q();\n        return C.readPKCS5PrvKeyHex(H), C;\n    }\n    if (e.indexOf(\"-END EC PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") != -1) {\n        var E = v.getDecryptedKeyHex(e, t), o = n(E, 0, [\n            1\n        ], \"04\"), B = n(E, 0, [\n            2,\n            0\n        ], \"06\"), O = n(E, 0, [\n            3,\n            0\n        ], \"03\").substr(2), j = \"\";\n        if (a.crypto.OID.oidhex2name[B] !== void 0) j = a.crypto.OID.oidhex2name[B];\n        else throw new Error(\"undefined OID(hex) in KJUR.crypto.OID: \" + B);\n        var l = new u({\n            curve: j\n        });\n        return l.setPublicKeyHex(O), l.setPrivateKeyHex(o), l.isPublic = !1, l;\n    }\n    if (e.indexOf(\"-END DSA PRIVATE KEY-\") != -1 && e.indexOf(\"4,ENCRYPTED\") != -1) {\n        var E = v.getDecryptedKeyHex(e, t), w = n(E, 0, [\n            1\n        ], \"02\"), x = n(E, 0, [\n            2\n        ], \"02\"), F = n(E, 0, [\n            3\n        ], \"02\"), P = n(E, 0, [\n            4\n        ], \"02\"), T = n(E, 0, [\n            5\n        ], \"02\"), o = new p();\n        return o.setPrivate(new R(w, 16), new R(x, 16), new R(F, 16), new R(P, 16), new R(T, 16)), o;\n    }\n    if (e.indexOf(\"-END ENCRYPTED PRIVATE KEY-\") != -1) return v.getKeyFromEncryptedPKCS8PEM(e, t);\n    throw new Error(\"not supported argument\");\n};\nk.generateKeypair = function(e, t) {\n    if (e == \"RSA\") {\n        var r = t, i = new q();\n        i.generate(r, \"10001\"), i.isPrivate = !0, i.isPublic = !0;\n        var s = new q(), n = i.n.toString(16), h = i.e.toString(16);\n        s.setPublic(n, h), s.isPrivate = !1, s.isPublic = !0;\n        var u = {};\n        return u.prvKeyObj = i, u.pubKeyObj = s, u;\n    } else if (e == \"EC\") {\n        var p = t, c = new a.crypto.ECDSA({\n            curve: p\n        }), y = c.generateKeyPairHex(), i = new a.crypto.ECDSA({\n            curve: p\n        });\n        i.setPublicKeyHex(y.ecpubhex), i.setPrivateKeyHex(y.ecprvhex), i.isPrivate = !0, i.isPublic = !1;\n        var s = new a.crypto.ECDSA({\n            curve: p\n        });\n        s.setPublicKeyHex(y.ecpubhex), s.isPrivate = !1, s.isPublic = !0;\n        var u = {};\n        return u.prvKeyObj = i, u.pubKeyObj = s, u;\n    } else throw new Error(\"unknown algorithm: \" + e);\n};\nk.getPEM = function(e, t, r, i, s, n) {\n    var h = a, u = h.asn1, p = u.DERObjectIdentifier, c = u.DERInteger, y = u.ASN1Util.newObject, v = u.x509, o = v.SubjectPublicKeyInfo, l = h.crypto, f = l.DSA, d = l.ECDSA, g = q;\n    function S(B) {\n        var O = y({\n            seq: [\n                {\n                    int: 0\n                },\n                {\n                    int: {\n                        bigint: B.n\n                    }\n                },\n                {\n                    int: B.e\n                },\n                {\n                    int: {\n                        bigint: B.d\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.p\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.q\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.dmp1\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.dmq1\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.coeff\n                    }\n                }\n            ]\n        });\n        return O;\n    }\n    function b(B) {\n        var O = y({\n            seq: [\n                {\n                    int: 1\n                },\n                {\n                    octstr: {\n                        hex: B.prvKeyHex\n                    }\n                },\n                {\n                    tag: [\n                        \"a0\",\n                        !0,\n                        {\n                            oid: {\n                                name: B.curveName\n                            }\n                        }\n                    ]\n                },\n                {\n                    tag: [\n                        \"a1\",\n                        !0,\n                        {\n                            bitstr: {\n                                hex: \"00\" + B.pubKeyHex\n                            }\n                        }\n                    ]\n                }\n            ]\n        });\n        return O;\n    }\n    function D(B) {\n        var O = y({\n            seq: [\n                {\n                    int: 0\n                },\n                {\n                    int: {\n                        bigint: B.p\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.q\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.g\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.y\n                    }\n                },\n                {\n                    int: {\n                        bigint: B.x\n                    }\n                }\n            ]\n        });\n        return O;\n    }\n    if ((g !== void 0 && e instanceof g || f !== void 0 && e instanceof f || d !== void 0 && e instanceof d) && e.isPublic == !0 && (t === void 0 || t == \"PKCS8PUB\")) {\n        var A = new o(e), I = A.tohex();\n        return de(I, \"PUBLIC KEY\");\n    }\n    if (t == \"PKCS1PRV\" && g !== void 0 && e instanceof g && (r === void 0 || r == null) && e.isPrivate == !0) {\n        var A = S(e), I = A.tohex();\n        return de(I, \"RSA PRIVATE KEY\");\n    }\n    if (t == \"PKCS1PRV\" && d !== void 0 && e instanceof d && (r === void 0 || r == null) && e.isPrivate == !0) {\n        var m = new p({\n            name: e.curveName\n        }), E = m.tohex(), w = b(e), x = w.tohex(), F = \"\";\n        return F += de(E, \"EC PARAMETERS\"), F += de(x, \"EC PRIVATE KEY\"), F;\n    }\n    if (t == \"PKCS1PRV\" && f !== void 0 && e instanceof f && (r === void 0 || r == null) && e.isPrivate == !0) {\n        var A = D(e), I = A.tohex();\n        return de(I, \"DSA PRIVATE KEY\");\n    }\n    if (t == \"PKCS5PRV\" && g !== void 0 && e instanceof g && r !== void 0 && r != null && e.isPrivate == !0) {\n        var A = S(e), I = A.tohex();\n        return i === void 0 && (i = \"DES-EDE3-CBC\"), this.getEncryptedPKCS5PEMFromPrvKeyHex(\"RSA\", I, r, i, n);\n    }\n    if (t == \"PKCS5PRV\" && d !== void 0 && e instanceof d && r !== void 0 && r != null && e.isPrivate == !0) {\n        var A = b(e), I = A.tohex();\n        return i === void 0 && (i = \"DES-EDE3-CBC\"), this.getEncryptedPKCS5PEMFromPrvKeyHex(\"EC\", I, r, i, n);\n    }\n    if (t == \"PKCS5PRV\" && f !== void 0 && e instanceof f && r !== void 0 && r != null && e.isPrivate == !0) {\n        var A = D(e), I = A.tohex();\n        return i === void 0 && (i = \"DES-EDE3-CBC\"), this.getEncryptedPKCS5PEMFromPrvKeyHex(\"DSA\", I, r, i, n);\n    }\n    var P = function(B, O) {\n        if (typeof O == \"string\") return k.getEncryptedPKCS8PEM(B, O);\n        if (typeof O == \"object\" && J(O, \"passcode\") != null) {\n            var j = JSON.parse(JSON.stringify(O)), fe = j.passcode;\n            return delete j.passcode, k.getEncryptedPKCS8PEM(B, fe, j);\n        }\n    };\n    if (t == \"PKCS8PRV\" && g != null && e instanceof g && e.isPrivate == !0) {\n        var T = S(e), H = T.tohex(), A = y({\n            seq: [\n                {\n                    int: 0\n                },\n                {\n                    seq: [\n                        {\n                            oid: {\n                                name: \"rsaEncryption\"\n                            }\n                        },\n                        {\n                            null: !0\n                        }\n                    ]\n                },\n                {\n                    octstr: {\n                        hex: H\n                    }\n                }\n            ]\n        }), I = A.tohex();\n        return r === void 0 || r == null ? de(I, \"PRIVATE KEY\") : P(I, r);\n    }\n    if (t == \"PKCS8PRV\" && d !== void 0 && e instanceof d && e.isPrivate == !0) {\n        var C = {\n            seq: [\n                {\n                    int: 1\n                },\n                {\n                    octstr: {\n                        hex: e.prvKeyHex\n                    }\n                }\n            ]\n        };\n        typeof e.pubKeyHex == \"string\" && C.seq.push({\n            tag: [\n                \"a1\",\n                !0,\n                {\n                    bitstr: {\n                        hex: \"00\" + e.pubKeyHex\n                    }\n                }\n            ]\n        });\n        var T = new y(C), H = T.tohex(), A = y({\n            seq: [\n                {\n                    int: 0\n                },\n                {\n                    seq: [\n                        {\n                            oid: {\n                                name: \"ecPublicKey\"\n                            }\n                        },\n                        {\n                            oid: {\n                                name: e.curveName\n                            }\n                        }\n                    ]\n                },\n                {\n                    octstr: {\n                        hex: H\n                    }\n                }\n            ]\n        }), I = A.tohex();\n        return r === void 0 || r == null ? de(I, \"PRIVATE KEY\") : P(I, r);\n    }\n    if (t == \"PKCS8PRV\" && f !== void 0 && e instanceof f && e.isPrivate == !0) {\n        var T = new c({\n            bigint: e.x\n        }), H = T.tohex(), A = y({\n            seq: [\n                {\n                    int: 0\n                },\n                {\n                    seq: [\n                        {\n                            oid: {\n                                name: \"dsa\"\n                            }\n                        },\n                        {\n                            seq: [\n                                {\n                                    int: {\n                                        bigint: e.p\n                                    }\n                                },\n                                {\n                                    int: {\n                                        bigint: e.q\n                                    }\n                                },\n                                {\n                                    int: {\n                                        bigint: e.g\n                                    }\n                                }\n                            ]\n                        }\n                    ]\n                },\n                {\n                    octstr: {\n                        hex: H\n                    }\n                }\n            ]\n        }), I = A.tohex();\n        return r === void 0 || r == null ? de(I, \"PRIVATE KEY\") : P(I, r);\n    }\n    throw new Error(\"unsupported object nor format\");\n};\nk.getKeyFromCSRPEM = function(e) {\n    var t = ie(e, \"CERTIFICATE REQUEST\"), r = k.getKeyFromCSRHex(t);\n    return r;\n};\nk.getKeyFromCSRHex = function(e) {\n    var t = k.parseCSRHex(e), r = k.getKey(t.p8pubkeyhex, null, \"pkcs8pub\");\n    return r;\n};\nk.parseCSRHex = function(e) {\n    var t = V, r = t.getChildIdx, i = t.getTLV, s = {}, n = e;\n    if (n.substr(0, 2) != \"30\") throw new Error(\"malformed CSR(code:001)\");\n    var h = r(n, 0);\n    if (h.length < 1) throw new Error(\"malformed CSR(code:002)\");\n    if (n.substr(h[0], 2) != \"30\") throw new Error(\"malformed CSR(code:003)\");\n    var u = r(n, h[0]);\n    if (u.length < 3) throw new Error(\"malformed CSR(code:004)\");\n    return s.p8pubkeyhex = i(n, u[2]), s;\n};\nk.getKeyID = function(e) {\n    var t = k, r = V;\n    typeof e == \"string\" && e.indexOf(\"BEGIN \") != -1 && (e = t.getKey(e));\n    var i = ie(t.getPEM(e)), s = r.getIdxbyList(i, 0, [\n        1\n    ]), n = r.getV(i, s).substring(2);\n    return a.crypto.Util.hashHex(n, \"sha1\");\n};\nk.getJWK = function(e, t, r, i, s) {\n    var n, h = {}, u, p = a.crypto.Util.hashHex;\n    if (typeof e == \"string\") n = k.getKey(e), e.indexOf(\"CERTIFICATE\") != -1 && (u = ie(e));\n    else if (typeof e == \"object\") e instanceof L ? (n = e.getPublicKey(), u = e.hex) : n = e;\n    else throw new Error(\"unsupported keyinfo type\");\n    if (n instanceof q && n.isPrivate) h.kty = \"RSA\", h.n = ae(n.n.toString(16)), h.e = ae(n.e.toString(16)), h.d = ae(n.d.toString(16)), h.p = ae(n.p.toString(16)), h.q = ae(n.q.toString(16)), h.dp = ae(n.dmp1.toString(16)), h.dq = ae(n.dmq1.toString(16)), h.qi = ae(n.coeff.toString(16));\n    else if (n instanceof q && n.isPublic) h.kty = \"RSA\", h.n = ae(n.n.toString(16)), h.e = ae(n.e.toString(16));\n    else if (n instanceof a.crypto.ECDSA && n.isPrivate) {\n        var c = n.getShortNISTPCurveName();\n        if (c !== \"P-256\" && c !== \"P-384\" && c !== \"P-521\") throw new Error(\"unsupported curve name for JWT: \" + c);\n        var y = n.getPublicKeyXYHex();\n        h.kty = \"EC\", h.crv = c, h.x = ae(y.x), h.y = ae(y.y), h.d = ae(n.prvKeyHex);\n    } else if (n instanceof a.crypto.ECDSA && n.isPublic) {\n        var c = n.getShortNISTPCurveName();\n        if (c !== \"P-256\" && c !== \"P-384\" && c !== \"P-521\") throw new Error(\"unsupported curve name for JWT: \" + c);\n        var y = n.getPublicKeyXYHex();\n        h.kty = \"EC\", h.crv = c, h.x = ae(y.x), h.y = ae(y.y);\n    }\n    if (h.kty == null) throw new Error(\"unsupported keyinfo\");\n    return !n.isPrivate && t != !0 && (h.kid = a.jws.JWS.getJWKthumbprint(h)), u != null && r != !0 && (h.x5c = [\n        _e(u)\n    ]), u != null && i != !0 && (h.x5t = Xe(_e(p(u, \"sha1\")))), u != null && s != !0 && (h[\"x5t#S256\"] = Xe(_e(p(u, \"sha256\")))), h;\n};\nk.getJWKFromKey = function(e) {\n    return k.getJWK(e, !0, !0, !0, !0);\n};\nq.getPosArrayOfChildrenFromHex = function(e) {\n    return V.getChildIdx(e, 0);\n};\nq.getHexValueArrayOfChildrenFromHex = function(e) {\n    var t = V, r = t.getV, o = q.getPosArrayOfChildrenFromHex(e), i = r(e, o[0]), s = r(e, o[1]), n = r(e, o[2]), h = r(e, o[3]), u = r(e, o[4]), p = r(e, o[5]), c = r(e, o[6]), y = r(e, o[7]), v = r(e, o[8]), o = new Array();\n    return o.push(i, s, n, h, u, p, c, y, v), o;\n};\nq.prototype.readPrivateKeyFromPEMString = function(e) {\n    var t = ie(e), r = q.getHexValueArrayOfChildrenFromHex(t);\n    this.setPrivateEx(r[1], r[2], r[3], r[4], r[5], r[6], r[7], r[8]);\n};\nq.prototype.readPKCS5PrvKeyHex = function(e) {\n    var t = q.getHexValueArrayOfChildrenFromHex(e);\n    this.setPrivateEx(t[1], t[2], t[3], t[4], t[5], t[6], t[7], t[8]);\n};\nq.prototype.readPKCS8PrvKeyHex = function(e) {\n    var t, r, i, s, n, h, u, p, c = V, y = c.getVbyListEx;\n    if (c.isASN1HEX(e) === !1) throw new Error(\"not ASN.1 hex string\");\n    try {\n        t = y(e, 0, [\n            2,\n            0,\n            1\n        ], \"02\"), r = y(e, 0, [\n            2,\n            0,\n            2\n        ], \"02\"), i = y(e, 0, [\n            2,\n            0,\n            3\n        ], \"02\"), s = y(e, 0, [\n            2,\n            0,\n            4\n        ], \"02\"), n = y(e, 0, [\n            2,\n            0,\n            5\n        ], \"02\"), h = y(e, 0, [\n            2,\n            0,\n            6\n        ], \"02\"), u = y(e, 0, [\n            2,\n            0,\n            7\n        ], \"02\"), p = y(e, 0, [\n            2,\n            0,\n            8\n        ], \"02\");\n    } catch  {\n        throw new Error(\"malformed PKCS#8 plain RSA private key\");\n    }\n    this.setPrivateEx(t, r, i, s, n, h, u, p);\n};\nq.prototype.readPKCS5PubKeyHex = function(e) {\n    var t = V, r = t.getV;\n    if (t.isASN1HEX(e) === !1) throw new Error(\"keyHex is not ASN.1 hex string\");\n    var i = t.getChildIdx(e, 0);\n    if (i.length !== 2 || e.substr(i[0], 2) !== \"02\" || e.substr(i[1], 2) !== \"02\") throw new Error(\"wrong hex for PKCS#5 public key\");\n    var s = r(e, i[0]), n = r(e, i[1]);\n    this.setPublic(s, n);\n};\nq.prototype.readPKCS8PubKeyHex = function(e) {\n    var t = V;\n    if (t.isASN1HEX(e) === !1) throw new Error(\"not ASN.1 hex string\");\n    if (t.getTLVbyListEx(e, 0, [\n        0,\n        0\n    ]) !== \"06092a864886f70d010101\") throw new Error(\"not PKCS8 RSA public key\");\n    var r = t.getTLVbyListEx(e, 0, [\n        1,\n        0\n    ]);\n    this.readPKCS5PubKeyHex(r);\n};\nq.prototype.readCertPubKeyHex = function(e, t) {\n    var r, i;\n    r = new L(), r.readCertHex(e), i = r.getPublicKeyHex(), this.readPKCS8PubKeyHex(i);\n};\nfunction Ot(e, t) {\n    for(var r = \"\", i = t / 4 - e.length, s = 0; s < i; s++)r = r + \"0\";\n    return r + e;\n}\nq.prototype.sign = function(e, t) {\n    var r = function(s) {\n        return a.crypto.Util.hashString(s, t);\n    }, i = r(e);\n    return this.signWithMessageHash(i, t);\n};\nq.prototype.signWithMessageHash = function(e, t) {\n    var r = a.crypto.Util.getPaddedDigestInfoHex(e, t, this.n.bitLength()), i = ve(r, 16), s = this.doPrivate(i), n = s.toString(16);\n    return Ot(n, this.n.bitLength());\n};\nfunction jt(e, t, r) {\n    for(var i = \"\", s = 0; i.length < t;)i += Ae(r(Pe(e + String.fromCharCode.apply(String, [\n        (s & 4278190080) >> 24,\n        (s & 16711680) >> 16,\n        (s & 65280) >> 8,\n        s & 255\n    ])))), s += 1;\n    return i;\n}\nq.prototype.signPSS = function(e, t, r) {\n    var i = function(n) {\n        return a.crypto.Util.hashHex(n, t);\n    }, s = i(Pe(e));\n    return r === void 0 && (r = -1), this.signWithMessageHashPSS(s, t, r);\n};\nq.prototype.signWithMessageHashPSS = function(e, t, r) {\n    var i = Ae(e), s = i.length, n = this.n.bitLength() - 1, h = Math.ceil(n / 8), u, p = function(g) {\n        return a.crypto.Util.hashHex(g, t);\n    };\n    if (r === -1 || r === void 0) r = s;\n    else if (r === -2) r = h - s - 2;\n    else if (r < -2) throw new Error(\"invalid salt length\");\n    if (h < s + r + 2) throw new Error(\"data too long\");\n    var c = \"\";\n    r > 0 && (c = new Array(r), new Ge().nextBytes(c), c = String.fromCharCode.apply(String, c));\n    var y = Ae(p(Pe(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + i + c))), v = [];\n    for(u = 0; u < h - r - s - 2; u += 1)v[u] = 0;\n    var o = String.fromCharCode.apply(String, v) + \"\\x01\" + c, l = jt(y, o.length, p), f = [];\n    for(u = 0; u < o.length; u += 1)f[u] = o.charCodeAt(u) ^ l.charCodeAt(u);\n    var d = 65280 >> 8 * h - n & 255;\n    for(f[0] &= ~d, u = 0; u < s; u++)f.push(y.charCodeAt(u));\n    return f.push(188), Ot(this.doPrivate(new R(f)).toString(16), this.n.bitLength());\n};\nfunction Vt(e) {\n    for(var t in a.crypto.Util.DIGESTINFOHEAD){\n        var r = a.crypto.Util.DIGESTINFOHEAD[t], i = r.length;\n        if (e.substring(0, i) == r) {\n            var s = [\n                t,\n                e.substring(i)\n            ];\n            return s;\n        }\n    }\n    return [];\n}\nq.prototype.verify = function(e, t) {\n    if (t = t.toLowerCase(), t.match(/^[0-9a-f]+$/) == null) return !1;\n    var r = ve(t, 16), i = this.n.bitLength();\n    if (r.bitLength() > i) return !1;\n    var s = this.doPublic(r), n = s.toString(16);\n    if (n.length + 3 != i / 4) return !1;\n    var h = n.replace(/^1f+00/, \"\"), u = Vt(h);\n    if (u.length == 0) return !1;\n    var p = u[0], c = u[1], y = function(o) {\n        return a.crypto.Util.hashString(o, p);\n    }, v = y(e);\n    return c == v;\n};\nq.prototype.verifyWithMessageHash = function(e, t) {\n    if (t.length != Math.ceil(this.n.bitLength() / 4)) return !1;\n    var r = ve(t, 16);\n    if (r.bitLength() > this.n.bitLength()) return 0;\n    var i = this.doPublic(r), s = i.toString(16).replace(/^1f+00/, \"\"), n = Vt(s);\n    if (n.length == 0) return !1;\n    n[0];\n    var h = n[1];\n    return h == e;\n};\nq.prototype.verifyPSS = function(e, t, r, i) {\n    var s = function(h) {\n        return a.crypto.Util.hashHex(h, r);\n    }, n = s(Pe(e));\n    return i === void 0 && (i = -1), this.verifyWithMessageHashPSS(n, t, r, i);\n};\nq.prototype.verifyWithMessageHashPSS = function(e, t, r, i) {\n    if (t.length != Math.ceil(this.n.bitLength() / 4)) return !1;\n    var s = new R(t, 16), n = function(b) {\n        return a.crypto.Util.hashHex(b, r);\n    }, h = Ae(e), u = h.length, p = this.n.bitLength() - 1, c = Math.ceil(p / 8), y;\n    if (i === -1 || i === void 0) i = u;\n    else if (i === -2) i = c - u - 2;\n    else if (i < -2) throw new Error(\"invalid salt length\");\n    if (c < u + i + 2) throw new Error(\"data too long\");\n    var v = this.doPublic(s).toByteArray();\n    for(y = 0; y < v.length; y += 1)v[y] &= 255;\n    for(; v.length < c;)v.unshift(0);\n    if (v[c - 1] !== 188) throw new Error(\"encoded message does not end in 0xbc\");\n    v = String.fromCharCode.apply(String, v);\n    var o = v.substr(0, c - u - 1), l = v.substr(o.length, u), f = 65280 >> 8 * c - p & 255;\n    if (o.charCodeAt(0) & f) throw new Error(\"bits beyond keysize not zero\");\n    var d = jt(l, o.length, n), g = [];\n    for(y = 0; y < o.length; y += 1)g[y] = o.charCodeAt(y) ^ d.charCodeAt(y);\n    g[0] &= ~f;\n    var S = c - u - i - 2;\n    for(y = 0; y < S; y += 1)if (g[y] !== 0) throw new Error(\"leftmost octets not zero\");\n    if (g[S] !== 1) throw new Error(\"0x01 marker not found\");\n    return l === Ae(n(Pe(\"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" + h + String.fromCharCode.apply(String, g.slice(-i)))));\n};\nq.SALT_LEN_HLEN = -1;\nq.SALT_LEN_MAX = -2;\nq.SALT_LEN_RECOVER = -2;\nfunction L(e) {\n    var t = V, r = t.getChildIdx, i = t.getV;\n    t.dump;\n    var s = t.parse, n = t.getTLV, h = t.getVbyList, u = t.getVbyListEx, p = t.getTLVbyList, c = t.getTLVbyListEx, y = t.getIdxbyList, v = t.getIdxbyListEx, o = t.getVidx, l = t.getInt, f = t.oidname, d = t.hextooidstr, g = ie, S, b = Error;\n    try {\n        S = a.asn1.x509.AlgorithmIdentifier.PSSNAME2ASN1TLV;\n    } catch  {}\n    this.HEX2STAG = {\n        \"0c\": \"utf8\",\n        13: \"prn\",\n        16: \"ia5\",\n        \"1a\": \"vis\",\n        \"1e\": \"bmp\"\n    }, this.hex = null, this.version = 0, this.foffset = 0, this.aExtInfo = null, this.getVersion = function() {\n        if (this.hex === null || this.version !== 0) return this.version;\n        var m = p(this.hex, 0, [\n            0,\n            0\n        ]);\n        if (m.substr(0, 2) == \"a0\") {\n            var E = p(m, 0, [\n                0\n            ]), w = l(E, 0);\n            if (w < 0 || 2 < w) throw new Error(\"malformed version field\");\n            return this.version = w + 1, this.version;\n        } else return this.version = 1, this.foffset = -1, 1;\n    }, this.getSerialNumberHex = function() {\n        return u(this.hex, 0, [\n            0,\n            0\n        ], \"02\");\n    }, this.getSignatureAlgorithmField = function() {\n        var m = c(this.hex, 0, [\n            0,\n            1\n        ]);\n        return this.getAlgorithmIdentifierName(m);\n    }, this.getAlgorithmIdentifierName = function(m) {\n        for(var E in S)if (m === S[E]) return E;\n        return f(u(m, 0, [\n            0\n        ], \"06\"));\n    }, this.getIssuer = function(m, E) {\n        return this.getX500Name(this.getIssuerHex(), m, E);\n    }, this.getIssuerHex = function() {\n        return p(this.hex, 0, [\n            0,\n            3 + this.foffset\n        ], \"30\");\n    }, this.getIssuerString = function() {\n        var m = this.getIssuer();\n        return m.str;\n    }, this.getSubject = function(m, E) {\n        return this.getX500Name(this.getSubjectHex(), m, E);\n    }, this.getSubjectHex = function() {\n        return p(this.hex, 0, [\n            0,\n            5 + this.foffset\n        ], \"30\");\n    }, this.getSubjectString = function() {\n        var m = this.getSubject();\n        return m.str;\n    }, this.getNotBefore = function() {\n        var m = h(this.hex, 0, [\n            0,\n            4 + this.foffset,\n            0\n        ]);\n        return m = m.replace(/(..)/g, \"%$1\"), m = decodeURIComponent(m), m;\n    }, this.getNotAfter = function() {\n        var m = h(this.hex, 0, [\n            0,\n            4 + this.foffset,\n            1\n        ]);\n        return m = m.replace(/(..)/g, \"%$1\"), m = decodeURIComponent(m), m;\n    }, this.getPublicKeyHex = function() {\n        return this.getSPKI();\n    }, this.getSPKI = function() {\n        return p(this.hex, 0, [\n            0,\n            6 + this.foffset\n        ], \"30\");\n    }, this.getSPKIValue = function() {\n        var m = this.getSPKI();\n        return m == null ? null : h(m, 0, [\n            1\n        ], \"03\", !0);\n    }, this.getPublicKeyIdx = function() {\n        return y(this.hex, 0, [\n            0,\n            6 + this.foffset\n        ], \"30\");\n    }, this.getPublicKeyContentIdx = function() {\n        var m = this.getPublicKeyIdx();\n        return y(this.hex, m, [\n            1,\n            0\n        ], \"30\");\n    }, this.getPublicKey = function() {\n        return k.getKey(this.getPublicKeyHex(), null, \"pkcs8pub\");\n    }, this.getSignatureAlgorithmName = function() {\n        var m = p(this.hex, 0, [\n            1\n        ], \"30\");\n        return this.getAlgorithmIdentifierName(m);\n    }, this.getSignatureValueHex = function() {\n        return h(this.hex, 0, [\n            2\n        ], \"03\", !0);\n    }, this.verifySignature = function(m) {\n        var E = this.getSignatureAlgorithmField(), w = this.getSignatureValueHex(), x = p(this.hex, 0, [\n            0\n        ], \"30\"), F = new a.crypto.Signature({\n            alg: E\n        });\n        return F.init(m), F.updateHex(x), F.verify(w);\n    }, this.parseExt = function(m) {\n        var E, w, x;\n        if (m === void 0) {\n            if (x = this.hex, this.version !== 3) return -1;\n            E = y(x, 0, [\n                0,\n                7,\n                0\n            ], \"30\"), w = r(x, E);\n        } else {\n            x = ie(m);\n            var F = y(x, 0, [\n                0,\n                3,\n                0,\n                0\n            ], \"06\");\n            if (i(x, F) != \"2a864886f70d01090e\") {\n                this.aExtInfo = new Array();\n                return;\n            }\n            E = y(x, 0, [\n                0,\n                3,\n                0,\n                1,\n                0\n            ], \"30\"), w = r(x, E), this.hex = x;\n        }\n        this.aExtInfo = new Array();\n        for(var P = 0; P < w.length; P++){\n            var T = {};\n            T.critical = !1;\n            var H = r(x, w[P]), C = 0;\n            H.length === 3 && (T.critical = !0, C = 1), T.oid = t.hextooidstr(h(x, w[P], [\n                0\n            ], \"06\"));\n            var B = y(x, w[P], [\n                1 + C\n            ]);\n            T.vidx = o(x, B), this.aExtInfo.push(T);\n        }\n    }, this.getExtInfo = function(m) {\n        var E = this.aExtInfo, w = m;\n        if (m.match(/^[0-9.]+$/) || (w = a.asn1.x509.OID.name2oid(m)), w !== \"\") {\n            for(var x = 0; x < E.length; x++)if (E[x].oid === w) return E[x];\n        }\n    }, this.getCriticalExtV = function(m, E, w) {\n        if (E != null) return [\n            E,\n            w\n        ];\n        var x = this.getExtInfo(m);\n        return x == null ? [\n            null,\n            null\n        ] : [\n            n(this.hex, x.vidx),\n            x.critical\n        ];\n    }, this.getExtBasicConstraints = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"basicConstraints\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"basicConstraints\"\n        };\n        if (E && (x.critical = !0), m === \"3000\") return x;\n        if (m === \"30030101ff\") return x.cA = !0, x;\n        if (m.substr(0, 12) === \"30060101ff02\") {\n            var F = i(m, 10), P = parseInt(F, 16);\n            return x.cA = !0, x.pathLen = P, x;\n        }\n        throw new Error(\"hExtV parse error: \" + m);\n    }, this.getExtNameConstraints = function(m, E) {\n        var w = this.getCriticalExtV(\"nameConstraints\", m, E);\n        if (m = w[0], E = w[1], m != null) {\n            var x = {\n                extname: \"nameConstraints\"\n            };\n            E && (x.critical = !0);\n            for(var F = r(m, 0), P = 0; P < F.length; P++){\n                for(var T = [], H = r(m, F[P]), C = 0; C < H.length; C++){\n                    var B = n(m, H[C]), O = this.getGeneralSubtree(B);\n                    T.push(O);\n                }\n                var j = m.substr(F[P], 2);\n                j == \"a0\" ? x.permit = T : j == \"a1\" && (x.exclude = T);\n            }\n            return x;\n        }\n    }, this.getGeneralSubtree = function(m) {\n        var E = r(m, 0), w = E.length;\n        if (w < 1 || 2 < w) throw new Error(\"wrong num elements\");\n        for(var x = this.getGeneralName(n(m, E[0])), F = 1; F < w; F++){\n            var P = m.substr(E[F], 2), T = i(m, E[F]), H = parseInt(T, 16);\n            P == \"80\" && (x.min = H), P == \"81\" && (x.max = H);\n        }\n        return x;\n    }, this.getExtKeyUsage = function(m, E) {\n        var w = this.getCriticalExtV(\"keyUsage\", m, E);\n        if (m = w[0], E = w[1], m != null) {\n            var x = {\n                extname: \"keyUsage\"\n            };\n            return E && (x.critical = !0), x.names = this.getExtKeyUsageString(m).split(\",\"), x;\n        }\n    }, this.getExtKeyUsageBin = function(m) {\n        if (m === void 0) {\n            var E = this.getExtInfo(\"keyUsage\");\n            if (E === void 0) return \"\";\n            m = n(this.hex, E.vidx);\n        }\n        if (m.length != 8 && m.length != 10) throw new Error(\"malformed key usage value: \" + m);\n        var w = \"000000000000000\" + parseInt(m.substr(6), 16).toString(2);\n        return m.length == 8 && (w = w.slice(-8)), m.length == 10 && (w = w.slice(-16)), w = w.replace(/0+$/, \"\"), w == \"\" && (w = \"0\"), w;\n    }, this.getExtKeyUsageString = function(m) {\n        for(var E = this.getExtKeyUsageBin(m), w = new Array(), x = 0; x < E.length; x++)E.substr(x, 1) == \"1\" && w.push(L.KEYUSAGE_NAME[x]);\n        return w.join(\",\");\n    }, this.getExtSubjectKeyIdentifier = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"subjectKeyIdentifier\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"subjectKeyIdentifier\"\n        };\n        E && (x.critical = !0);\n        var F = i(m, 0);\n        return x.kid = {\n            hex: F\n        }, x;\n    }, this.getExtAuthorityKeyIdentifier = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"authorityKeyIdentifier\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"authorityKeyIdentifier\"\n        };\n        E && (x.critical = !0);\n        for(var F = r(m, 0), P = 0; P < F.length; P++){\n            var T = m.substr(F[P], 2);\n            if (T === \"80\" && (x.kid = {\n                hex: i(m, F[P])\n            }), T === \"a1\") {\n                var H = n(m, F[P]), C = this.getGeneralNames(H);\n                x.issuer = C[0].dn;\n            }\n            T === \"82\" && (x.sn = {\n                hex: i(m, F[P])\n            });\n        }\n        return x;\n    }, this.getExtExtKeyUsage = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"extKeyUsage\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"extKeyUsage\",\n            array: []\n        };\n        E && (x.critical = !0);\n        for(var F = r(m, 0), P = 0; P < F.length; P++)x.array.push(f(i(m, F[P])));\n        return x;\n    }, this.getExtExtKeyUsageName = function() {\n        var m = this.getExtInfo(\"extKeyUsage\");\n        if (m === void 0) return m;\n        var E = new Array(), w = n(this.hex, m.vidx);\n        if (w === \"\") return E;\n        for(var x = r(w, 0), F = 0; F < x.length; F++)E.push(f(i(w, x[F])));\n        return E;\n    }, this.getExtSubjectAltName = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"subjectAltName\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"subjectAltName\",\n            array: []\n        };\n        return E && (x.critical = !0), x.array = this.getGeneralNames(m), x;\n    }, this.getExtIssuerAltName = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"issuerAltName\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"issuerAltName\",\n            array: []\n        };\n        return E && (x.critical = !0), x.array = this.getGeneralNames(m), x;\n    }, this.getGeneralNames = function(m) {\n        for(var E = r(m, 0), w = [], x = 0; x < E.length; x++){\n            var F = this.getGeneralName(n(m, E[x]));\n            F !== void 0 && w.push(F);\n        }\n        return w;\n    }, this.getGeneralName = function(m) {\n        var E = m.substr(0, 2), w = i(m, 0), x = Ae(w);\n        if (E == \"81\") return {\n            rfc822: x\n        };\n        if (E == \"82\") return {\n            dns: x\n        };\n        if (E == \"86\") return {\n            uri: x\n        };\n        if (E == \"87\") return {\n            ip: tt(w)\n        };\n        if (E == \"a4\") return {\n            dn: this.getX500Name(w)\n        };\n        if (E == \"a0\") return {\n            other: this.getOtherName(m)\n        };\n    }, this.getExtSubjectAltName2 = function() {\n        var m, E, w, x = this.getExtInfo(\"subjectAltName\");\n        if (x === void 0) return x;\n        for(var F = new Array(), P = n(this.hex, x.vidx), T = r(P, 0), H = 0; H < T.length; H++)w = P.substr(T[H], 2), m = i(P, T[H]), w === \"81\" && (E = W(m), F.push([\n            \"MAIL\",\n            E\n        ])), w === \"82\" && (E = W(m), F.push([\n            \"DNS\",\n            E\n        ])), w === \"84\" && (E = L.hex2dn(m, 0), F.push([\n            \"DN\",\n            E\n        ])), w === \"86\" && (E = W(m), F.push([\n            \"URI\",\n            E\n        ])), w === \"87\" && (E = tt(m), F.push([\n            \"IP\",\n            E\n        ]));\n        return F;\n    }, this.getExtCRLDistributionPoints = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"cRLDistributionPoints\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"cRLDistributionPoints\",\n            array: []\n        };\n        E && (x.critical = !0);\n        for(var F = r(m, 0), P = 0; P < F.length; P++){\n            var T = n(m, F[P]);\n            x.array.push(this.getDistributionPoint(T));\n        }\n        return x;\n    }, this.getDistributionPoint = function(m) {\n        for(var E = {}, w = r(m, 0), x = 0; x < w.length; x++){\n            var F = m.substr(w[x], 2), P = n(m, w[x]);\n            F == \"a0\" && (E.dpname = this.getDistributionPointName(P));\n        }\n        return E;\n    }, this.getDistributionPointName = function(m) {\n        for(var E = {}, w = r(m, 0), x = 0; x < w.length; x++){\n            var F = m.substr(w[x], 2), P = n(m, w[x]);\n            F == \"a0\" && (E.full = this.getGeneralNames(P));\n        }\n        return E;\n    }, this.getExtCRLDistributionPointsURI = function() {\n        var m = this.getExtCRLDistributionPoints();\n        if (m == null) return m;\n        for(var E = m.array, w = [], x = 0; x < E.length; x++)try {\n            E[x].dpname.full[0].uri != null && w.push(E[x].dpname.full[0].uri);\n        } catch  {}\n        return w;\n    }, this.getExtAIAInfo = function() {\n        var m = this.getExtInfo(\"authorityInfoAccess\");\n        if (m === void 0) return m;\n        for(var E = {\n            ocsp: [],\n            caissuer: []\n        }, w = r(this.hex, m.vidx), x = 0; x < w.length; x++){\n            var F = h(this.hex, w[x], [\n                0\n            ], \"06\"), P = h(this.hex, w[x], [\n                1\n            ], \"86\");\n            F === \"2b06010505073001\" && E.ocsp.push(W(P)), F === \"2b06010505073002\" && E.caissuer.push(W(P));\n        }\n        return E;\n    }, this.getExtAuthorityInfoAccess = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"authorityInfoAccess\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"authorityInfoAccess\",\n            array: []\n        };\n        E && (x.critical = !0);\n        for(var F = r(m, 0), P = 0; P < F.length; P++){\n            var T = u(m, F[P], [\n                0\n            ], \"06\"), H = h(m, F[P], [\n                1\n            ], \"86\"), C = W(H);\n            if (T == \"2b06010505073001\") x.array.push({\n                ocsp: C\n            });\n            else if (T == \"2b06010505073002\") x.array.push({\n                caissuer: C\n            });\n            else throw new Error(\"unknown method: \" + T);\n        }\n        return x;\n    }, this.getExtCertificatePolicies = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"certificatePolicies\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"certificatePolicies\",\n            array: []\n        };\n        E && (x.critical = !0);\n        for(var F = r(m, 0), P = 0; P < F.length; P++){\n            var T = n(m, F[P]), H = this.getPolicyInformation(T);\n            x.array.push(H);\n        }\n        return x;\n    }, this.getPolicyInformation = function(m) {\n        var E = {}, w = h(m, 0, [\n            0\n        ], \"06\");\n        E.policyoid = f(w);\n        var x = v(m, 0, [\n            1\n        ], \"30\");\n        if (x != -1) {\n            E.array = [];\n            for(var F = r(m, x), P = 0; P < F.length; P++){\n                var T = n(m, F[P]), H = this.getPolicyQualifierInfo(T);\n                E.array.push(H);\n            }\n        }\n        return E;\n    }, this.getOtherName = function(m) {\n        var E = {}, w = r(m, 0), x = h(m, w[0], [], \"06\"), F = h(m, w[1], []);\n        return E.oid = f(x), E.value = s(F), E;\n    }, this.getPolicyQualifierInfo = function(m) {\n        var E = {}, w = h(m, 0, [\n            0\n        ], \"06\");\n        if (w === \"2b06010505070201\") {\n            var x = u(m, 0, [\n                1\n            ], \"16\");\n            E.cps = Ae(x);\n        } else if (w === \"2b06010505070202\") {\n            var F = p(m, 0, [\n                1\n            ], \"30\");\n            E.unotice = this.getUserNotice(F);\n        }\n        return E;\n    }, this.getUserNotice = function(m) {\n        var E = null;\n        try {\n            E = t.parse(m);\n            var w = this._asn1ToUnotice(E);\n            return w;\n        } catch  {\n            return;\n        }\n    }, this._asn1ToUnotice = function(m) {\n        try {\n            for(var E = {}, w = J(m, \"seq\"), x = 0; x < w.length; x++){\n                var F = this._asn1ToNoticeRef(w[x]);\n                F != null && (E.noticeref = F);\n                var P = this.asn1ToDisplayText(w[x]);\n                P != null && (E.exptext = P);\n            }\n            return Object.keys(E).length > 0 ? E : void 0;\n        } catch  {\n            return;\n        }\n    }, this._asn1ToNoticeRef = function(m) {\n        try {\n            for(var E = {}, w = J(m, \"seq\"), x = 0; x < w.length; x++){\n                var F = this._asn1ToNoticeNum(w[x]);\n                F != null && (E.noticenum = F);\n                var P = this.asn1ToDisplayText(w[x]);\n                P != null && (E.org = P);\n            }\n            return Object.keys(E).length > 0 ? E : void 0;\n        } catch  {\n            return;\n        }\n    }, this._asn1ToNoticeNum = function(m) {\n        try {\n            for(var E = J(m, \"seq\"), w = [], x = 0; x < E.length; x++){\n                var F = E[x];\n                w.push(parseInt(J(F, \"int.hex\"), 16));\n            }\n            return w;\n        } catch  {\n            return;\n        }\n    }, this.getDisplayText = function(m) {\n        var E = {\n            \"0c\": \"utf8\",\n            16: \"ia5\",\n            \"1a\": \"vis\",\n            \"1e\": \"bmp\"\n        }, w = {};\n        return w.type = E[m.substr(0, 2)], w.str = Ae(i(m, 0)), w;\n    }, this.asn1ToDisplayText = function(m) {\n        if (m.utf8str != null) return {\n            type: \"utf8\",\n            str: m.utf8str.str\n        };\n        if (m.ia5str != null) return {\n            type: \"ia5\",\n            str: m.ia5str.str\n        };\n        if (m.visstr != null) return {\n            type: \"vis\",\n            str: m.visstr.str\n        };\n        if (m.bmpstr != null) return {\n            type: \"bmp\",\n            str: m.bmpstr.str\n        };\n        if (m.prnstr != null) return {\n            type: \"prn\",\n            str: m.prnstr.str\n        };\n    }, this.getExtPolicyMappings = function(m, E) {\n        var w = this.getCriticalExtV(\"policyMappings\", m, E);\n        if (m = w[0], E = w[1], m != null) {\n            var x = {\n                extname: \"policyMappings\"\n            };\n            E && (x.critical = !0);\n            try {\n                for(var F = s(m), P = F.seq, T = [], H = 0; H < P.length; H++){\n                    var C = P[H].seq;\n                    T.push([\n                        C[0].oid,\n                        C[1].oid\n                    ]);\n                }\n                x.array = T;\n            } catch  {\n                throw new b(\"malformed policyMappings\");\n            }\n            return x;\n        }\n    }, this.getExtPolicyConstraints = function(m, E) {\n        var w = this.getCriticalExtV(\"policyConstraints\", m, E);\n        if (m = w[0], E = w[1], m != null) {\n            var x = {\n                extname: \"policyConstraints\"\n            };\n            E && (x.critical = !0);\n            var F = s(m);\n            try {\n                for(var P = F.seq, T = 0; T < P.length; T++){\n                    var H = P[T].tag;\n                    H.explicit == !1 && (H.tag == \"80\" && (x.reqexp = parseInt(H.hex, 16)), H.tag == \"81\" && (x.inhibit = parseInt(H.hex, 16)));\n                }\n            } catch  {\n                return new b(\"malformed policyConstraints value\");\n            }\n            return x;\n        }\n    }, this.getExtInhibitAnyPolicy = function(m, E) {\n        var w = this.getCriticalExtV(\"inhibitAnyPolicy\", m, E);\n        if (m = w[0], E = w[1], m != null) {\n            var x = {\n                extname: \"inhibitAnyPolicy\"\n            };\n            E && (x.critical = !0);\n            var F = l(m, 0);\n            return F == -1 ? new b(\"wrong value\") : (x.skip = F, x);\n        }\n    }, this.getExtCRLNumber = function(m, E) {\n        var w = {\n            extname: \"cRLNumber\"\n        };\n        if (E && (w.critical = !0), m.substr(0, 2) == \"02\") return w.num = {\n            hex: i(m, 0)\n        }, w;\n        throw new b(\"hExtV parse error: \" + m);\n    }, this.getExtCRLReason = function(m, E) {\n        var w = {\n            extname: \"cRLReason\"\n        };\n        if (E && (w.critical = !0), m.substr(0, 2) == \"0a\") return w.code = parseInt(i(m, 0), 16), w;\n        throw new Error(\"hExtV parse error: \" + m);\n    }, this.getExtOcspNonce = function(m, E) {\n        var w = {\n            extname: \"ocspNonce\"\n        };\n        E && (w.critical = !0);\n        var x = i(m, 0);\n        return w.hex = x, w;\n    }, this.getExtOcspNoCheck = function(m, E) {\n        var w = {\n            extname: \"ocspNoCheck\"\n        };\n        return E && (w.critical = !0), w;\n    }, this.getExtAdobeTimeStamp = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"adobeTimeStamp\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"adobeTimeStamp\"\n        };\n        E && (x.critical = !0);\n        var F = r(m, 0);\n        if (F.length > 1) {\n            var P = n(m, F[1]), T = this.getGeneralName(P);\n            T.uri != null && (x.uri = T.uri);\n        }\n        if (F.length > 2) {\n            var H = n(m, F[2]);\n            H == \"0101ff\" && (x.reqauth = !0), H == \"010100\" && (x.reqauth = !1);\n        }\n        return x;\n    }, this.getExtSubjectDirectoryAttributes = function(m, E) {\n        if (m === void 0 && E === void 0) {\n            var w = this.getExtInfo(\"subjectDirectoryAttributes\");\n            if (w === void 0) return;\n            m = n(this.hex, w.vidx), E = w.critical;\n        }\n        var x = {\n            extname: \"subjectDirectoryAttributes\"\n        };\n        E && (x.critical = !0);\n        try {\n            for(var F = s(m), P = [], T = 0; T < F.seq.length; T++){\n                var H = F.seq[T], C = J(H, \"seq.0.oid\"), B = J(H, \"seq.1.set\");\n                if (C == null || B == null) throw \"error\";\n                P.push({\n                    attr: C,\n                    array: B\n                });\n            }\n            return x.array = P, x;\n        } catch  {\n            throw new Error(\"malformed subjectDirectoryAttributes extension value\");\n        }\n    };\n    var D = function(m) {\n        var E = {};\n        try {\n            var w = m.seq[0].oid, x = a.asn1.x509.OID.name2oid(w);\n            E.type = a.asn1.x509.OID.oid2atype(x);\n            var F = m.seq[1];\n            if (F.utf8str != null) E.ds = \"utf8\", E.value = F.utf8str.str;\n            else if (F.numstr != null) E.ds = \"num\", E.value = F.numstr.str;\n            else if (F.telstr != null) E.ds = \"tel\", E.value = F.telstr.str;\n            else if (F.prnstr != null) E.ds = \"prn\", E.value = F.prnstr.str;\n            else if (F.ia5str != null) E.ds = \"ia5\", E.value = F.ia5str.str;\n            else if (F.visstr != null) E.ds = \"vis\", E.value = F.visstr.str;\n            else if (F.bmpstr != null) E.ds = \"bmp\", E.value = F.bmpstr.str;\n            else throw \"error\";\n            return E;\n        } catch  {\n            throw new Erorr(\"improper ASN.1 parsed AttrTypeAndValue\");\n        }\n    }, A = function(m) {\n        try {\n            return m.set.map(function(E) {\n                return D(E);\n            });\n        } catch (E) {\n            throw new Error(\"improper ASN.1 parsed RDN: \" + E);\n        }\n    }, I = function(m) {\n        try {\n            return m.seq.map(function(E) {\n                return A(E);\n            });\n        } catch (E) {\n            throw new Error(\"improper ASN.1 parsed X500Name: \" + E);\n        }\n    };\n    this.getX500NameRule = function(m) {\n        for(var E = null, w = [], x = 0; x < m.length; x++)for(var F = m[x], P = 0; P < F.length; P++)w.push(F[P]);\n        for(var x = 0; x < w.length; x++){\n            var T = w[x], H = T.ds, C = T.value, B = T.type;\n            if (H != \"prn\" && H != \"utf8\" && H != \"ia5\") return \"mixed\";\n            if (H == \"ia5\") {\n                if (B != \"CN\") return \"mixed\";\n                if (a.lang.String.isMail(C)) continue;\n                return \"mixed\";\n            }\n            if (B == \"C\") {\n                if (H == \"prn\") continue;\n                return \"mixed\";\n            }\n            if (E == null) E = H;\n            else if (E !== H) return \"mixed\";\n        }\n        return E ?? \"prn\";\n    }, this.getAttrTypeAndValue = function(m) {\n        var E = s(m);\n        return D(E);\n    }, this.getRDN = function(m) {\n        var E = s(m);\n        return A(E);\n    }, this.getX500NameArray = function(m) {\n        var E = s(m);\n        return I(E);\n    }, this.getX500Name = function(m, E, w) {\n        var x = this.getX500NameArray(m), F = this.dnarraytostr(x), P = {\n            str: F\n        };\n        return P.array = x, w == !0 && (P.hex = m), E == !0 && (P.canon = this.c14nRDNArray(x)), P;\n    }, this.readCertPEM = function(m) {\n        this.readCertHex(g(m));\n    }, this.readCertHex = function(m) {\n        this.hex = m, this.getVersion();\n        try {\n            y(this.hex, 0, [\n                0,\n                7\n            ], \"a3\"), this.parseExt();\n        } catch  {}\n    }, this.getParam = function(m) {\n        var E = {};\n        return m == null && (m = {}), E.version = this.getVersion(), E.serial = {\n            hex: this.getSerialNumberHex()\n        }, E.sigalg = this.getSignatureAlgorithmField(), E.issuer = this.getIssuer(m.dncanon, m.dnhex), E.notbefore = this.getNotBefore(), E.notafter = this.getNotAfter(), E.subject = this.getSubject(m.dncanon, m.dnhex), E.sbjpubkey = de(this.getPublicKeyHex(), \"PUBLIC KEY\"), this.aExtInfo != null && this.aExtInfo.length > 0 && (E.ext = this.getExtParamArray()), E.sighex = this.getSignatureValueHex(), m.tbshex == !0 && (E.tbshex = p(this.hex, 0, [\n            0\n        ])), m.nodnarray == !0 && (delete E.issuer.array, delete E.subject.array), E;\n    }, this.getExtParamArray = function(m) {\n        if (m == null) {\n            var E = v(this.hex, 0, [\n                0,\n                \"[3]\"\n            ]);\n            E != -1 && (m = c(this.hex, 0, [\n                0,\n                \"[3]\",\n                0\n            ], \"30\"));\n        }\n        for(var w = [], x = r(m, 0), F = 0; F < x.length; F++){\n            var P = n(m, x[F]), T = this.getExtParam(P);\n            T != null && w.push(T);\n        }\n        return w;\n    }, this.getExtParam = function(m) {\n        var E = r(m, 0), w = E.length;\n        if (w != 2 && w != 3) throw new Error(\"wrong number elements in Extension: \" + w + \" \" + m);\n        var x = d(h(m, 0, [\n            0\n        ], \"06\")), F = !1;\n        w == 3 && p(m, 0, [\n            1\n        ]) == \"0101ff\" && (F = !0);\n        var P = p(m, 0, [\n            w - 1,\n            0\n        ]), T = void 0;\n        if (x == \"2.5.29.14\" ? T = this.getExtSubjectKeyIdentifier(P, F) : x == \"2.5.29.15\" ? T = this.getExtKeyUsage(P, F) : x == \"2.5.29.17\" ? T = this.getExtSubjectAltName(P, F) : x == \"2.5.29.18\" ? T = this.getExtIssuerAltName(P, F) : x == \"2.5.29.19\" ? T = this.getExtBasicConstraints(P, F) : x == \"2.5.29.30\" ? T = this.getExtNameConstraints(P, F) : x == \"2.5.29.31\" ? T = this.getExtCRLDistributionPoints(P, F) : x == \"2.5.29.32\" ? T = this.getExtCertificatePolicies(P, F) : x == \"2.5.29.33\" ? T = this.getExtPolicyMappings(P, F) : x == \"2.5.29.35\" ? T = this.getExtAuthorityKeyIdentifier(P, F) : x == \"2.5.29.36\" ? T = this.getExtPolicyConstraints(P, F) : x == \"2.5.29.37\" ? T = this.getExtExtKeyUsage(P, F) : x == \"2.5.29.54\" ? T = this.getExtInhibitAnyPolicy(P, F) : x == \"1.3.6.1.5.5.7.1.1\" ? T = this.getExtAuthorityInfoAccess(P, F) : x == \"2.5.29.20\" ? T = this.getExtCRLNumber(P, F) : x == \"2.5.29.21\" ? T = this.getExtCRLReason(P, F) : x == \"2.5.29.9\" ? T = this.getExtSubjectDirectoryAttributes(P, F) : x == \"1.3.6.1.5.5.7.48.1.2\" ? T = this.getExtOcspNonce(P, F) : x == \"1.3.6.1.5.5.7.48.1.5\" ? T = this.getExtOcspNoCheck(P, F) : x == \"1.2.840.113583.1.1.9.1\" ? T = this.getExtAdobeTimeStamp(P, F) : L.EXT_PARSER[x] != null && (T = L.EXT_PARSER[x](x, F, P)), T != null) return T;\n        var H = {\n            extname: x,\n            extn: P\n        };\n        try {\n            H.extn = s(P);\n        } catch  {}\n        return F && (H.critical = !0), H;\n    }, this.findExt = function(m, E) {\n        for(var w = 0; w < m.length; w++)if (m[w].extname == E) return m[w];\n        return null;\n    }, this.updateExtCDPFullURI = function(m, E) {\n        var w = this.findExt(m, \"cRLDistributionPoints\");\n        if (w != null && w.array != null) {\n            for(var x = w.array, F = 0; F < x.length; F++)if (x[F].dpname != null && x[F].dpname.full != null) for(var P = x[F].dpname.full, T = 0; T < P.length; T++){\n                var H = P[F];\n                H.uri != null && (H.uri = E);\n            }\n        }\n    }, this.updateExtAIAOCSP = function(m, E) {\n        var w = this.findExt(m, \"authorityInfoAccess\");\n        if (w != null && w.array != null) for(var x = w.array, F = 0; F < x.length; F++)x[F].ocsp != null && (x[F].ocsp = E);\n    }, this.updateExtAIACAIssuer = function(m, E) {\n        var w = this.findExt(m, \"authorityInfoAccess\");\n        if (w != null && w.array != null) for(var x = w.array, F = 0; F < x.length; F++)x[F].caissuer != null && (x[F].caissuer = E);\n    }, this.dnarraytostr = function(m) {\n        function E(x) {\n            return x.map(function(F) {\n                return w(F).replace(/\\+/, \"\\\\+\");\n            }).join(\"+\");\n        }\n        function w(x) {\n            return x.type + \"=\" + x.value;\n        }\n        return \"/\" + m.map(function(x) {\n            return E(x).replace(/\\//, \"\\\\/\");\n        }).join(\"/\");\n    }, this.setCanonicalizedDN = function(m) {\n        var E;\n        if (m.str != null && m.array == null) {\n            var w = new a.asn1.x509.X500Name({\n                str: m.str\n            }), x = w.tohex();\n            E = this.getX500NameArray(x);\n        } else E = m.array;\n        m.canon == null && (m.canon = this.c14nRDNArray(E));\n    }, this.c14nRDNArray = function(m) {\n        for(var E = [], w = 0; w < m.length; w++){\n            for(var x = m[w], F = [], P = 0; P < x.length; P++){\n                var T = x[P], H = T.value;\n                H = H.replace(/^\\s*/, \"\"), H = H.replace(/\\s*$/, \"\"), H = H.replace(/\\s+/g, \" \"), H = H.toLowerCase(), F.push(T.type.toLowerCase() + \"=\" + H);\n            }\n            E.push(F.join(\"+\"));\n        }\n        return \"/\" + E.join(\"/\");\n    }, this.getInfo = function() {\n        var m = function(ce) {\n            for(var M = \"\", G = \"    \", Q = `\n`, ee = ce.array, pe = 0; pe < ee.length; pe++){\n                var te = ee[pe];\n                if (te.dn != null && (M += G + \"dn: \" + te.dn.str + Q), te.ip != null && (M += G + \"ip: \" + te.ip + Q), te.rfc822 != null && (M += G + \"rfc822: \" + te.rfc822 + Q), te.dns != null && (M += G + \"dns: \" + te.dns + Q), te.uri != null && (M += G + \"uri: \" + te.uri + Q), te.other != null) {\n                    var Me = te.other.oid, Ne = JSON.stringify(te.other.value).replace(/\\\"/g, \"\");\n                    M += G + \"other: \" + Me + \"=\" + Ne + Q;\n                }\n            }\n            return M = M.replace(/\\n$/, \"\"), M;\n        }, E = function(ce) {\n            for(var M = \"\", G = ce.array, Q = 0; Q < G.length; Q++){\n                var ee = G[Q];\n                if (M += \"    policy oid: \" + ee.policyoid + `\n`, ee.array !== void 0) for(var pe = 0; pe < ee.array.length; pe++){\n                    var te = ee.array[pe];\n                    te.cps !== void 0 && (M += \"    cps: \" + te.cps + `\n`);\n                }\n            }\n            return M;\n        }, w = function(ce) {\n            for(var M = \"\", G = ce.array, Q = 0; Q < G.length; Q++){\n                var ee = G[Q];\n                try {\n                    ee.dpname.full[0].uri !== void 0 && (M += \"    \" + ee.dpname.full[0].uri + `\n`);\n                } catch  {}\n                try {\n                    ee.dname.full[0].dn.hex !== void 0 && (M += \"    \" + L.hex2dn(ee.dpname.full[0].dn.hex) + `\n`);\n                } catch  {}\n            }\n            return M;\n        }, x = function(ce) {\n            for(var M = \"\", G = ce.array, Q = 0; Q < G.length; Q++){\n                var ee = G[Q];\n                ee.caissuer !== void 0 && (M += \"    caissuer: \" + ee.caissuer + `\n`), ee.ocsp !== void 0 && (M += \"    ocsp: \" + ee.ocsp + `\n`);\n            }\n            return M;\n        }, F, P, T;\n        if (F = `Basic Fields\n`, F += \"  serial number: \" + this.getSerialNumberHex() + `\n`, F += \"  signature algorithm: \" + this.getSignatureAlgorithmField() + `\n`, F += \"  issuer: \" + this.getIssuerString() + `\n`, F += \"  notBefore: \" + this.getNotBefore() + `\n`, F += \"  notAfter: \" + this.getNotAfter() + `\n`, F += \"  subject: \" + this.getSubjectString() + `\n`, F += `  subject public key info: \n`, P = this.getPublicKey(), F += \"    key algorithm: \" + P.type + `\n`, P.type === \"RSA\" && (F += \"    n=\" + xt(P.n.toString(16)).substr(0, 16) + `...\n`, F += \"    e=\" + xt(P.e.toString(16)) + `\n`), T = this.aExtInfo, T != null) {\n            F += `X509v3 Extensions:\n`;\n            for(var H = 0; H < T.length; H++){\n                var C = T[H], B = a.asn1.x509.OID.oid2name(C.oid);\n                B === \"\" && (B = C.oid);\n                var O = \"\";\n                if (C.critical === !0 && (O = \"CRITICAL\"), F += \"  \" + B + \" \" + O + `:\n`, B === \"basicConstraints\") {\n                    var j = this.getExtBasicConstraints();\n                    j.cA === void 0 ? F += `    {}\n` : (F += \"    cA=true\", j.pathLen !== void 0 && (F += \", pathLen=\" + j.pathLen), F += `\n`);\n                } else if (B == \"policyMappings\") {\n                    var fe = this.getExtPolicyMappings().array, Z = fe.map(function(ce) {\n                        var M = ce;\n                        return M[0] + \":\" + M[1];\n                    }).join(\", \");\n                    F += \"    \" + Z + `\n`;\n                } else if (B == \"policyConstraints\") {\n                    var X = this.getExtPolicyConstraints();\n                    F += \"    \", X.reqexp != null && (F += \" reqexp=\" + X.reqexp), X.inhibit != null && (F += \" inhibit=\" + X.inhibit), F += `\n`;\n                } else if (B == \"inhibitAnyPolicy\") {\n                    var X = this.getExtInhibitAnyPolicy();\n                    F += \"    skip=\" + X.skip + `\n`;\n                } else if (B == \"keyUsage\") F += \"    \" + this.getExtKeyUsageString() + `\n`;\n                else if (B == \"subjectKeyIdentifier\") F += \"    \" + this.getExtSubjectKeyIdentifier().kid.hex + `\n`;\n                else if (B == \"authorityKeyIdentifier\") {\n                    var re = this.getExtAuthorityKeyIdentifier();\n                    re.kid !== void 0 && (F += \"    kid=\" + re.kid.hex + `\n`);\n                } else if (B == \"extKeyUsage\") {\n                    var ne = this.getExtExtKeyUsage().array;\n                    F += \"    \" + ne.join(\", \") + `\n`;\n                } else if (B == \"subjectAltName\") {\n                    var he = m(this.getExtSubjectAltName());\n                    F += he + `\n`;\n                } else if (B == \"cRLDistributionPoints\") {\n                    var se = this.getExtCRLDistributionPoints();\n                    F += w(se);\n                } else if (B == \"authorityInfoAccess\") {\n                    var ke = this.getExtAuthorityInfoAccess();\n                    F += x(ke);\n                } else B == \"certificatePolicies\" && (F += E(this.getExtCertificatePolicies()));\n            }\n        }\n        return F += \"signature algorithm: \" + this.getSignatureAlgorithmName() + `\n`, F += \"signature: \" + this.getSignatureValueHex().substr(0, 16) + `...\n`, F;\n    }, typeof e == \"string\" && (e.indexOf(\"-----BEGIN\") != -1 ? this.readCertPEM(e) : a.lang.String.isHex(e) && this.readCertHex(e));\n}\nL.EXT_PARSER = {};\nL.registExtParser = function(e, t) {\n    L.EXT_PARSER[e] = t;\n};\nL.hex2dn = function(e, t) {\n    t === void 0 && (t = 0);\n    var r = new L();\n    V.getTLV(e, t);\n    var i = r.getX500Name(e);\n    return i.str;\n};\nL.hex2rdn = function(e, t) {\n    if (t === void 0 && (t = 0), e.substr(t, 2) !== \"31\") throw new Error(\"malformed RDN\");\n    for(var r = new Array(), i = V.getChildIdx(e, t), s = 0; s < i.length; s++)r.push(L.hex2attrTypeValue(e, i[s]));\n    return r = r.map(function(n) {\n        return n.replace(\"+\", \"\\\\+\");\n    }), r.join(\"+\");\n};\nL.hex2attrTypeValue = function(e, t) {\n    var r = V, i = r.getV;\n    if (t === void 0 && (t = 0), e.substr(t, 2) !== \"30\") throw new Error(\"malformed attribute type and value\");\n    var s = r.getChildIdx(e, t);\n    s.length !== 2 || e.substr(s[0], 2);\n    var n = i(e, s[0]), h = a.asn1.ASN1Util.oidHexToInt(n), u = a.asn1.x509.OID.oid2atype(h), p = i(e, s[1]), c = Ae(p);\n    return u + \"=\" + c;\n};\nL.getPublicKeyFromCertHex = function(e) {\n    var t = new L();\n    return t.readCertHex(e), t.getPublicKey();\n};\nL.getPublicKeyFromCertPEM = function(e) {\n    var t = new L();\n    return t.readCertPEM(e), t.getPublicKey();\n};\nL.getPublicKeyInfoPropOfCertPEM = function(e) {\n    var t = V, r = t.getVbyList, i = {}, s, n;\n    return i.algparam = null, s = new L(), s.readCertPEM(e), n = s.getPublicKeyHex(), i.keyhex = r(n, 0, [\n        1\n    ], \"03\").substr(2), i.algoid = r(n, 0, [\n        0,\n        0\n    ], \"06\"), i.algoid === \"2a8648ce3d0201\" && (i.algparam = r(n, 0, [\n        0,\n        1\n    ], \"06\")), i;\n};\nL.KEYUSAGE_NAME = [\n    \"digitalSignature\",\n    \"nonRepudiation\",\n    \"keyEncipherment\",\n    \"dataEncipherment\",\n    \"keyAgreement\",\n    \"keyCertSign\",\n    \"cRLSign\",\n    \"encipherOnly\",\n    \"decipherOnly\"\n];\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.jws > \"u\" || !a.jws) && (a.jws = {});\na.jws.JWS = function() {\n    var e = a, t = e.jws.JWS, r = t.isSafeJSONString;\n    this.parseJWS = function(i, s) {\n        if (!(this.parsedJWS !== void 0 && (s || this.parsedJWS.sigvalH !== void 0))) {\n            var n = i.match(/^([^.]+)\\.([^.]+)\\.([^.]+)$/);\n            if (n == null) throw \"JWS signature is not a form of 'Head.Payload.SigValue'.\";\n            var h = n[1], u = n[2], p = n[3], c = h + \".\" + u;\n            if (this.parsedJWS = {}, this.parsedJWS.headB64U = h, this.parsedJWS.payloadB64U = u, this.parsedJWS.sigvalB64U = p, this.parsedJWS.si = c, !s) {\n                var y = Y(p), v = ve(y, 16);\n                this.parsedJWS.sigvalH = y, this.parsedJWS.sigvalBI = v;\n            }\n            var o = we(h), l = we(u);\n            if (this.parsedJWS.headS = o, this.parsedJWS.payloadS = l, !r(o, this.parsedJWS, \"headP\")) throw \"malformed JSON string for JWS Head: \" + o;\n        }\n    };\n};\na.jws.JWS.sign = function(e, t, r, i, s) {\n    var n = a, h = n.jws, u = h.JWS, p = u.readSafeJSONString, c = u.isSafeJSONString, y = n.crypto;\n    y.ECDSA;\n    var v = y.Mac, o = y.Signature, l = JSON, f, d, g;\n    if (typeof t != \"string\" && typeof t != \"object\") throw \"spHeader must be JSON string or object: \" + t;\n    if (typeof t == \"object\" && (d = t, f = l.stringify(d)), typeof t == \"string\") {\n        if (f = t, !c(f)) throw \"JWS Head is not safe JSON string: \" + f;\n        d = p(f);\n    }\n    if (g = r, typeof r == \"object\" && (g = l.stringify(r)), (e == \"\" || e == null) && d.alg !== void 0 && (e = d.alg), e != \"\" && e != null && d.alg === void 0 && (d.alg = e, f = l.stringify(d)), e !== d.alg) throw \"alg and sHeader.alg doesn't match: \" + e + \"!=\" + d.alg;\n    var S = null;\n    if (u.jwsalg2sigalg[e] === void 0) throw \"unsupported alg name: \" + e;\n    S = u.jwsalg2sigalg[e];\n    var b = Je(f), D = Je(g), A = b + \".\" + D, I = \"\";\n    if (S.substr(0, 4) == \"Hmac\") {\n        if (i === void 0) throw \"mac key shall be specified for HS* alg\";\n        var m = new v({\n            alg: S,\n            prov: \"cryptojs\",\n            pass: i\n        });\n        m.updateString(A), I = m.doFinal();\n    } else if (S.indexOf(\"withECDSA\") != -1) {\n        var E = new o({\n            alg: S\n        });\n        E.init(i, s), E.updateString(A);\n        var w = E.sign();\n        I = a.crypto.ECDSA.asn1SigToConcatSig(w);\n    } else if (S != \"none\") {\n        var E = new o({\n            alg: S\n        });\n        E.init(i, s), E.updateString(A), I = E.sign();\n    }\n    var x = ae(I);\n    return A + \".\" + x;\n};\na.jws.JWS.verify = function(e, t, r) {\n    var i = a, s = i.jws, n = s.JWS, h = n.readSafeJSONString, u = i.crypto, p = u.ECDSA, c = u.Mac, y = u.Signature, v;\n    if (typeof q !== void 0 && (v = q), !Ht(e)) return !1;\n    var o = e.split(\".\");\n    if (o.length !== 3) return !1;\n    var l = o[0], f = o[1], d = l + \".\" + f, g = Y(o[2]), S = h(we(o[0])), b = null, D = null;\n    if (S.alg === void 0) throw \"algorithm not specified in header\";\n    if (b = S.alg, D = b.substr(0, 2), r != null && Object.prototype.toString.call(r) === \"[object Array]\" && r.length > 0) {\n        var A = \":\" + r.join(\":\") + \":\";\n        if (A.indexOf(\":\" + b + \":\") == -1) throw \"algorithm '\" + b + \"' not accepted in the list\";\n    }\n    if (b != \"none\" && t === null) throw \"key shall be specified to verify.\";\n    if (typeof t == \"string\" && t.indexOf(\"-----BEGIN \") != -1 && (t = k.getKey(t)), (D == \"RS\" || D == \"PS\") && !(t instanceof v)) throw \"key shall be a RSAKey obj for RS* and PS* algs\";\n    if (D == \"ES\" && !(t instanceof p)) throw \"key shall be a ECDSA obj for ES* algs\";\n    var I = null;\n    if (n.jwsalg2sigalg[S.alg] === void 0) throw \"unsupported alg name: \" + b;\n    if (I = n.jwsalg2sigalg[b], I == \"none\") throw \"not supported\";\n    if (I.substr(0, 4) == \"Hmac\") {\n        var m = null;\n        if (t === void 0) throw \"hexadecimal key shall be specified for HMAC\";\n        var E = new c({\n            alg: I,\n            pass: t\n        });\n        return E.updateString(d), m = E.doFinal(), g == m;\n    } else if (I.indexOf(\"withECDSA\") != -1) {\n        var w = null;\n        try {\n            w = p.concatSigToASN1Sig(g);\n        } catch  {\n            return !1;\n        }\n        var x = new y({\n            alg: I\n        });\n        return x.init(t), x.updateString(d), x.verify(w);\n    } else {\n        var x = new y({\n            alg: I\n        });\n        return x.init(t), x.updateString(d), x.verify(g);\n    }\n};\na.jws.JWS.parse = function(e) {\n    var t = e.split(\".\"), r = {}, i, s, n;\n    if (t.length != 2 && t.length != 3) throw \"malformed sJWS: wrong number of '.' splitted elements\";\n    return i = t[0], s = t[1], t.length == 3 && (n = t[2]), r.headerObj = a.jws.JWS.readSafeJSONString(we(i)), r.payloadObj = a.jws.JWS.readSafeJSONString(we(s)), r.headerPP = JSON.stringify(r.headerObj, null, \"  \"), r.payloadObj == null ? r.payloadPP = we(s) : r.payloadPP = JSON.stringify(r.payloadObj, null, \"  \"), n !== void 0 && (r.sigHex = Y(n)), r;\n};\na.jws.JWS.verifyJWT = function(e, t, r) {\n    var i = a, s = i.jws, n = s.JWS, h = n.readSafeJSONString, u = n.inArray, p = n.includedArray;\n    if (!Ht(e)) return !1;\n    var c = e.split(\".\");\n    if (c.length != 3) return !1;\n    var y = c[0], v = c[1];\n    Y(c[2]);\n    var o = h(we(y)), l = h(we(v));\n    if (o.alg === void 0) return !1;\n    if (r.alg === void 0) throw \"acceptField.alg shall be specified\";\n    if (!u(o.alg, r.alg) || l.iss !== void 0 && typeof r.iss == \"object\" && !u(l.iss, r.iss) || l.sub !== void 0 && typeof r.sub == \"object\" && !u(l.sub, r.sub)) return !1;\n    if (l.aud !== void 0 && typeof r.aud == \"object\") {\n        if (typeof l.aud == \"string\") {\n            if (!u(l.aud, r.aud)) return !1;\n        } else if (typeof l.aud == \"object\" && !p(l.aud, r.aud)) return !1;\n    }\n    var f = s.IntDate.getNow();\n    return r.verifyAt !== void 0 && typeof r.verifyAt == \"number\" && (f = r.verifyAt), (r.gracePeriod === void 0 || typeof r.gracePeriod != \"number\") && (r.gracePeriod = 0), !(l.exp !== void 0 && typeof l.exp == \"number\" && l.exp + r.gracePeriod < f || l.nbf !== void 0 && typeof l.nbf == \"number\" && f < l.nbf - r.gracePeriod || l.iat !== void 0 && typeof l.iat == \"number\" && f < l.iat - r.gracePeriod || l.jti !== void 0 && r.jti !== void 0 && l.jti !== r.jti || !n.verify(e, t, r.alg));\n};\na.jws.JWS.includedArray = function(e, t) {\n    var r = a.jws.JWS.inArray;\n    if (e === null || typeof e != \"object\" || typeof e.length != \"number\") return !1;\n    for(var i = 0; i < e.length; i++)if (!r(e[i], t)) return !1;\n    return !0;\n};\na.jws.JWS.inArray = function(e, t) {\n    if (t === null || typeof t != \"object\" || typeof t.length != \"number\") return !1;\n    for(var r = 0; r < t.length; r++)if (t[r] == e) return !0;\n    return !1;\n};\na.jws.JWS.jwsalg2sigalg = {\n    HS256: \"HmacSHA256\",\n    HS384: \"HmacSHA384\",\n    HS512: \"HmacSHA512\",\n    RS256: \"SHA256withRSA\",\n    RS384: \"SHA384withRSA\",\n    RS512: \"SHA512withRSA\",\n    ES256: \"SHA256withECDSA\",\n    ES384: \"SHA384withECDSA\",\n    ES512: \"SHA512withECDSA\",\n    PS256: \"SHA256withRSAandMGF1\",\n    PS384: \"SHA384withRSAandMGF1\",\n    PS512: \"SHA512withRSAandMGF1\",\n    none: \"none\"\n};\na.jws.JWS.isSafeJSONString = function(e, t, r) {\n    var i = null;\n    try {\n        return i = Pt(e), typeof i != \"object\" || i.constructor === Array ? 0 : (t && (t[r] = i), 1);\n    } catch  {\n        return 0;\n    }\n};\na.jws.JWS.readSafeJSONString = function(e) {\n    var t = null;\n    try {\n        return t = Pt(e), typeof t != \"object\" || t.constructor === Array ? null : t;\n    } catch  {\n        return null;\n    }\n};\na.jws.JWS.getEncodedSignatureValueFromJWS = function(e) {\n    var t = e.match(/^[^.]+\\.[^.]+\\.([^.]+)$/);\n    if (t == null) throw \"JWS signature is not a form of 'Head.Payload.SigValue'.\";\n    return t[1];\n};\na.jws.JWS.getJWKthumbprint = function(e) {\n    if (e.kty !== \"RSA\" && e.kty !== \"EC\" && e.kty !== \"oct\") throw \"unsupported algorithm for JWK Thumprint\";\n    var t = \"{\";\n    if (e.kty === \"RSA\") {\n        if (typeof e.n != \"string\" || typeof e.e != \"string\") throw \"wrong n and e value for RSA key\";\n        t += '\"e\":\"' + e.e + '\",', t += '\"kty\":\"' + e.kty + '\",', t += '\"n\":\"' + e.n + '\"}';\n    } else if (e.kty === \"EC\") {\n        if (typeof e.crv != \"string\" || typeof e.x != \"string\" || typeof e.y != \"string\") throw \"wrong crv, x and y value for EC key\";\n        t += '\"crv\":\"' + e.crv + '\",', t += '\"kty\":\"' + e.kty + '\",', t += '\"x\":\"' + e.x + '\",', t += '\"y\":\"' + e.y + '\"}';\n    } else if (e.kty === \"oct\") {\n        if (typeof e.k != \"string\") throw \"wrong k value for oct(symmetric) key\";\n        t += '\"kty\":\"' + e.kty + '\",', t += '\"k\":\"' + e.k + '\"}';\n    }\n    var r = Pe(t), i = a.crypto.Util.hashHex(r, \"sha256\"), s = ae(i);\n    return s;\n};\na.jws.IntDate = {};\na.jws.IntDate.get = function(e) {\n    var t = a.jws.IntDate, r = t.getNow, i = t.getZulu;\n    if (e == \"now\") return r();\n    if (e == \"now + 1hour\") return r() + 60 * 60;\n    if (e == \"now + 1day\") return r() + 60 * 60 * 24;\n    if (e == \"now + 1month\") return r() + 60 * 60 * 24 * 30;\n    if (e == \"now + 1year\") return r() + 60 * 60 * 24 * 365;\n    if (e.match(/Z$/)) return i(e);\n    if (e.match(/^[0-9]+$/)) return parseInt(e);\n    throw \"unsupported format: \" + e;\n};\na.jws.IntDate.getZulu = function(e) {\n    return gn(e);\n};\na.jws.IntDate.getNow = function() {\n    var e = ~~/* @__PURE__ */ (new Date() / 1e3);\n    return e;\n};\na.jws.IntDate.intDate2UTCString = function(e) {\n    var t = new Date(e * 1e3);\n    return t.toUTCString();\n};\na.jws.IntDate.intDate2Zulu = function(e) {\n    var t = new Date(e * 1e3), r = (\"0000\" + t.getUTCFullYear()).slice(-4), i = (\"00\" + (t.getUTCMonth() + 1)).slice(-2), s = (\"00\" + t.getUTCDate()).slice(-2), n = (\"00\" + t.getUTCHours()).slice(-2), h = (\"00\" + t.getUTCMinutes()).slice(-2), u = (\"00\" + t.getUTCSeconds()).slice(-2);\n    return r + i + s + n + h + u + \"Z\";\n};\n(typeof a > \"u\" || !a) && (a = {});\n(typeof a.jws > \"u\" || !a.jws) && (a.jws = {});\na.jws.JWSJS = function() {\n    var e = a, t = e.jws, r = t.JWS, i = r.readSafeJSONString;\n    this.aHeader = [], this.sPayload = \"\", this.aSignature = [], this.init = function() {\n        this.aHeader = [], this.sPayload = void 0, this.aSignature = [];\n    }, this.initWithJWS = function(s) {\n        this.init();\n        var n = s.split(\".\");\n        if (n.length != 3) throw \"malformed input JWS\";\n        this.aHeader.push(n[0]), this.sPayload = n[1], this.aSignature.push(n[2]);\n    }, this.addSignature = function(s, n, h, u) {\n        if (this.sPayload === void 0 || this.sPayload === null) throw \"there's no JSON-JS signature to add.\";\n        var p = this.aHeader.length;\n        if (this.aHeader.length != this.aSignature.length) throw \"aHeader.length != aSignature.length\";\n        try {\n            var c = a.jws.JWS.sign(s, n, this.sPayload, h, u), y = c.split(\".\"), v = y[0], o = y[2];\n            this.aHeader.push(y[0]), this.aSignature.push(y[2]);\n        } catch (l) {\n            throw this.aHeader.length > p && this.aHeader.pop(), this.aSignature.length > p && this.aSignature.pop(), \"addSignature failed: \" + l;\n        }\n    }, this.verifyAll = function(s) {\n        if (this.aHeader.length !== s.length || this.aSignature.length !== s.length) return !1;\n        for(var n = 0; n < s.length; n++){\n            var h = s[n];\n            if (h.length !== 2) return !1;\n            var u = this.verifyNth(n, h[0], h[1]);\n            if (u === !1) return !1;\n        }\n        return !0;\n    }, this.verifyNth = function(s, n, h) {\n        if (this.aHeader.length <= s || this.aSignature.length <= s) return !1;\n        var u = this.aHeader[s], p = this.aSignature[s], c = u + \".\" + this.sPayload + \".\" + p, y = !1;\n        try {\n            y = r.verify(c, n, h);\n        } catch  {\n            return !1;\n        }\n        return y;\n    }, this.readJWSJS = function(s) {\n        if (typeof s == \"string\") {\n            var n = i(s);\n            if (n == null) throw \"argument is not safe JSON object string\";\n            this.aHeader = n.headers, this.sPayload = n.payload, this.aSignature = n.signatures;\n        } else try {\n            if (s.headers.length > 0) this.aHeader = s.headers;\n            else throw \"malformed header\";\n            if (typeof s.payload == \"string\") this.sPayload = s.payload;\n            else throw \"malformed signatures\";\n            if (s.signatures.length > 0) this.aSignature = s.signatures;\n            else throw \"malformed signatures\";\n        } catch (h) {\n            throw \"malformed JWS-JS JSON object: \" + h;\n        }\n    }, this.getJSON = function() {\n        return {\n            headers: this.aHeader,\n            payload: this.sPayload,\n            signatures: this.aSignature\n        };\n    }, this.isEmpty = function() {\n        return this.aHeader.length == 0 ? 1 : 0;\n    };\n};\na.crypto.ECDSA;\na.crypto.DSA;\na.crypto.Signature;\na.crypto.MessageDigest;\na.crypto.Mac;\nvar wn = k, Fn = we, bn = a;\na.crypto;\na.asn1;\na.jws;\na.lang;\nconst An = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({\n    __proto__: null,\n    KEYUTIL: wn,\n    KJUR: bn,\n    b64utoutf8: Fn\n}, Symbol.toStringTag, {\n    value: \"Module\"\n}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kinde/jwt-validator/dist/jsrsasign-B2gZIJhY.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@kinde/jwt-validator/dist/jwt-validator.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@kinde/jwt-validator/dist/jwt-validator.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   validateToken: () => (/* binding */ v)\n/* harmony export */ });\nconst d = /* @__PURE__ */ new Map();\nfunction b() {\n    return  false ? 0 : globalThis.crypto;\n}\nasync function A(e) {\n    let t = 0;\n    for(; t < 3;){\n        const n = new AbortController(), a = setTimeout(()=>n.abort(), 5e3);\n        try {\n            const o = await fetch(`${e}/.well-known/jwks.json`, {\n                signal: n.signal\n            });\n            if (clearTimeout(a), !o.ok) throw new Error(`Failed to fetch JWKS: ${o.status} ${o.statusText}`);\n            return await o.json();\n        } catch (o) {\n            t++, console.error(`Attempt ${t} - Error fetching JWKS:`, o);\n        }\n    }\n    throw new Error(\"Failed to fetch JWKS after multiple retries\");\n}\nasync function S(e, r, t) {\n    t && d.delete(r);\n    let n = d.get(r);\n    n || (n = await A(r), d.set(r, n));\n    try {\n        return await E(e, JSON.stringify(n)), {\n            valid: !0,\n            message: \"Token is valid\"\n        };\n    } catch (a) {\n        return t ? {\n            valid: !1,\n            message: a instanceof Error ? a.message : \"Unknown Error\"\n        } : S(e, r, !0);\n    }\n}\nasync function E(e, r) {\n    const [t, n, a] = e.split(\".\"), k = JSON.parse(atob(t)).kid, i = J(r, k);\n    if (!i || i.kty !== \"RSA\" || !i.n || !i.e || i.use !== \"sig\") throw new Error(\"Invalid JWK RSA key\");\n    const c = b();\n    if (c != null && c.subtle) {\n        const l = m(i.n), u = m(i.e), f = {\n            name: \"RSASSA-PKCS1-v1_5\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        try {\n            const s = {\n                kty: \"RSA\",\n                n: p(l),\n                e: p(u),\n                alg: \"RS256\"\n            }, w = await c.subtle.importKey(\"jwk\", s, f, !0, [\n                \"verify\"\n            ]), h = t + \".\" + n, g = j(a), y = await c.subtle.verify(f, w, g, new TextEncoder().encode(h));\n            if (!y) throw new Error(\"Signature verification failed\");\n            return y;\n        } catch (s) {\n            throw s;\n        }\n    } else {\n        const { KJUR: l, KEYUTIL: u, b64utoutf8: f } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@kinde\").then(__webpack_require__.bind(__webpack_require__, /*! ./jsrsasign-B2gZIJhY.js */ \"(rsc)/./node_modules/@kinde/jwt-validator/dist/jsrsasign-B2gZIJhY.js\")).then((g)=>g.j), s = JSON.parse(f(t));\n        if (s.alg !== \"RS256\") throw new Error(\"Unsupported signature algorithm: \" + s);\n        const w = u.getKey(i);\n        if (!l.jws.JWS.verifyJWT(e, w, {\n            alg: [\n                \"RS256\"\n            ]\n        })) throw new Error(\"Signature verification failed\");\n        return !0;\n    }\n}\nfunction p(e) {\n    let r = e.toString(16);\n    r.length % 2 !== 0 && (r = \"0\" + r);\n    const t = new Uint8Array(r.match(/.{1,2}/g).map((a)=>parseInt(a, 16)));\n    return btoa(String.fromCharCode.apply(null, Array.from(t))).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=+$/, \"\");\n}\nfunction J(e, r) {\n    const t = JSON.parse(e);\n    for (const n of t.keys)if (n.kid === r) return n;\n    throw new Error(`JWK not found${r ? ` for kid ${r}` : \"\"}`);\n}\nfunction m(e) {\n    e = e.replace(/[^A-Za-z0-9\\-_]/g, \"\"), e += Array.from({\n        length: (4 - e.length % 4) % 4\n    }, ()=>\"=\").join(\"\");\n    const r = e.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    let t;\n    try {\n        t = atob(r);\n    } catch (o) {\n        throw new Error(\"Invalid Base64 string: \" + o.message);\n    }\n    const n = Array.from(t, (o)=>o.charCodeAt(0).toString(16).padStart(2, \"0\")).join(\"\");\n    if (n.toLowerCase() === \"ffffffffffffffff\" || n.toLowerCase() === \"7ff0000000000000\") throw new Error(\"Decoded value represents NaN or Infinity\");\n    const a = n.replace(/^0+/, \"\");\n    return BigInt(\"0x\" + a || 0);\n}\nfunction j(e) {\n    return Uint8Array.from(atob(e.replace(/-/g, \"+\").replace(/_/g, \"/\")), (r)=>r.charCodeAt(0));\n}\nconst v = async (e)=>e.token ? e.domain ? e.token.split(\".\").length !== 3 ? {\n        valid: !1,\n        message: \"Invalid JWT format\"\n    } : await S(e.token, e.domain) : {\n        valid: !1,\n        message: \"Domain is required\"\n    } : {\n        valid: !1,\n        message: \"Token is required\"\n    };\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@kinde/jwt-validator/dist/jwt-validator.js\n");

/***/ })

};
;